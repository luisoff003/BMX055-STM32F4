
BMX055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800c008  0800c008  0001c008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c49c  0800c49c  00020338  2**0
                  CONTENTS
  4 .ARM          00000008  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4a4  0800c4a4  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4a4  0800c4a4  0001c4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4a8  0800c4a8  0001c4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0800c4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc4  20000338  0800c7e4  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ffc  0800c7e4  00021ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d1  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031df  00000000  00000000  00032939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00036a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d93  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014343  00000000  00000000  0005159b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdb0  00000000  00000000  000658de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f168e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  000f16e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000338 	.word	0x20000338
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bff0 	.word	0x0800bff0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000033c 	.word	0x2000033c
 80001dc:	0800bff0 	.word	0x0800bff0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f60:	b08e      	sub	sp, #56	; 0x38
 8000f62:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t debug = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
	uint8_t size = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 fb6e 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f8e6 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f000 f97a 	bl	800126c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f78:	f000 f94a 	bl	8001210 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f7c:	f007 fc12 	bl	80087a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

//  SearchDevice(&hi2c1);

  uint16_t init_tries= 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(BMX055_Init(&hi2c1) != 0 ){
 8000f84:	e005      	b.n	8000f92 <main+0x36>
	  BMX055_Init(&hi2c1);
 8000f86:	4865      	ldr	r0, [pc, #404]	; (800111c <main+0x1c0>)
 8000f88:	f007 f922 	bl	80081d0 <BMX055_Init>
	  init_tries++;
 8000f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f8e:	3301      	adds	r3, #1
 8000f90:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(BMX055_Init(&hi2c1) != 0 ){
 8000f92:	4862      	ldr	r0, [pc, #392]	; (800111c <main+0x1c0>)
 8000f94:	f007 f91c 	bl	80081d0 <BMX055_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f3      	bne.n	8000f86 <main+0x2a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f000 fbc6 	bl	8001730 <HAL_Delay>
	  int16_t rawAcc[3];
	  int16_t rawGyro[3];
	  int16_t rawMag[4];
	  float temp;
//	  readAccelData(rawAcc, &hi2c1);
	  size = sprintf((char *)buffer, "Acc: %d %d %d ", (int)rawAcc[0], (int)rawAcc[1], (int)rawAcc[2]);
 8000fa4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4959      	ldr	r1, [pc, #356]	; (8001120 <main+0x1c4>)
 8000fba:	485a      	ldr	r0, [pc, #360]	; (8001124 <main+0x1c8>)
 8000fbc:	f008 fd9e 	bl	8009afc <siprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	77fb      	strb	r3, [r7, #31]
//	  CDC_Transmit_FS(buffer, size);
	  HAL_Delay(2);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 fbb3 	bl	8001730 <HAL_Delay>

	  /* Read all sensors acc,gyro,mag */
	  BMX055_readAllSensors(&hi2c1, &data_BMX055);
 8000fca:	4957      	ldr	r1, [pc, #348]	; (8001128 <main+0x1cc>)
 8000fcc:	4853      	ldr	r0, [pc, #332]	; (800111c <main+0x1c0>)
 8000fce:	f007 fb7b 	bl	80086c8 <BMX055_readAllSensors>
	  size = sprintf((char *)buffer, "/*%.2f,%.2f,%.2f,",data_BMX055.AccelX, data_BMX055.AccelY, data_BMX055.AccelZ);
 8000fd2:	4b55      	ldr	r3, [pc, #340]	; (8001128 <main+0x1cc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fabe 	bl	8000558 <__aeabi_f2d>
 8000fdc:	4680      	mov	r8, r0
 8000fde:	4689      	mov	r9, r1
 8000fe0:	4b51      	ldr	r3, [pc, #324]	; (8001128 <main+0x1cc>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fab7 	bl	8000558 <__aeabi_f2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <main+0x1cc>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fab0 	bl	8000558 <__aeabi_f2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001000:	e9cd 4500 	strd	r4, r5, [sp]
 8001004:	4642      	mov	r2, r8
 8001006:	464b      	mov	r3, r9
 8001008:	4948      	ldr	r1, [pc, #288]	; (800112c <main+0x1d0>)
 800100a:	4846      	ldr	r0, [pc, #280]	; (8001124 <main+0x1c8>)
 800100c:	f008 fd76 	bl	8009afc <siprintf>
 8001010:	4603      	mov	r3, r0
 8001012:	77fb      	strb	r3, [r7, #31]
	  CDC_Transmit_FS(buffer, size);
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	4842      	ldr	r0, [pc, #264]	; (8001124 <main+0x1c8>)
 800101c:	f007 fc80 	bl	8008920 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8001020:	2002      	movs	r0, #2
 8001022:	f000 fb85 	bl	8001730 <HAL_Delay>

	  /* Get temperature from sensor BMX055 */
	  readTemp_BMX055(&temp, &hi2c1);
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	493c      	ldr	r1, [pc, #240]	; (800111c <main+0x1c0>)
 800102a:	4618      	mov	r0, r3
 800102c:	f007 f9dc 	bl	80083e8 <readTemp_BMX055>
	  size = sprintf((char *)buffer, "%.2f,",temp);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa90 	bl	8000558 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	493c      	ldr	r1, [pc, #240]	; (8001130 <main+0x1d4>)
 800103e:	4839      	ldr	r0, [pc, #228]	; (8001124 <main+0x1c8>)
 8001040:	f008 fd5c 	bl	8009afc <siprintf>
 8001044:	4603      	mov	r3, r0
 8001046:	77fb      	strb	r3, [r7, #31]
	  CDC_Transmit_FS(buffer, size);
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4619      	mov	r1, r3
 800104e:	4835      	ldr	r0, [pc, #212]	; (8001124 <main+0x1c8>)
 8001050:	f007 fc66 	bl	8008920 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8001054:	2002      	movs	r0, #2
 8001056:	f000 fb6b 	bl	8001730 <HAL_Delay>

//	  readGyroData(rawGyro, &hi2c1);
	  size = sprintf((char *)buffer, "%d,%d,%d,",rawGyro[0], rawGyro[1], rawGyro[2]);
 800105a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800105e:	461a      	mov	r2, r3
 8001060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001064:	4619      	mov	r1, r3
 8001066:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	460b      	mov	r3, r1
 800106e:	4931      	ldr	r1, [pc, #196]	; (8001134 <main+0x1d8>)
 8001070:	482c      	ldr	r0, [pc, #176]	; (8001124 <main+0x1c8>)
 8001072:	f008 fd43 	bl	8009afc <siprintf>
 8001076:	4603      	mov	r3, r0
 8001078:	77fb      	strb	r3, [r7, #31]
//	  CDC_Transmit_FS(buffer, size);
	  HAL_Delay(2);
 800107a:	2002      	movs	r0, #2
 800107c:	f000 fb58 	bl	8001730 <HAL_Delay>

	  size = sprintf((char *)buffer, "%.2f,%.2f,%.2f,",data_BMX055.GyroX, data_BMX055.GyroY, data_BMX055.GyroZ);
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <main+0x1cc>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	4680      	mov	r8, r0
 800108c:	4689      	mov	r9, r1
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <main+0x1cc>)
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa60 	bl	8000558 <__aeabi_f2d>
 8001098:	4604      	mov	r4, r0
 800109a:	460d      	mov	r5, r1
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <main+0x1cc>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa59 	bl	8000558 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010ae:	e9cd 4500 	strd	r4, r5, [sp]
 80010b2:	4642      	mov	r2, r8
 80010b4:	464b      	mov	r3, r9
 80010b6:	4920      	ldr	r1, [pc, #128]	; (8001138 <main+0x1dc>)
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <main+0x1c8>)
 80010ba:	f008 fd1f 	bl	8009afc <siprintf>
 80010be:	4603      	mov	r3, r0
 80010c0:	77fb      	strb	r3, [r7, #31]
	  CDC_Transmit_FS(buffer, size);
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <main+0x1c8>)
 80010ca:	f007 fc29 	bl	8008920 <CDC_Transmit_FS>
	  HAL_Delay(2);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f000 fb2e 	bl	8001730 <HAL_Delay>

	  readMagData(rawMag, &hi2c1);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <main+0x1c0>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f007 fa34 	bl	8008548 <readMagData>
	  size = sprintf((char *)buffer, "%d,%d,%d,%d*/\n\r",rawMag[0], rawMag[1], rawMag[2],rawMag[3]);
 80010e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010f4:	9201      	str	r2, [sp, #4]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4603      	mov	r3, r0
 80010fa:	460a      	mov	r2, r1
 80010fc:	490f      	ldr	r1, [pc, #60]	; (800113c <main+0x1e0>)
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <main+0x1c8>)
 8001100:	f008 fcfc 	bl	8009afc <siprintf>
 8001104:	4603      	mov	r3, r0
 8001106:	77fb      	strb	r3, [r7, #31]
	  CDC_Transmit_FS(buffer, size);
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <main+0x1c8>)
 8001110:	f007 fc06 	bl	8008920 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 fb0b 	bl	8001730 <HAL_Delay>
  {
 800111a:	e740      	b.n	8000f9e <main+0x42>
 800111c:	20000354 	.word	0x20000354
 8001120:	0800c008 	.word	0x0800c008
 8001124:	20000000 	.word	0x20000000
 8001128:	200003a8 	.word	0x200003a8
 800112c:	0800c018 	.word	0x0800c018
 8001130:	0800c02c 	.word	0x0800c02c
 8001134:	0800c034 	.word	0x0800c034
 8001138:	0800c040 	.word	0x0800c040
 800113c:	0800c050 	.word	0x0800c050

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f008 f862 	bl	8009218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <SystemClock_Config+0xc8>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xc8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SystemClock_Config+0xcc>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemClock_Config+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011b0:	2319      	movs	r3, #25
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 ffa9 	bl	800411c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d0:	f000 f890 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2103      	movs	r1, #3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fa0b 	bl	800460c <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011fc:	f000 f87a 	bl	80012f4 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f000 fd29 	bl	8001ca4 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f84c 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000354 	.word	0x20000354
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <MX_GPIO_Init+0x84>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_I2C_MspInit+0x8c>)
 80013aa:	f000 faf7 	bl	800199c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f960 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <OTG_FS_IRQHandler+0x10>)
 800143a:	f001 fd42 	bl	8002ec2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200018c0 	.word	0x200018c0

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001462:	f007 feaf 	bl	80091c4 <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
	return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
	while (1) {}		/* Make sure we hang here */
 800148a:	e7fe      	b.n	800148a <_exit+0x12>

0800148c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e00a      	b.n	80014b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800149e:	f3af 8000 	nop.w
 80014a2:	4601      	mov	r1, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf0      	blt.n	800149e <_read+0x12>
	}

return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e009      	b.n	80014ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf1      	blt.n	80014d8 <_write+0x12>
	}
	return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
	return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f007 fe14 	bl	80091c4 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200003d8 	.word	0x200003d8
 80015d0:	20002000 	.word	0x20002000

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fe:	490e      	ldr	r1, [pc, #56]	; (8001638 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001614:	4c0b      	ldr	r4, [pc, #44]	; (8001644 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001622:	f7ff ffd7 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f007 fdd3 	bl	80091d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fc97 	bl	8000f5c <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 800163c:	0800c4ac 	.word	0x0800c4ac
  ldr r2, =_sbss
 8001640:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8001644:	20001ffc 	.word	0x20001ffc

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_Init+0x40>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_Init+0x40>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x40>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 f94f 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	200f      	movs	r0, #15
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fe3e 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f967 	bl	8001982 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f92f 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000064 	.word	0x20000064
 80016e8:	2000006c 	.word	0x2000006c
 80016ec:	20000068 	.word	0x20000068

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	2000006c 	.word	0x2000006c
 8001714:	200003dc 	.word	0x200003dc

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200003dc 	.word	0x200003dc

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_Delay+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffde 	bl	8001718 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000006c 	.word	0x2000006c

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e159      	b.n	8001c6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8148 	bne.w	8001c66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a2 	beq.w	8001c66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_GPIO_Init+0x2ec>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x202>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a48      	ldr	r2, [pc, #288]	; (8001c90 <HAL_GPIO_Init+0x2f4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x1fe>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a47      	ldr	r2, [pc, #284]	; (8001c94 <HAL_GPIO_Init+0x2f8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x1fa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x1f6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a45      	ldr	r2, [pc, #276]	; (8001c9c <HAL_GPIO_Init+0x300>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x1f2>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4935      	ldr	r1, [pc, #212]	; (8001c88 <HAL_GPIO_Init+0x2ec>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be2:	4a2f      	ldr	r2, [pc, #188]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f aea2 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e12b      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fb40 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d08:	f002 fe38 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a81      	ldr	r2, [pc, #516]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d807      	bhi.n	8001d28 <HAL_I2C_Init+0x84>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	; (8001f1c <HAL_I2C_Init+0x278>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x92>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7d      	ldr	r2, [pc, #500]	; (8001f20 <HAL_I2C_Init+0x27c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e7      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a78      	ldr	r2, [pc, #480]	; (8001f24 <HAL_I2C_Init+0x280>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d802      	bhi.n	8001d78 <HAL_I2C_Init+0xd4>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e009      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_I2C_Init+0x284>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	495c      	ldr	r1, [pc, #368]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001da8:	428b      	cmp	r3, r1
 8001daa:	d819      	bhi.n	8001de0 <HAL_I2C_Init+0x13c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_I2C_Init+0x138>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e59      	subs	r1, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	e051      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x168>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x18e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x196>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x1bc>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	813b      	strh	r3, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f46:	f7ff fbe7 	bl	8001718 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	f040 80d9 	bne.w	800210c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2319      	movs	r3, #25
 8001f60:	2201      	movs	r2, #1
 8001f62:	496d      	ldr	r1, [pc, #436]	; (8002118 <HAL_I2C_Mem_Write+0x1ec>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fc7f 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0cc      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2C_Mem_Write+0x56>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0c5      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d007      	beq.n	8001fa8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2221      	movs	r2, #33	; 0x21
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a4d      	ldr	r2, [pc, #308]	; (800211c <HAL_I2C_Mem_Write+0x1f0>)
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fea:	88f8      	ldrh	r0, [r7, #6]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	8979      	ldrh	r1, [r7, #10]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fab6 	bl	800256c <I2C_RequestMemoryWrite>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d052      	beq.n	80020ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e081      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fd00 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11b      	bne.n	80020ac <HAL_I2C_Mem_Write+0x180>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d017      	beq.n	80020ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1aa      	bne.n	800200a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fcec 	bl	8002a96 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e016      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	00100002 	.word	0x00100002
 800211c:	ffff0000 	.word	0xffff0000

08002120 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7ff faed 	bl	8001718 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	f040 8208 	bne.w	800255e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2319      	movs	r3, #25
 8002154:	2201      	movs	r2, #1
 8002156:	497b      	ldr	r1, [pc, #492]	; (8002344 <HAL_I2C_Mem_Read+0x224>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fb85 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	e1fb      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Mem_Read+0x56>
 8002172:	2302      	movs	r3, #2
 8002174:	e1f4      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d007      	beq.n	800219c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2222      	movs	r2, #34	; 0x22
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a5b      	ldr	r2, [pc, #364]	; (8002348 <HAL_I2C_Mem_Read+0x228>)
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021de:	88f8      	ldrh	r0, [r7, #6]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa52 	bl	8002698 <I2C_RequestMemoryRead>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1b0      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d113      	bne.n	800222e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e184      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	2b01      	cmp	r3, #1
 8002234:	d11b      	bne.n	800226e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e164      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	2b02      	cmp	r3, #2
 8002274:	d11b      	bne.n	80022ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	e144      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022c4:	e138      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	f200 80f1 	bhi.w	80024b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d123      	bne.n	8002320 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fc1b 	bl	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e139      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231e:	e10b      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b02      	cmp	r3, #2
 8002326:	d14e      	bne.n	80023c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232e:	2200      	movs	r2, #0
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <HAL_I2C_Mem_Read+0x22c>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa98 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e10e      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000
 800234c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c4:	e0b8      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	2200      	movs	r2, #0
 80023ce:	4966      	ldr	r1, [pc, #408]	; (8002568 <HAL_I2C_Mem_Read+0x448>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fa49 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0bf      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	2200      	movs	r2, #0
 800242a:	494f      	ldr	r1, [pc, #316]	; (8002568 <HAL_I2C_Mem_Read+0x448>)
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fa1b 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e091      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b0:	e042      	b.n	8002538 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fb2e 	bl	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04c      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d118      	bne.n	8002538 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f aec2 	bne.w	80022c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	00010004 	.word	0x00010004

0800256c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	2200      	movs	r2, #0
 800259e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f960 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025bc:	d103      	bne.n	80025c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e05f      	b.n	800268a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	492d      	ldr	r1, [pc, #180]	; (8002694 <I2C_RequestMemoryWrite+0x128>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f998 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e04c      	b.n	800268a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fa02 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e02b      	b.n	800268a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	611a      	str	r2, [r3, #16]
 8002642:	e021      	b.n	8002688 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002644:	893b      	ldrh	r3, [r7, #8]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	b2da      	uxtb	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f9dc 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b04      	cmp	r3, #4
 8002668:	d107      	bne.n	800267a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e005      	b.n	800268a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800267e:	893b      	ldrh	r3, [r7, #8]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	00010002 	.word	0x00010002

08002698 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	460b      	mov	r3, r1
 80026ac:	813b      	strh	r3, [r7, #8]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2200      	movs	r2, #0
 80026da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8c2 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f8:	d103      	bne.n	8002702 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0aa      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	4952      	ldr	r1, [pc, #328]	; (8002864 <I2C_RequestMemoryRead+0x1cc>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f8fa 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e097      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	6a39      	ldr	r1, [r7, #32]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f964 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b04      	cmp	r3, #4
 8002758:	d107      	bne.n	800276a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e076      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002774:	893b      	ldrh	r3, [r7, #8]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	e021      	b.n	80027c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002780:	893b      	ldrh	r3, [r7, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	6a39      	ldr	r1, [r7, #32]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f93e 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d107      	bne.n	80027b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e050      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ba:	893b      	ldrh	r3, [r7, #8]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	6a39      	ldr	r1, [r7, #32]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f923 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e035      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2200      	movs	r2, #0
 8002808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f82b 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002826:	d103      	bne.n	8002830 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e013      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	6a3a      	ldr	r2, [r7, #32]
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <I2C_RequestMemoryRead+0x1cc>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f863 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	00010002 	.word	0x00010002

08002868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	e025      	b.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d021      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe ff49 	bl	8001718 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d116      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e023      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	e00c      	b.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	429a      	cmp	r2, r3
 800290a:	d0b6      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002924:	e051      	b.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d123      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e046      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe fec7 	bl	8001718 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e020      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10c      	bne.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	e00b      	b.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d18d      	bne.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a20:	e02d      	b.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f8ce 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02d      	b.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d021      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe fe6d 	bl	8001718 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e007      	b.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d1ca      	bne.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa2:	e02d      	b.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f88d 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02d      	b.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d021      	beq.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe fe2c 	bl	8001718 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e007      	b.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d1ca      	bne.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b24:	e042      	b.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d119      	bne.n	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e029      	b.n	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fdd6 	bl	8001718 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d1b5      	bne.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d11b      	bne.n	8002c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c24:	b08f      	sub	sp, #60	; 0x3c
 8002c26:	af0a      	add	r7, sp, #40	; 0x28
 8002c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e10f      	b.n	8002e54 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f005 ffae 	bl	8008bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 ffab 	bl	8004bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	687e      	ldr	r6, [r7, #4]
 8002c80:	466d      	mov	r5, sp
 8002c82:	f106 0410 	add.w	r4, r6, #16
 8002c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c96:	1d33      	adds	r3, r6, #4
 8002c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	f001 fe82 	bl	80049a4 <USB_CoreInit>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0d0      	b.n	8002e54 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 ff99 	bl	8004bf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e04a      	b.n	8002d5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	333d      	adds	r3, #61	; 0x3d
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	b298      	uxth	r0, r3
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3344      	adds	r3, #68	; 0x44
 8002d00:	4602      	mov	r2, r0
 8002d02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3340      	adds	r3, #64	; 0x40
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3348      	adds	r3, #72	; 0x48
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334c      	adds	r3, #76	; 0x4c
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3354      	adds	r3, #84	; 0x54
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	3301      	adds	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3af      	bcc.n	8002cc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e044      	b.n	8002df4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	3301      	adds	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3b5      	bcc.n	8002d6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	687e      	ldr	r6, [r7, #4]
 8002e06:	466d      	mov	r5, sp
 8002e08:	f106 0410 	add.w	r4, r6, #16
 8002e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e1c:	1d33      	adds	r3, r6, #4
 8002e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f001 ff31 	bl	8004c88 <USB_DevInit>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e00d      	b.n	8002e54 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 f880 	bl	8005f52 <USB_DevDisconnect>

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_Start+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e020      	b.n	8002eba <HAL_PCD_Start+0x5e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d109      	bne.n	8002e9c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d005      	beq.n	8002e9c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fe83 	bl	8004bac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 f830 	bl	8005f10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ec2:	b590      	push	{r4, r7, lr}
 8002ec4:	b08d      	sub	sp, #52	; 0x34
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 f8ee 	bl	80060ba <USB_GetMode>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 848a 	bne.w	80037fa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 f852 	bl	8005f94 <USB_ReadInterrupts>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8480 	beq.w	80037f8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 f83f 	bl	8005f94 <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d107      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f002 0202 	and.w	r2, r2, #2
 8002f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 f82d 	bl	8005f94 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d161      	bne.n	8003008 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0210 	bic.w	r2, r2, #16
 8002f52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	0c5b      	lsrs	r3, r3, #17
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d124      	bne.n	8002fca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d035      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6a38      	ldr	r0, [r7, #32]
 8002fa0:	f002 fe64 	bl	8005c6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb0:	441a      	add	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc2:	441a      	add	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	e016      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	0c5b      	lsrs	r3, r3, #17
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d110      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6a38      	ldr	r0, [r7, #32]
 8002fe2:	f002 fe43 	bl	8005c6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	441a      	add	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0210 	orr.w	r2, r2, #16
 8003006:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f002 ffc1 	bl	8005f94 <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003018:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800301c:	f040 80a7 	bne.w	800316e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f002 ffc6 	bl	8005fba <USB_ReadDevAllOutEpInterrupt>
 800302e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003030:	e099      	b.n	8003166 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808e 	beq.w	800315a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f002 ffea 	bl	8006022 <USB_ReadDevOutEPInterrupt>
 800304e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003066:	461a      	mov	r2, r3
 8003068:	2301      	movs	r3, #1
 800306a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800306c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fec2 	bl	8003df8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	2308      	movs	r3, #8
 800308e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 ff98 	bl	8003fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	2310      	movs	r3, #16
 80030b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d030      	beq.n	8003120 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d109      	bne.n	80030de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	78db      	ldrb	r3, [r3, #3]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d108      	bne.n	800310e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f005 fe4d 	bl	8008da8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	461a      	mov	r2, r3
 800311c:	2302      	movs	r3, #2
 800311e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2320      	movs	r3, #32
 800313a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	3301      	adds	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f af62 	bne.w	8003032 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f002 ff0e 	bl	8005f94 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003182:	f040 80db 	bne.w	800333c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f002 ff2f 	bl	8005fee <USB_ReadDevAllInEpInterrupt>
 8003190:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003196:	e0cd      	b.n	8003334 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80c2 	beq.w	8003328 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 ff55 	bl	800605e <USB_ReadDevInEPInterrupt>
 80031b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d057      	beq.n	8003270 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2201      	movs	r2, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69f9      	ldr	r1, [r7, #28]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4013      	ands	r3, r2
 80031e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	461a      	mov	r2, r3
 80031f2:	2301      	movs	r3, #1
 80031f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d132      	bne.n	8003264 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334c      	adds	r3, #76	; 0x4c
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4403      	add	r3, r0
 800321e:	3348      	adds	r3, #72	; 0x48
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4419      	add	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	334c      	adds	r3, #76	; 0x4c
 8003234:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d113      	bne.n	8003264 <HAL_PCD_IRQHandler+0x3a2>
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3354      	adds	r3, #84	; 0x54
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800325c:	461a      	mov	r2, r3
 800325e:	2101      	movs	r1, #1
 8003260:	f002 ff5c 	bl	800611c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f005 fd21 	bl	8008cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003286:	461a      	mov	r2, r3
 8003288:	2308      	movs	r3, #8
 800328a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	461a      	mov	r2, r3
 80032a4:	2310      	movs	r3, #16
 80032a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032be:	461a      	mov	r2, r3
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d0:	6a38      	ldr	r0, [r7, #32]
 80032d2:	f001 fe3d 	bl	8004f50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f005 fd64 	bl	8008dcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	2302      	movs	r3, #2
 8003314:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fcdb 	bl	8003cde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	3301      	adds	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f af2e 	bne.w	8003198 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fe27 	bl	8005f94 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003350:	d122      	bne.n	8003398 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003378:	2100      	movs	r1, #0
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fec2 	bl	8004104 <HAL_PCDEx_LPM_Callback>
 8003380:	e002      	b.n	8003388 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f005 fd02 	bl	8008d8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fdf9 	bl	8005f94 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d112      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f005 fcbe 	bl	8008d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 fddb 	bl	8005f94 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	f040 80b7 	bne.w	800355a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2110      	movs	r1, #16
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fda2 	bl	8004f50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003410:	e046      	b.n	80034a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	461a      	mov	r2, r3
 8003420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003424:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003436:	0151      	lsls	r1, r2, #5
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	440a      	add	r2, r1
 800343c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003440:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003444:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003458:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346a:	0151      	lsls	r1, r2, #5
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	440a      	add	r2, r1
 8003470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003478:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	440a      	add	r2, r1
 8003490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003498:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	3301      	adds	r3, #1
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3b3      	bcc.n	8003412 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d6:	f043 030b 	orr.w	r3, r3, #11
 80034da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ec:	f043 030b 	orr.w	r3, r3, #11
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	e015      	b.n	8003520 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003506:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800350a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351a:	f043 030b 	orr.w	r3, r3, #11
 800351e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003532:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003544:	461a      	mov	r2, r3
 8003546:	f002 fde9 	bl	800611c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fd18 	bl	8005f94 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356e:	d124      	bne.n	80035ba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f002 fdae 	bl	80060d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fd63 	bl	800504a <USB_GetDevSpeed>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681c      	ldr	r4, [r3, #0]
 8003590:	f001 f9e8 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8003594:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	4620      	mov	r0, r4
 80035a0:	f001 fa62 	bl	8004a68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f005 fbac 	bl	8008d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fce8 	bl	8005f94 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d10a      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f005 fb89 	bl	8008ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f002 0208 	and.w	r2, r2, #8
 80035e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fcd3 	bl	8005f94 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d122      	bne.n	800363e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003604:	2301      	movs	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	e014      	b.n	8003634 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb27 	bl	8003c7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	3301      	adds	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e5      	bcc.n	800360a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fca6 	bl	8005f94 <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d13b      	bne.n	80036cc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	e02b      	b.n	80036b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3340      	adds	r3, #64	; 0x40
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003680:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	da12      	bge.n	80036ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	333f      	adds	r3, #63	; 0x3f
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fae8 	bl	8003c7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	3301      	adds	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3ce      	bcc.n	800365a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fc5f 	bl	8005f94 <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e0:	d155      	bne.n	800378e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e045      	b.n	8003774 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d12e      	bne.n	800376e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003710:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	da2b      	bge.n	800376e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003722:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003726:	429a      	cmp	r2, r3
 8003728:	d121      	bne.n	800376e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376a:	6053      	str	r3, [r2, #4]
            break;
 800376c:	e007      	b.n	800377e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	3301      	adds	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b4      	bcc.n	80036e8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fbfe 	bl	8005f94 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f005 fb23 	bl	8008df0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 fbe8 	bl	8005f94 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d115      	bne.n	80037fa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f005 fb13 	bl	8008e0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e000      	b.n	80037fa <HAL_PCD_IRQHandler+0x938>
      return;
 80037f8:	bf00      	nop
    }
  }
}
 80037fa:	3734      	adds	r7, #52	; 0x34
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_PCD_SetAddress+0x1a>
 8003816:	2302      	movs	r3, #2
 8003818:	e013      	b.n	8003842 <HAL_PCD_SetAddress+0x42>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f002 fb46 	bl	8005ec4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	461a      	mov	r2, r3
 8003858:	4603      	mov	r3, r0
 800385a:	70fb      	strb	r3, [r7, #3]
 800385c:	460b      	mov	r3, r1
 800385e:	803b      	strh	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0f      	bge.n	8003890 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3338      	adds	r3, #56	; 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
 800388e:	e00f      	b.n	80038b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038bc:	883a      	ldrh	r2, [r7, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	78ba      	ldrb	r2, [r7, #2]
 80038c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038da:	78bb      	ldrb	r3, [r7, #2]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d102      	bne.n	80038e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_EP_Open+0xaa>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e00e      	b.n	8003912 <HAL_PCD_EP_Open+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fbc6 	bl	8005094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003910:	7afb      	ldrb	r3, [r7, #11]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	da0f      	bge.n	800394e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3338      	adds	r3, #56	; 0x38
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	705a      	strb	r2, [r3, #1]
 800394c:	e00f      	b.n	800396e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_EP_Close+0x6e>
 8003984:	2302      	movs	r3, #2
 8003986:	e00e      	b.n	80039a6 <HAL_PCD_EP_Close+0x8c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	f001 fc04 	bl	80051a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	460b      	mov	r3, r1
 80039bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f001 fee3 	bl	80057ec <USB_EP0StartXfer>
 8003a26:	e008      	b.n	8003a3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	f001 fc91 	bl	800535c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3338      	adds	r3, #56	; 0x38
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	f001 fe81 	bl	80057ec <USB_EP0StartXfer>
 8003aea:	e008      	b.n	8003afe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	f001 fc2f 	bl	800535c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d901      	bls.n	8003b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e050      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0f      	bge.n	8003b4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3338      	adds	r3, #56	; 0x38
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
 8003b4c:	e00d      	b.n	8003b6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_SetStall+0x82>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e01e      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 f8bf 	bl	8005d1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	b2d9      	uxtb	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f002 faaf 	bl	800611c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d901      	bls.n	8003bee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00f      	b.n	8003c36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_EP_ClrStall+0x86>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e00e      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 f8c7 	bl	8005df8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0c      	bge.n	8003caa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e00c      	b.n	8003cc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fee6 	bl	8005a9c <USB_EPStopXfer>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3338      	adds	r3, #56	; 0x38
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d901      	bls.n	8003d16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06c      	b.n	8003df0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d902      	bls.n	8003d32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3303      	adds	r3, #3
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3a:	e02b      	b.n	8003d94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d902      	bls.n	8003d58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3303      	adds	r3, #3
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6919      	ldr	r1, [r3, #16]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4603      	mov	r3, r0
 8003d76:	6978      	ldr	r0, [r7, #20]
 8003d78:	f001 ff3a 	bl	8005bf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	441a      	add	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d809      	bhi.n	8003dbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d203      	bcs.n	8003dbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1be      	bne.n	8003d3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d811      	bhi.n	8003dee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	6939      	ldr	r1, [r7, #16]
 8003de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dea:	4013      	ands	r3, r2
 8003dec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	333c      	adds	r3, #60	; 0x3c
 8003e10:	3304      	adds	r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d17b      	bne.n	8003f26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f240 80b9 	bls.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80b3 	beq.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	e0a7      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	e098      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 8093 	bne.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4a4b      	ldr	r2, [pc, #300]	; (8003fc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d90f      	bls.n	8003eb6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	6093      	str	r3, [r2, #8]
 8003eb4:	e07e      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d114      	bne.n	8003f18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f00:	461a      	mov	r2, r3
 8003f02:	2101      	movs	r1, #1
 8003f04:	f002 f90a 	bl	800611c <USB_EP0_OutStart>
 8003f08:	e006      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	441a      	add	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f004 feac 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
 8003f24:	e046      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d124      	bne.n	8003f78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	6093      	str	r3, [r2, #8]
 8003f4c:	e032      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2320      	movs	r3, #32
 8003f68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f004 fe83 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
 8003f76:	e01d      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d114      	bne.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f002 f8ba 	bl	800611c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f004 fe64 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	4f54300a 	.word	0x4f54300a
 8003fc4:	4f54310a 	.word	0x4f54310a

08003fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	333c      	adds	r3, #60	; 0x3c
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d90e      	bls.n	800401c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f004 fe1b 	bl	8008c58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <PCD_EP_OutSetupPacket_int+0x88>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d90c      	bls.n	8004044 <PCD_EP_OutSetupPacket_int+0x7c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800403c:	461a      	mov	r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	f002 f86c 	bl	800611c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	4f54300a 	.word	0x4f54300a

08004054 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
 8004060:	4613      	mov	r3, r2
 8004062:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004072:	883b      	ldrh	r3, [r7, #0]
 8004074:	0419      	lsls	r1, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	430a      	orrs	r2, r1
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
 8004080:	e028      	b.n	80040d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e00d      	b.n	80040b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	3340      	adds	r3, #64	; 0x40
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4413      	add	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	3301      	adds	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3ec      	bcc.n	8004096 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040bc:	883b      	ldrh	r3, [r7, #0]
 80040be:	0418      	lsls	r0, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4302      	orrs	r2, r0
 80040cc:	3340      	adds	r3, #64	; 0x40
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e267      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d075      	beq.n	8004226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413a:	4b88      	ldr	r3, [pc, #544]	; (800435c <HAL_RCC_OscConfig+0x240>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b04      	cmp	r3, #4
 8004144:	d00c      	beq.n	8004160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004146:	4b85      	ldr	r3, [pc, #532]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414e:	2b08      	cmp	r3, #8
 8004150:	d112      	bne.n	8004178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004152:	4b82      	ldr	r3, [pc, #520]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415e:	d10b      	bne.n	8004178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	4b7e      	ldr	r3, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05b      	beq.n	8004224 <HAL_RCC_OscConfig+0x108>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d157      	bne.n	8004224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e242      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d106      	bne.n	8004190 <HAL_RCC_OscConfig+0x74>
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x98>
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6f      	ldr	r2, [pc, #444]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b6d      	ldr	r3, [pc, #436]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6c      	ldr	r2, [pc, #432]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 80041b4:	4b69      	ldr	r3, [pc, #420]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a68      	ldr	r2, [pc, #416]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a65      	ldr	r2, [pc, #404]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd faa0 	bl	8001718 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fd fa9c 	bl	8001718 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e207      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xc0>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd fa8c 	bl	8001718 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004204:	f7fd fa88 	bl	8001718 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1f3      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	4b51      	ldr	r3, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0xe8>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424a:	4b44      	ldr	r3, [pc, #272]	; (800435c <HAL_RCC_OscConfig+0x240>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x152>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1c7      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b3b      	ldr	r3, [pc, #236]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4937      	ldr	r1, [pc, #220]	; (800435c <HAL_RCC_OscConfig+0x240>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e03a      	b.n	80042fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_OscConfig+0x244>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fa41 	bl	8001718 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429a:	f7fd fa3d 	bl	8001718 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1a8      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	4b2b      	ldr	r3, [pc, #172]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4925      	ldr	r1, [pc, #148]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x244>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fa20 	bl	8001718 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fd fa1c 	bl	8001718 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e187      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d036      	beq.n	8004374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_RCC_OscConfig+0x248>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fa00 	bl	8001718 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431c:	f7fd f9fc 	bl	8001718 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e167      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_OscConfig+0x240>)
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x200>
 800433a:	e01b      	b.n	8004374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_OscConfig+0x248>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fd f9e9 	bl	8001718 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	e00e      	b.n	8004368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434a:	f7fd f9e5 	bl	8001718 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d907      	bls.n	8004368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e150      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
 800435c:	40023800 	.word	0x40023800
 8004360:	42470000 	.word	0x42470000
 8004364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800436a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ea      	bne.n	800434a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8097 	beq.w	80044b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b81      	ldr	r3, [pc, #516]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	4b7d      	ldr	r3, [pc, #500]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b7a      	ldr	r3, [pc, #488]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	4b77      	ldr	r3, [pc, #476]	; (8004590 <HAL_RCC_OscConfig+0x474>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d118      	bne.n	80043f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043be:	4b74      	ldr	r3, [pc, #464]	; (8004590 <HAL_RCC_OscConfig+0x474>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	; (8004590 <HAL_RCC_OscConfig+0x474>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ca:	f7fd f9a5 	bl	8001718 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fd f9a1 	bl	8001718 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e10c      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_OscConfig+0x474>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x2ea>
 80043f8:	4b64      	ldr	r3, [pc, #400]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4a63      	ldr	r2, [pc, #396]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	; 0x70
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x324>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x30c>
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	4a5e      	ldr	r2, [pc, #376]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6713      	str	r3, [r2, #112]	; 0x70
 800441a:	4b5c      	ldr	r3, [pc, #368]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a5b      	ldr	r2, [pc, #364]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0x324>
 8004428:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4a57      	ldr	r2, [pc, #348]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	; 0x70
 8004434:	4b55      	ldr	r3, [pc, #340]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a54      	ldr	r2, [pc, #336]	; (800458c <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 0304 	bic.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd f966 	bl	8001718 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd f962 	bl	8001718 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0cb      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	4b49      	ldr	r3, [pc, #292]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ee      	beq.n	8004450 <HAL_RCC_OscConfig+0x334>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004474:	f7fd f950 	bl	8001718 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fd f94c 	bl	8001718 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0b5      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	4a38      	ldr	r2, [pc, #224]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80a1 	beq.w	80045fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d05c      	beq.n	8004580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d141      	bne.n	8004552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <HAL_RCC_OscConfig+0x478>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd f920 	bl	8001718 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd f91c 	bl	8001718 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e087      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_OscConfig+0x470>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	491b      	ldr	r1, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x478>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fd f8f5 	bl	8001718 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004532:	f7fd f8f1 	bl	8001718 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e05c      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x416>
 8004550:	e054      	b.n	80045fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_RCC_OscConfig+0x478>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fd f8de 	bl	8001718 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd f8da 	bl	8001718 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e045      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_OscConfig+0x470>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x444>
 800457e:	e03d      	b.n	80045fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e038      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
 800458c:	40023800 	.word	0x40023800
 8004590:	40007000 	.word	0x40007000
 8004594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x4ec>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d028      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d121      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d11a      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	3b01      	subs	r3, #1
 80045e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0cc      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d90c      	bls.n	8004648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b8      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800466a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004678:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d044      	beq.n	800472c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d119      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e067      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4934      	ldr	r1, [pc, #208]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fc:	f7fd f80c 	bl	8001718 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fd f808 	bl	8001718 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e04f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d20c      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e032      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4916      	ldr	r1, [pc, #88]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490e      	ldr	r1, [pc, #56]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f821 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8004796:	4602      	mov	r2, r0
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	490a      	ldr	r1, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	5ccb      	ldrb	r3, [r1, r3]
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc ff6c 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023c00 	.word	0x40023c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800c0a8 	.word	0x0800c0a8
 80047d0:	20000064 	.word	0x20000064
 80047d4:	20000068 	.word	0x20000068

080047d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b090      	sub	sp, #64	; 0x40
 80047de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
 80047e4:	2300      	movs	r3, #0
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e8:	2300      	movs	r3, #0
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f0:	4b59      	ldr	r3, [pc, #356]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d00d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x40>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	f200 80a1 	bhi.w	8004944 <HAL_RCC_GetSysClockFreq+0x16c>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x34>
 8004806:	2b04      	cmp	r3, #4
 8004808:	d003      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x3a>
 800480a:	e09b      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b53      	ldr	r3, [pc, #332]	; (800495c <HAL_RCC_GetSysClockFreq+0x184>)
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004810:	e09b      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_GetSysClockFreq+0x188>)
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004816:	e098      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004818:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004822:	4b4d      	ldr	r3, [pc, #308]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	2200      	movs	r2, #0
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	627a      	str	r2, [r7, #36]	; 0x24
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004840:	2100      	movs	r1, #0
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_GetSysClockFreq+0x188>)
 8004844:	fb03 f201 	mul.w	r2, r3, r1
 8004848:	2300      	movs	r3, #0
 800484a:	fb00 f303 	mul.w	r3, r0, r3
 800484e:	4413      	add	r3, r2
 8004850:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_RCC_GetSysClockFreq+0x188>)
 8004852:	fba0 1202 	umull	r1, r2, r0, r2
 8004856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004858:	460a      	mov	r2, r1
 800485a:	62ba      	str	r2, [r7, #40]	; 0x28
 800485c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485e:	4413      	add	r3, r2
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	2200      	movs	r2, #0
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	61fa      	str	r2, [r7, #28]
 800486a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004872:	f7fc f9f1 	bl	8000c58 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4613      	mov	r3, r2
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487e:	e053      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4b35      	ldr	r3, [pc, #212]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	617a      	str	r2, [r7, #20]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004892:	f04f 0b00 	mov.w	fp, #0
 8004896:	4652      	mov	r2, sl
 8004898:	465b      	mov	r3, fp
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	0159      	lsls	r1, r3, #5
 80048a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a8:	0150      	lsls	r0, r2, #5
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	ebb2 080a 	subs.w	r8, r2, sl
 80048b2:	eb63 090b 	sbc.w	r9, r3, fp
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ca:	ebb2 0408 	subs.w	r4, r2, r8
 80048ce:	eb63 0509 	sbc.w	r5, r3, r9
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	00eb      	lsls	r3, r5, #3
 80048dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e0:	00e2      	lsls	r2, r4, #3
 80048e2:	4614      	mov	r4, r2
 80048e4:	461d      	mov	r5, r3
 80048e6:	eb14 030a 	adds.w	r3, r4, sl
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	eb45 030b 	adc.w	r3, r5, fp
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fe:	4629      	mov	r1, r5
 8004900:	028b      	lsls	r3, r1, #10
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004908:	4621      	mov	r1, r4
 800490a:	028a      	lsls	r2, r1, #10
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	2200      	movs	r2, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	60fa      	str	r2, [r7, #12]
 8004918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800491c:	f7fc f99c 	bl	8000c58 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_GetSysClockFreq+0x180>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004942:	e002      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetSysClockFreq+0x184>)
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800494c:	4618      	mov	r0, r3
 800494e:	3740      	adds	r7, #64	; 0x40
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400
 8004960:	017d7840 	.word	0x017d7840

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000064 	.word	0x20000064

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800c0b8 	.word	0x0800c0b8

080049a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049a4:	b084      	sub	sp, #16
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	f107 001c 	add.w	r0, r7, #28
 80049b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d122      	bne.n	8004a02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fbee 	bl	80061d8 <USB_CoreReset>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e01a      	b.n	8004a38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f001 fbe2 	bl	80061d8 <USB_CoreReset>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
 8004a2a:	e005      	b.n	8004a38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10b      	bne.n	8004a56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f043 0206 	orr.w	r2, r3, #6
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a62:	b004      	add	sp, #16
 8004a64:	4770      	bx	lr
	...

08004a68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d165      	bne.n	8004b48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4a41      	ldr	r2, [pc, #260]	; (8004b84 <USB_SetTurnaroundTime+0x11c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d906      	bls.n	8004a92 <USB_SetTurnaroundTime+0x2a>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <USB_SetTurnaroundTime+0x120>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d202      	bcs.n	8004a92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a8c:	230f      	movs	r3, #15
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e062      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <USB_SetTurnaroundTime+0x120>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d306      	bcc.n	8004aa8 <USB_SetTurnaroundTime+0x40>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <USB_SetTurnaroundTime+0x124>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d202      	bcs.n	8004aa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aa2:	230e      	movs	r3, #14
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e057      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <USB_SetTurnaroundTime+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d306      	bcc.n	8004abe <USB_SetTurnaroundTime+0x56>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4a37      	ldr	r2, [pc, #220]	; (8004b90 <USB_SetTurnaroundTime+0x128>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d202      	bcs.n	8004abe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ab8:	230d      	movs	r3, #13
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e04c      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4a33      	ldr	r2, [pc, #204]	; (8004b90 <USB_SetTurnaroundTime+0x128>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d306      	bcc.n	8004ad4 <USB_SetTurnaroundTime+0x6c>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4a32      	ldr	r2, [pc, #200]	; (8004b94 <USB_SetTurnaroundTime+0x12c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d802      	bhi.n	8004ad4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ace:	230c      	movs	r3, #12
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e041      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4a2f      	ldr	r2, [pc, #188]	; (8004b94 <USB_SetTurnaroundTime+0x12c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d906      	bls.n	8004aea <USB_SetTurnaroundTime+0x82>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4a2e      	ldr	r2, [pc, #184]	; (8004b98 <USB_SetTurnaroundTime+0x130>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d802      	bhi.n	8004aea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ae4:	230b      	movs	r3, #11
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e036      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <USB_SetTurnaroundTime+0x130>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d906      	bls.n	8004b00 <USB_SetTurnaroundTime+0x98>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4a29      	ldr	r2, [pc, #164]	; (8004b9c <USB_SetTurnaroundTime+0x134>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d802      	bhi.n	8004b00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004afa:	230a      	movs	r3, #10
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e02b      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <USB_SetTurnaroundTime+0x134>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d906      	bls.n	8004b16 <USB_SetTurnaroundTime+0xae>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4a25      	ldr	r2, [pc, #148]	; (8004ba0 <USB_SetTurnaroundTime+0x138>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d202      	bcs.n	8004b16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b10:	2309      	movs	r3, #9
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e020      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <USB_SetTurnaroundTime+0x138>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d306      	bcc.n	8004b2c <USB_SetTurnaroundTime+0xc4>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <USB_SetTurnaroundTime+0x13c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d802      	bhi.n	8004b2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b26:	2308      	movs	r3, #8
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e015      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <USB_SetTurnaroundTime+0x13c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d906      	bls.n	8004b42 <USB_SetTurnaroundTime+0xda>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a1c      	ldr	r2, [pc, #112]	; (8004ba8 <USB_SetTurnaroundTime+0x140>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d202      	bcs.n	8004b42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b3c:	2307      	movs	r3, #7
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e00a      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b42:	2306      	movs	r3, #6
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e007      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b4e:	2309      	movs	r3, #9
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e001      	b.n	8004b58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b54:	2309      	movs	r3, #9
 8004b56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b70:	431a      	orrs	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	00d8acbf 	.word	0x00d8acbf
 8004b88:	00e4e1c0 	.word	0x00e4e1c0
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	01067380 	.word	0x01067380
 8004b94:	011a499f 	.word	0x011a499f
 8004b98:	01312cff 	.word	0x01312cff
 8004b9c:	014ca43f 	.word	0x014ca43f
 8004ba0:	016e3600 	.word	0x016e3600
 8004ba4:	01a6ab1f 	.word	0x01a6ab1f
 8004ba8:	01e84800 	.word	0x01e84800

08004bac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d115      	bne.n	8004c3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f7fc fd86 	bl	8001730 <HAL_Delay>
      ms++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f001 fa45 	bl	80060ba <USB_GetMode>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d01e      	beq.n	8004c74 <USB_SetCurrentMode+0x84>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b31      	cmp	r3, #49	; 0x31
 8004c3a:	d9f0      	bls.n	8004c1e <USB_SetCurrentMode+0x2e>
 8004c3c:	e01a      	b.n	8004c74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d115      	bne.n	8004c70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7fc fd6d 	bl	8001730 <HAL_Delay>
      ms++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 fa2c 	bl	80060ba <USB_GetMode>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <USB_SetCurrentMode+0x84>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b31      	cmp	r3, #49	; 0x31
 8004c6c:	d9f0      	bls.n	8004c50 <USB_SetCurrentMode+0x60>
 8004c6e:	e001      	b.n	8004c74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e005      	b.n	8004c80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b32      	cmp	r3, #50	; 0x32
 8004c78:	d101      	bne.n	8004c7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c88:	b084      	sub	sp, #16
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e009      	b.n	8004cbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3340      	adds	r3, #64	; 0x40
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b0e      	cmp	r3, #14
 8004cc0:	d9f2      	bls.n	8004ca8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11c      	bne.n	8004d02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f043 0302 	orr.w	r3, r3, #2
 8004cda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8004d00:	e00b      	b.n	8004d1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	461a      	mov	r2, r3
 8004d36:	680b      	ldr	r3, [r1, #0]
 8004d38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10c      	bne.n	8004d5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d46:	2100      	movs	r1, #0
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f965 	bl	8005018 <USB_SetDevSpeed>
 8004d4e:	e008      	b.n	8004d62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d50:	2101      	movs	r1, #1
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f960 	bl	8005018 <USB_SetDevSpeed>
 8004d58:	e003      	b.n	8004d62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f95b 	bl	8005018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d62:	2110      	movs	r1, #16
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8f3 	bl	8004f50 <USB_FlushTxFifo>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f91f 	bl	8004fb8 <USB_FlushRxFifo>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	461a      	mov	r2, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	e043      	b.n	8004e36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc4:	d118      	bne.n	8004df8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e013      	b.n	8004e0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	461a      	mov	r2, r3
 8004df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e008      	b.n	8004e0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	461a      	mov	r2, r3
 8004e06:	2300      	movs	r3, #0
 8004e08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	461a      	mov	r2, r3
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3301      	adds	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d3b7      	bcc.n	8004dae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e043      	b.n	8004ecc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e5a:	d118      	bne.n	8004e8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e013      	b.n	8004ea0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e008      	b.n	8004ea0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3b7      	bcc.n	8004e44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ef4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <USB_DevInit+0x2c4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	803c3800 	.word	0x803c3800

08004f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <USB_FlushTxFifo+0x64>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e01b      	b.n	8004fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	daf2      	bge.n	8004f5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	019b      	lsls	r3, r3, #6
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <USB_FlushTxFifo+0x64>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e006      	b.n	8004fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d0f0      	beq.n	8004f88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	00030d40 	.word	0x00030d40

08004fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a11      	ldr	r2, [pc, #68]	; (8005014 <USB_FlushRxFifo+0x5c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e018      	b.n	8005008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <USB_FlushRxFifo+0x5c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e006      	b.n	8005008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b10      	cmp	r3, #16
 8005004:	d0f0      	beq.n	8004fe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	00030d40 	.word	0x00030d40

08005018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0306 	and.w	r3, r3, #6
 8005062:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
 800506e:	e00a      	b.n	8005086 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d002      	beq.n	800507c <USB_GetDevSpeed+0x32>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d102      	bne.n	8005082 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800507c:	2302      	movs	r3, #2
 800507e:	75fb      	strb	r3, [r7, #23]
 8005080:	e001      	b.n	8005086 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005082:	230f      	movs	r3, #15
 8005084:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d13a      	bne.n	8005126 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	2101      	movs	r1, #1
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d155      	bne.n	8005194 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005104:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	059b      	lsls	r3, r3, #22
 800510a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800510c:	4313      	orrs	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e036      	b.n	8005194 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	2101      	movs	r1, #1
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005144:	4313      	orrs	r3, r2
 8005146:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11a      	bne.n	8005194 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800517a:	430b      	orrs	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d161      	bne.n	8005284 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d6:	d11f      	bne.n	8005218 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	2101      	movs	r1, #1
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	b29b      	uxth	r3, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005238:	4013      	ands	r3, r2
 800523a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	b29b      	uxth	r3, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	68f9      	ldr	r1, [r7, #12]
 8005258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525c:	4013      	ands	r3, r2
 800525e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	0159      	lsls	r1, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	440b      	add	r3, r1
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	4619      	mov	r1, r3
 800527c:	4b35      	ldr	r3, [pc, #212]	; (8005354 <USB_DeactivateEndpoint+0x1b0>)
 800527e:	4013      	ands	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
 8005282:	e060      	b.n	8005346 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529a:	d11f      	bne.n	80052dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	43db      	mvns	r3, r3
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fc:	4013      	ands	r3, r2
 80052fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2101      	movs	r1, #1
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	43db      	mvns	r3, r3
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005320:	4013      	ands	r3, r2
 8005322:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	0159      	lsls	r1, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	440b      	add	r3, r1
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	4619      	mov	r1, r3
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <USB_DeactivateEndpoint+0x1b4>)
 8005342:	4013      	ands	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	ec337800 	.word	0xec337800
 8005358:	eff37800 	.word	0xeff37800

0800535c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	f040 815c 	bne.w	8005636 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d132      	bne.n	80053ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e4:	0cdb      	lsrs	r3, r3, #19
 80053e6:	04db      	lsls	r3, r3, #19
 80053e8:	6113      	str	r3, [r2, #16]
 80053ea:	e074      	b.n	80054d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005406:	0cdb      	lsrs	r3, r3, #19
 8005408:	04db      	lsls	r3, r3, #19
 800540a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005426:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800542e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	440b      	add	r3, r1
 8005448:	1e59      	subs	r1, r3, #1
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005452:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005454:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <USB_EPStartXfer+0x370>)
 8005456:	400b      	ands	r3, r1
 8005458:	69b9      	ldr	r1, [r7, #24]
 800545a:	0148      	lsls	r0, r1, #5
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	4401      	add	r1, r0
 8005460:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005464:	4313      	orrs	r3, r2
 8005466:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	0148      	lsls	r0, r1, #5
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	4401      	add	r1, r0
 8005486:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	791b      	ldrb	r3, [r3, #4]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d11f      	bne.n	80054d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d14b      	bne.n	8005574 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d128      	bne.n	8005552 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d110      	bne.n	8005532 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e00f      	b.n	8005552 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e133      	b.n	80057dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005592:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d015      	beq.n	80055c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 811b 	beq.w	80057dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	2101      	movs	r1, #1
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c2:	4313      	orrs	r3, r2
 80055c4:	634b      	str	r3, [r1, #52]	; 0x34
 80055c6:	e109      	b.n	80057dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e00f      	b.n	800561a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6919      	ldr	r1, [r3, #16]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	b298      	uxth	r0, r3
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fade 	bl	8005bf0 <USB_WritePacket>
 8005634:	e0d2      	b.n	80057dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	0cdb      	lsrs	r3, r3, #19
 8005652:	04db      	lsls	r3, r3, #19
 8005654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d126      	bne.n	80056d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	0148      	lsls	r0, r1, #5
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	4401      	add	r1, r0
 80056a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c6:	6113      	str	r3, [r2, #16]
 80056c8:	e03a      	b.n	8005740 <USB_EPStartXfer+0x3e4>
 80056ca:	bf00      	nop
 80056cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	8afa      	ldrh	r2, [r7, #22]
 80056ec:	fb03 f202 	mul.w	r2, r3, r2
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	04d9      	lsls	r1, r3, #19
 8005706:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <USB_EPStartXfer+0x48c>)
 8005708:	400b      	ands	r3, r1
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	0148      	lsls	r0, r1, #5
 800570e:	69f9      	ldr	r1, [r7, #28]
 8005710:	4401      	add	r1, r0
 8005712:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10d      	bne.n	8005762 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	460a      	mov	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	791b      	ldrb	r3, [r3, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e00f      	b.n	80057bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	1ff80000 	.word	0x1ff80000

080057ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 80ce 	bne.w	80059aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d132      	bne.n	800587c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	0cdb      	lsrs	r3, r3, #19
 8005876:	04db      	lsls	r3, r3, #19
 8005878:	6113      	str	r3, [r2, #16]
 800587a:	e04e      	b.n	800591a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005896:	0cdb      	lsrs	r3, r3, #19
 8005898:	04db      	lsls	r3, r3, #19
 800589a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d903      	bls.n	80058d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590a:	6939      	ldr	r1, [r7, #16]
 800590c:	0148      	lsls	r0, r1, #5
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	4401      	add	r1, r0
 8005912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d11e      	bne.n	800595e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e097      	b.n	8005a8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800597c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8083 	beq.w	8005a8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	2101      	movs	r1, #1
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	6979      	ldr	r1, [r7, #20]
 80059a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a4:	4313      	orrs	r3, r2
 80059a6:	634b      	str	r3, [r1, #52]	; 0x34
 80059a8:	e071      	b.n	8005a8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c4:	0cdb      	lsrs	r3, r3, #19
 80059c6:	04db      	lsls	r3, r3, #19
 80059c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3c:	6939      	ldr	r1, [r7, #16]
 8005a3e:	0148      	lsls	r0, r1, #5
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	4401      	add	r1, r0
 8005a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10d      	bne.n	8005a6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6919      	ldr	r1, [r3, #16]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d14a      	bne.n	8005b50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad2:	f040 8086 	bne.w	8005be2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005af8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d902      	bls.n	8005b34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
          break;
 8005b32:	e056      	b.n	8005be2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4c:	d0e7      	beq.n	8005b1e <USB_EPStopXfer+0x82>
 8005b4e:	e048      	b.n	8005be2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b68:	d13b      	bne.n	8005be2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d902      	bls.n	8005bc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc6:	e00c      	b.n	8005be2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be0:	d0e7      	beq.n	8005bb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	; 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	460b      	mov	r3, r1
 8005c00:	71fb      	strb	r3, [r7, #7]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d123      	bne.n	8005c5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c16:	88bb      	ldrh	r3, [r7, #4]
 8005c18:	3303      	adds	r3, #3
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e018      	b.n	8005c56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	031a      	lsls	r2, r3, #12
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c30:	461a      	mov	r2, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3e2      	bcc.n	8005c24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3724      	adds	r7, #36	; 0x24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b08b      	sub	sp, #44	; 0x2c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	e014      	b.n	8005cc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d3e6      	bcc.n	8005c98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cca:	8bfb      	ldrh	r3, [r7, #30]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01e      	beq.n	8005d0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f107 0310 	add.w	r3, r7, #16
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	701a      	strb	r2, [r3, #0]
      i++;
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d02:	8bfb      	ldrh	r3, [r7, #30]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d08:	8bfb      	ldrh	r3, [r7, #30]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1ea      	bne.n	8005ce4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	372c      	adds	r7, #44	; 0x2c
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d12c      	bne.n	8005d92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	db12      	blt.n	8005d70 <USB_EPSetStall+0x54>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e02b      	b.n	8005dea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	db12      	blt.n	8005dca <USB_EPSetStall+0xae>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00f      	beq.n	8005dca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005de8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d128      	bne.n	8005e66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d003      	beq.n	8005e44 <USB_EPClearStall+0x4c>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d138      	bne.n	8005eb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e027      	b.n	8005eb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	791b      	ldrb	r3, [r3, #4]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d003      	beq.n	8005e96 <USB_EPClearStall+0x9e>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d10f      	bne.n	8005eb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ee6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3e:	f023 0302 	bic.w	r3, r3, #2
 8005f42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f6c:	f023 0303 	bic.w	r3, r3, #3
 8005f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f80:	f043 0302 	orr.w	r3, r3, #2
 8005f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	b29b      	uxth	r3, r3
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006050:	68bb      	ldr	r3, [r7, #8]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	fa22 f303 	lsr.w	r3, r2, r3
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	b2db      	uxtb	r3, r3
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060ac:	68bb      	ldr	r3, [r7, #8]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0301 	and.w	r3, r3, #1
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060f4:	f023 0307 	bic.w	r3, r3, #7
 80060f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	460b      	mov	r3, r1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	333c      	adds	r3, #60	; 0x3c
 8006132:	3304      	adds	r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <USB_EP0_OutStart+0xb8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d90a      	bls.n	8006156 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006150:	d101      	bne.n	8006156 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e037      	b.n	80061c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	461a      	mov	r2, r3
 800615e:	2300      	movs	r3, #0
 8006160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f043 0318 	orr.w	r3, r3, #24
 8006188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800619c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10f      	bne.n	80061c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	4f54300a 	.word	0x4f54300a

080061d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <USB_CoreReset+0x64>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e01b      	b.n	800622e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	daf2      	bge.n	80061e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f043 0201 	orr.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <USB_CoreReset+0x64>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d0f0      	beq.n	800620e <USB_CoreReset+0x36>

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	00030d40 	.word	0x00030d40

08006240 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800624c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006250:	f002 ff74 	bl	800913c <USBD_static_malloc>
 8006254:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32b0      	adds	r2, #176	; 0xb0
 8006266:	2100      	movs	r1, #0
 8006268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800626c:	2302      	movs	r3, #2
 800626e:	e0d4      	b.n	800641a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006270:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006274:	2100      	movs	r1, #0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f002 ffce 	bl	8009218 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32b0      	adds	r2, #176	; 0xb0
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32b0      	adds	r2, #176	; 0xb0
 8006296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7c1b      	ldrb	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d138      	bne.n	800631a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062a8:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <USBD_CDC_Init+0x1e4>)
 80062aa:	7819      	ldrb	r1, [r3, #0]
 80062ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b0:	2202      	movs	r2, #2
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 fe1f 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062b8:	4b5a      	ldr	r3, [pc, #360]	; (8006424 <USBD_CDC_Init+0x1e4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	2201      	movs	r2, #1
 80062d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062d2:	4b55      	ldr	r3, [pc, #340]	; (8006428 <USBD_CDC_Init+0x1e8>)
 80062d4:	7819      	ldrb	r1, [r3, #0]
 80062d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062da:	2202      	movs	r2, #2
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f002 fe0a 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062e2:	4b51      	ldr	r3, [pc, #324]	; (8006428 <USBD_CDC_Init+0x1e8>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062fa:	2201      	movs	r2, #1
 80062fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062fe:	4b4b      	ldr	r3, [pc, #300]	; (800642c <USBD_CDC_Init+0x1ec>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	3326      	adds	r3, #38	; 0x26
 8006314:	2210      	movs	r2, #16
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e035      	b.n	8006386 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800631a:	4b42      	ldr	r3, [pc, #264]	; (8006424 <USBD_CDC_Init+0x1e4>)
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	2202      	movs	r2, #2
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f002 fde7 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006328:	4b3e      	ldr	r3, [pc, #248]	; (8006424 <USBD_CDC_Init+0x1e4>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	3324      	adds	r3, #36	; 0x24
 800633e:	2201      	movs	r2, #1
 8006340:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <USBD_CDC_Init+0x1e8>)
 8006344:	7819      	ldrb	r1, [r3, #0]
 8006346:	2340      	movs	r3, #64	; 0x40
 8006348:	2202      	movs	r2, #2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 fdd3 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006350:	4b35      	ldr	r3, [pc, #212]	; (8006428 <USBD_CDC_Init+0x1e8>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006368:	2201      	movs	r2, #1
 800636a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800636c:	4b2f      	ldr	r3, [pc, #188]	; (800642c <USBD_CDC_Init+0x1ec>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3326      	adds	r3, #38	; 0x26
 8006382:	2210      	movs	r2, #16
 8006384:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <USBD_CDC_Init+0x1ec>)
 8006388:	7819      	ldrb	r1, [r3, #0]
 800638a:	2308      	movs	r3, #8
 800638c:	2203      	movs	r2, #3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f002 fdb1 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <USBD_CDC_Init+0x1ec>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	2201      	movs	r2, #1
 80063ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	33b0      	adds	r3, #176	; 0xb0
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e018      	b.n	800641a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	7c1b      	ldrb	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063f0:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <USBD_CDC_Init+0x1e8>)
 80063f2:	7819      	ldrb	r1, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 fe68 	bl	80090d4 <USBD_LL_PrepareReceive>
 8006404:	e008      	b.n	8006418 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006406:	4b08      	ldr	r3, [pc, #32]	; (8006428 <USBD_CDC_Init+0x1e8>)
 8006408:	7819      	ldrb	r1, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f002 fe5e 	bl	80090d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	200000f7 	.word	0x200000f7
 8006428:	200000f8 	.word	0x200000f8
 800642c:	200000f9 	.word	0x200000f9

08006430 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800643c:	4b3a      	ldr	r3, [pc, #232]	; (8006528 <USBD_CDC_DeInit+0xf8>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f002 fd7d 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006448:	4b37      	ldr	r3, [pc, #220]	; (8006528 <USBD_CDC_DeInit+0xf8>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	3324      	adds	r3, #36	; 0x24
 800645e:	2200      	movs	r2, #0
 8006460:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006462:	4b32      	ldr	r3, [pc, #200]	; (800652c <USBD_CDC_DeInit+0xfc>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 fd6a 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800646e:	4b2f      	ldr	r3, [pc, #188]	; (800652c <USBD_CDC_DeInit+0xfc>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006486:	2200      	movs	r2, #0
 8006488:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <USBD_CDC_DeInit+0x100>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 fd56 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006496:	4b26      	ldr	r3, [pc, #152]	; (8006530 <USBD_CDC_DeInit+0x100>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f003 020f 	and.w	r2, r3, #15
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2200      	movs	r2, #0
 80064ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <USBD_CDC_DeInit+0x100>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 020f 	and.w	r2, r3, #15
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	3326      	adds	r3, #38	; 0x26
 80064c6:	2200      	movs	r2, #0
 80064c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	32b0      	adds	r2, #176	; 0xb0
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01f      	beq.n	800651c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	33b0      	adds	r3, #176	; 0xb0
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32b0      	adds	r2, #176	; 0xb0
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 fe2a 	bl	8009158 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32b0      	adds	r2, #176	; 0xb0
 800650e:	2100      	movs	r1, #0
 8006510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200000f7 	.word	0x200000f7
 800652c:	200000f8 	.word	0x200000f8
 8006530:	200000f9 	.word	0x200000f9

08006534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32b0      	adds	r2, #176	; 0xb0
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	e0bf      	b.n	80066e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800656c:	2b00      	cmp	r3, #0
 800656e:	d050      	beq.n	8006612 <USBD_CDC_Setup+0xde>
 8006570:	2b20      	cmp	r3, #32
 8006572:	f040 80af 	bne.w	80066d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d03a      	beq.n	80065f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b25b      	sxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	da1b      	bge.n	80065c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	33b0      	adds	r3, #176	; 0xb0
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800659e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	88d2      	ldrh	r2, [r2, #6]
 80065a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	2b07      	cmp	r3, #7
 80065ac:	bf28      	it	cs
 80065ae:	2307      	movcs	r3, #7
 80065b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	89fa      	ldrh	r2, [r7, #14]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fd89 	bl	80080d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80065be:	e090      	b.n	80066e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785a      	ldrb	r2, [r3, #1]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	88db      	ldrh	r3, [r3, #6]
 80065ce:	2b3f      	cmp	r3, #63	; 0x3f
 80065d0:	d803      	bhi.n	80065da <USBD_CDC_Setup+0xa6>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	e000      	b.n	80065dc <USBD_CDC_Setup+0xa8>
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065e2:	6939      	ldr	r1, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80065ea:	461a      	mov	r2, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fd9b 	bl	8008128 <USBD_CtlPrepareRx>
      break;
 80065f2:	e076      	b.n	80066e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	33b0      	adds	r3, #176	; 0xb0
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	7850      	ldrb	r0, [r2, #1]
 800660a:	2200      	movs	r2, #0
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4798      	blx	r3
      break;
 8006610:	e067      	b.n	80066e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b0b      	cmp	r3, #11
 8006618:	d851      	bhi.n	80066be <USBD_CDC_Setup+0x18a>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <USBD_CDC_Setup+0xec>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006651 	.word	0x08006651
 8006624:	080066cd 	.word	0x080066cd
 8006628:	080066bf 	.word	0x080066bf
 800662c:	080066bf 	.word	0x080066bf
 8006630:	080066bf 	.word	0x080066bf
 8006634:	080066bf 	.word	0x080066bf
 8006638:	080066bf 	.word	0x080066bf
 800663c:	080066bf 	.word	0x080066bf
 8006640:	080066bf 	.word	0x080066bf
 8006644:	080066bf 	.word	0x080066bf
 8006648:	0800667b 	.word	0x0800667b
 800664c:	080066a5 	.word	0x080066a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d107      	bne.n	800666c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800665c:	f107 030a 	add.w	r3, r7, #10
 8006660:	2202      	movs	r2, #2
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fd33 	bl	80080d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800666a:	e032      	b.n	80066d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fcbd 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	75fb      	strb	r3, [r7, #23]
          break;
 8006678:	e02b      	b.n	80066d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d107      	bne.n	8006696 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006686:	f107 030d 	add.w	r3, r7, #13
 800668a:	2201      	movs	r2, #1
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fd1e 	bl	80080d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006694:	e01d      	b.n	80066d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fca8 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 800669e:	2303      	movs	r3, #3
 80066a0:	75fb      	strb	r3, [r7, #23]
          break;
 80066a2:	e016      	b.n	80066d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d00f      	beq.n	80066d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fc9b 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066bc:	e008      	b.n	80066d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 fc94 	bl	8007fee <USBD_CtlError>
          ret = USBD_FAIL;
 80066c6:	2303      	movs	r3, #3
 80066c8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ca:	e002      	b.n	80066d2 <USBD_CDC_Setup+0x19e>
          break;
 80066cc:	bf00      	nop
 80066ce:	e008      	b.n	80066e2 <USBD_CDC_Setup+0x1ae>
          break;
 80066d0:	bf00      	nop
      }
      break;
 80066d2:	e006      	b.n	80066e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fc89 	bl	8007fee <USBD_CtlError>
      ret = USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32b0      	adds	r2, #176	; 0xb0
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006712:	2303      	movs	r3, #3
 8006714:	e065      	b.n	80067e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	32b0      	adds	r2, #176	; 0xb0
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3318      	adds	r3, #24
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02f      	beq.n	80067a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	f003 020f 	and.w	r2, r3, #15
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	3318      	adds	r3, #24
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	f003 010f 	and.w	r1, r3, #15
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	460b      	mov	r3, r1
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	440b      	add	r3, r1
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4403      	add	r3, r0
 8006768:	3348      	adds	r3, #72	; 0x48
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006776:	2b00      	cmp	r3, #0
 8006778:	d112      	bne.n	80067a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3318      	adds	r3, #24
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006792:	78f9      	ldrb	r1, [r7, #3]
 8006794:	2300      	movs	r3, #0
 8006796:	2200      	movs	r2, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 fc7a 	bl	8009092 <USBD_LL_Transmit>
 800679e:	e01f      	b.n	80067e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	33b0      	adds	r3, #176	; 0xb0
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d010      	beq.n	80067e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	33b0      	adds	r3, #176	; 0xb0
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	32b0      	adds	r2, #176	; 0xb0
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32b0      	adds	r2, #176	; 0xb0
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e01a      	b.n	8006852 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fc78 	bl	8009116 <USBD_LL_GetRxDataSize>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	33b0      	adds	r3, #176	; 0xb0
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800684c:	4611      	mov	r1, r2
 800684e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	32b0      	adds	r2, #176	; 0xb0
 800686c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006870:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006878:	2303      	movs	r3, #3
 800687a:	e025      	b.n	80068c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	33b0      	adds	r3, #176	; 0xb0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <USBD_CDC_EP0_RxReady+0x6c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	d015      	beq.n	80068c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	33b0      	adds	r3, #176	; 0xb0
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068ba:	b292      	uxth	r2, r2
 80068bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068d8:	2182      	movs	r1, #130	; 0x82
 80068da:	4818      	ldr	r0, [pc, #96]	; (800693c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068dc:	f000 fd4f 	bl	800737e <USBD_GetEpDesc>
 80068e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068e2:	2101      	movs	r1, #1
 80068e4:	4815      	ldr	r0, [pc, #84]	; (800693c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068e6:	f000 fd4a 	bl	800737e <USBD_GetEpDesc>
 80068ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068ec:	2181      	movs	r1, #129	; 0x81
 80068ee:	4813      	ldr	r0, [pc, #76]	; (800693c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068f0:	f000 fd45 	bl	800737e <USBD_GetEpDesc>
 80068f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2210      	movs	r2, #16
 8006900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d006      	beq.n	8006916 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2200      	movs	r2, #0
 800690c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006910:	711a      	strb	r2, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006924:	711a      	strb	r2, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2243      	movs	r2, #67	; 0x43
 800692e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006930:	4b02      	ldr	r3, [pc, #8]	; (800693c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200000b4 	.word	0x200000b4

08006940 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006948:	2182      	movs	r1, #130	; 0x82
 800694a:	4818      	ldr	r0, [pc, #96]	; (80069ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800694c:	f000 fd17 	bl	800737e <USBD_GetEpDesc>
 8006950:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006952:	2101      	movs	r1, #1
 8006954:	4815      	ldr	r0, [pc, #84]	; (80069ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006956:	f000 fd12 	bl	800737e <USBD_GetEpDesc>
 800695a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800695c:	2181      	movs	r1, #129	; 0x81
 800695e:	4813      	ldr	r0, [pc, #76]	; (80069ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006960:	f000 fd0d 	bl	800737e <USBD_GetEpDesc>
 8006964:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2210      	movs	r2, #16
 8006970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2200      	movs	r2, #0
 800697c:	711a      	strb	r2, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f042 0202 	orr.w	r2, r2, #2
 8006984:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	711a      	strb	r2, [r3, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f042 0202 	orr.w	r2, r2, #2
 8006998:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2243      	movs	r2, #67	; 0x43
 800699e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200000b4 	.word	0x200000b4

080069b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069b8:	2182      	movs	r1, #130	; 0x82
 80069ba:	4818      	ldr	r0, [pc, #96]	; (8006a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069bc:	f000 fcdf 	bl	800737e <USBD_GetEpDesc>
 80069c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069c2:	2101      	movs	r1, #1
 80069c4:	4815      	ldr	r0, [pc, #84]	; (8006a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069c6:	f000 fcda 	bl	800737e <USBD_GetEpDesc>
 80069ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069cc:	2181      	movs	r1, #129	; 0x81
 80069ce:	4813      	ldr	r0, [pc, #76]	; (8006a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069d0:	f000 fcd5 	bl	800737e <USBD_GetEpDesc>
 80069d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2210      	movs	r2, #16
 80069e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f0:	711a      	strb	r2, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2243      	movs	r2, #67	; 0x43
 8006a0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a10:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200000b4 	.word	0x200000b4

08006a20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a2e:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20000070 	.word	0x20000070

08006a40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e009      	b.n	8006a68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	33b0      	adds	r3, #176	; 0xb0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e008      	b.n	8006aac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	32b0      	adds	r2, #176	; 0xb0
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e004      	b.n	8006ae6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	32b0      	adds	r2, #176	; 0xb0
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	32b0      	adds	r2, #176	; 0xb0
 8006b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e025      	b.n	8006b72 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11f      	bne.n	8006b70 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <USBD_CDC_TransmitPacket+0x88>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4403      	add	r3, r0
 8006b52:	3318      	adds	r3, #24
 8006b54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <USBD_CDC_TransmitPacket+0x88>)
 8006b58:	7819      	ldrb	r1, [r3, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 fa93 	bl	8009092 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200000f7 	.word	0x200000f7

08006b80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32b0      	adds	r2, #176	; 0xb0
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32b0      	adds	r2, #176	; 0xb0
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e018      	b.n	8006be0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <USBD_CDC_ReceivePacket+0x68>)
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 fa85 	bl	80090d4 <USBD_LL_PrepareReceive>
 8006bca:	e008      	b.n	8006bde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <USBD_CDC_ReceivePacket+0x68>)
 8006bce:	7819      	ldrb	r1, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f002 fa7b 	bl	80090d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	200000f8 	.word	0x200000f8

08006bec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e01f      	b.n	8006c44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	79fa      	ldrb	r2, [r7, #7]
 8006c36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f002 f8f5 	bl	8008e28 <USBD_LL_Init>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e025      	b.n	8006cb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	32ae      	adds	r2, #174	; 0xae
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00f      	beq.n	8006ca0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32ae      	adds	r2, #174	; 0xae
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f107 020e 	add.w	r2, r7, #14
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	4602      	mov	r2, r0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f002 f8fd 	bl	8008ec0 <USBD_LL_Start>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f908 	bl	8007f7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d01a      	beq.n	8006dc4 <USBD_LL_SetupStage+0x72>
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d822      	bhi.n	8006dd8 <USBD_LL_SetupStage+0x86>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <USBD_LL_SetupStage+0x4a>
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d00a      	beq.n	8006db0 <USBD_LL_SetupStage+0x5e>
 8006d9a:	e01d      	b.n	8006dd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fb5f 	bl	8007468 <USBD_StdDevReq>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
      break;
 8006dae:	e020      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fbc7 	bl	800754c <USBD_StdItfReq>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc2:	e016      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc29 	bl	8007624 <USBD_StdEPReq>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd6:	e00c      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f002 f8ca 	bl	8008f80 <USBD_LL_StallEP>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
      break;
 8006df0:	bf00      	nop
  }

  return ret;
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	460b      	mov	r3, r1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d16e      	bne.n	8006ef2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	f040 8098 	bne.w	8006f58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d913      	bls.n	8006e5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	1ad2      	subs	r2, r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bf28      	it	cs
 8006e4e:	4613      	movcs	r3, r2
 8006e50:	461a      	mov	r2, r3
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f001 f984 	bl	8008162 <USBD_CtlContinueRx>
 8006e5a:	e07d      	b.n	8006f58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d014      	beq.n	8006e94 <USBD_LL_DataOutStage+0x98>
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d81d      	bhi.n	8006eaa <USBD_LL_DataOutStage+0xae>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <USBD_LL_DataOutStage+0x7c>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d003      	beq.n	8006e7e <USBD_LL_DataOutStage+0x82>
 8006e76:	e018      	b.n	8006eaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e7c:	e018      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fa5e 	bl	800734a <USBD_CoreFindIF>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75bb      	strb	r3, [r7, #22]
            break;
 8006e92:	e00d      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fa60 	bl	8007364 <USBD_CoreFindEP>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ea8:	e002      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75bb      	strb	r3, [r7, #22]
            break;
 8006eae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006eb0:	7dbb      	ldrb	r3, [r7, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d119      	bne.n	8006eea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d113      	bne.n	8006eea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ec2:	7dba      	ldrb	r2, [r7, #22]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	32ae      	adds	r2, #174	; 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ed2:	7dba      	ldrb	r2, [r7, #22]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	32ae      	adds	r2, #174	; 0xae
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 f94a 	bl	8008184 <USBD_CtlSendStatus>
 8006ef0:	e032      	b.n	8006f58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fa31 	bl	8007364 <USBD_CoreFindEP>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f06:	7dbb      	ldrb	r3, [r7, #22]
 8006f08:	2bff      	cmp	r3, #255	; 0xff
 8006f0a:	d025      	beq.n	8006f58 <USBD_LL_DataOutStage+0x15c>
 8006f0c:	7dbb      	ldrb	r3, [r7, #22]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d122      	bne.n	8006f58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d117      	bne.n	8006f4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f1e:	7dba      	ldrb	r2, [r7, #22]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	32ae      	adds	r2, #174	; 0xae
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00f      	beq.n	8006f4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f2e:	7dba      	ldrb	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f36:	7dba      	ldrb	r2, [r7, #22]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	32ae      	adds	r2, #174	; 0xae
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	7afa      	ldrb	r2, [r7, #11]
 8006f44:	4611      	mov	r1, r2
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	e000      	b.n	8006f5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d16f      	bne.n	8007056 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d15a      	bne.n	800703c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d914      	bls.n	8006fbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 f8ac 	bl	8008106 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f002 f88d 	bl	80090d4 <USBD_LL_PrepareReceive>
 8006fba:	e03f      	b.n	800703c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d11c      	bne.n	8007002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d316      	bcc.n	8007002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d20f      	bcs.n	8007002 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f001 f88d 	bl	8008106 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f002 f86a 	bl	80090d4 <USBD_LL_PrepareReceive>
 8007000:	e01c      	b.n	800703c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b03      	cmp	r3, #3
 800700c:	d10f      	bne.n	800702e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800702e:	2180      	movs	r1, #128	; 0x80
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f001 ffa5 	bl	8008f80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f001 f8b7 	bl	80081aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03a      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fe42 	bl	8006cd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007054:	e032      	b.n	80070bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f97f 	bl	8007364 <USBD_CoreFindEP>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2bff      	cmp	r3, #255	; 0xff
 800706e:	d025      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d122      	bne.n	80070bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d11c      	bne.n	80070bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007082:	7dfa      	ldrb	r2, [r7, #23]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	32ae      	adds	r2, #174	; 0xae
 8007088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d014      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007092:	7dfa      	ldrb	r2, [r7, #23]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800709a:	7dfa      	ldrb	r2, [r7, #23]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	32ae      	adds	r2, #174	; 0xae
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	7afa      	ldrb	r2, [r7, #11]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070b2:	7dbb      	ldrb	r3, [r7, #22]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	e000      	b.n	80070be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d014      	beq.n	800712c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	4611      	mov	r1, r2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fedf 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2240      	movs	r2, #64	; 0x40
 8007144:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fed1 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2240      	movs	r2, #64	; 0x40
 800715e:	621a      	str	r2, [r3, #32]

  return ret;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2204      	movs	r2, #4
 80071a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d106      	bne.n	80071d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d110      	bne.n	800721c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	32ae      	adds	r2, #174	; 0xae
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	e01c      	b.n	8007282 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d115      	bne.n	8007280 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32ae      	adds	r2, #174	; 0xae
 800725e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32ae      	adds	r2, #174	; 0xae
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	4611      	mov	r1, r2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	32ae      	adds	r2, #174	; 0xae
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e01c      	b.n	80072e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d115      	bne.n	80072e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	32ae      	adds	r2, #174	; 0xae
 80072c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32ae      	adds	r2, #174	; 0xae
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	4611      	mov	r1, r2
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6852      	ldr	r2, [r2, #4]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	4611      	mov	r1, r2
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007356:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007370:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	885b      	ldrh	r3, [r3, #2]
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d920      	bls.n	80073e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073ae:	e013      	b.n	80073d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073b0:	f107 030a 	add.w	r3, r7, #10
 80073b4:	4619      	mov	r1, r3
 80073b6:	6978      	ldr	r0, [r7, #20]
 80073b8:	f000 f81b 	bl	80073f2 <USBD_GetNextDesc>
 80073bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d108      	bne.n	80073d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	789b      	ldrb	r3, [r3, #2]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d008      	beq.n	80073e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	897b      	ldrh	r3, [r7, #10]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d8e5      	bhi.n	80073b0 <USBD_GetEpDesc+0x32>
 80073e4:	e000      	b.n	80073e8 <USBD_GetEpDesc+0x6a>
          break;
 80073e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073e8:	693b      	ldr	r3, [r7, #16]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	881a      	ldrh	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b29b      	uxth	r3, r3
 800740a:	4413      	add	r3, r2
 800740c:	b29a      	uxth	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4413      	add	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800741e:	68fb      	ldr	r3, [r7, #12]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	3301      	adds	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800744a:	8a3b      	ldrh	r3, [r7, #16]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	b21a      	sxth	r2, r3
 8007450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007454:	4313      	orrs	r3, r2
 8007456:	b21b      	sxth	r3, r3
 8007458:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800745a:	89fb      	ldrh	r3, [r7, #14]
}
 800745c:	4618      	mov	r0, r3
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d005      	beq.n	800748e <USBD_StdDevReq+0x26>
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d857      	bhi.n	8007536 <USBD_StdDevReq+0xce>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00f      	beq.n	80074aa <USBD_StdDevReq+0x42>
 800748a:	2b20      	cmp	r3, #32
 800748c:	d153      	bne.n	8007536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32ae      	adds	r2, #174	; 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
      break;
 80074a8:	e04a      	b.n	8007540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d83b      	bhi.n	800752a <USBD_StdDevReq+0xc2>
 80074b2:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <USBD_StdDevReq+0x50>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	0800750d 	.word	0x0800750d
 80074bc:	08007521 	.word	0x08007521
 80074c0:	0800752b 	.word	0x0800752b
 80074c4:	08007517 	.word	0x08007517
 80074c8:	0800752b 	.word	0x0800752b
 80074cc:	080074eb 	.word	0x080074eb
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	0800752b 	.word	0x0800752b
 80074d8:	08007503 	.word	0x08007503
 80074dc:	080074f5 	.word	0x080074f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa3c 	bl	8007960 <USBD_GetDescriptor>
          break;
 80074e8:	e024      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fba1 	bl	8007c34 <USBD_SetAddress>
          break;
 80074f2:	e01f      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fbe0 	bl	8007cbc <USBD_SetConfig>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007500:	e018      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc83 	bl	8007e10 <USBD_GetConfig>
          break;
 800750a:	e013      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fcb4 	bl	8007e7c <USBD_GetStatus>
          break;
 8007514:	e00e      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fce3 	bl	8007ee4 <USBD_SetFeature>
          break;
 800751e:	e009      	b.n	8007534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd07 	bl	8007f36 <USBD_ClrFeature>
          break;
 8007528:	e004      	b.n	8007534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fd5e 	bl	8007fee <USBD_CtlError>
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fd58 	bl	8007fee <USBD_CtlError>
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop

0800754c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d005      	beq.n	8007572 <USBD_StdItfReq+0x26>
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d852      	bhi.n	8007610 <USBD_StdItfReq+0xc4>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <USBD_StdItfReq+0x26>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d14e      	bne.n	8007610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	2b02      	cmp	r3, #2
 800757e:	d840      	bhi.n	8007602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	889b      	ldrh	r3, [r3, #4]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d836      	bhi.n	80075f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fed9 	bl	800734a <USBD_CoreFindIF>
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2bff      	cmp	r3, #255	; 0xff
 80075a0:	d01d      	beq.n	80075de <USBD_StdItfReq+0x92>
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11a      	bne.n	80075de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075a8:	7bba      	ldrb	r2, [r7, #14]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	; 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00f      	beq.n	80075d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075b8:	7bba      	ldrb	r2, [r7, #14]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075c0:	7bba      	ldrb	r2, [r7, #14]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	; 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075d6:	e004      	b.n	80075e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075dc:	e001      	b.n	80075e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075de:	2303      	movs	r3, #3
 80075e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	88db      	ldrh	r3, [r3, #6]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d110      	bne.n	800760c <USBD_StdItfReq+0xc0>
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10d      	bne.n	800760c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdc7 	bl	8008184 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075f6:	e009      	b.n	800760c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fcf7 	bl	8007fee <USBD_CtlError>
          break;
 8007600:	e004      	b.n	800760c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fcf2 	bl	8007fee <USBD_CtlError>
          break;
 800760a:	e000      	b.n	800760e <USBD_StdItfReq+0xc2>
          break;
 800760c:	bf00      	nop
      }
      break;
 800760e:	e004      	b.n	800761a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fceb 	bl	8007fee <USBD_CtlError>
      break;
 8007618:	bf00      	nop
  }

  return ret;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	889b      	ldrh	r3, [r3, #4]
 8007636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d007      	beq.n	8007654 <USBD_StdEPReq+0x30>
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	f200 817f 	bhi.w	8007948 <USBD_StdEPReq+0x324>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d02a      	beq.n	80076a4 <USBD_StdEPReq+0x80>
 800764e:	2b20      	cmp	r3, #32
 8007650:	f040 817a 	bne.w	8007948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fe83 	bl	8007364 <USBD_CoreFindEP>
 800765e:	4603      	mov	r3, r0
 8007660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007662:	7b7b      	ldrb	r3, [r7, #13]
 8007664:	2bff      	cmp	r3, #255	; 0xff
 8007666:	f000 8174 	beq.w	8007952 <USBD_StdEPReq+0x32e>
 800766a:	7b7b      	ldrb	r3, [r7, #13]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8170 	bne.w	8007952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007672:	7b7a      	ldrb	r2, [r7, #13]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800767a:	7b7a      	ldrb	r2, [r7, #13]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	32ae      	adds	r2, #174	; 0xae
 8007680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8163 	beq.w	8007952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800768c:	7b7a      	ldrb	r2, [r7, #13]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32ae      	adds	r2, #174	; 0xae
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076a2:	e156      	b.n	8007952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d008      	beq.n	80076be <USBD_StdEPReq+0x9a>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	f300 8145 	bgt.w	800793c <USBD_StdEPReq+0x318>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 809b 	beq.w	80077ee <USBD_StdEPReq+0x1ca>
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d03c      	beq.n	8007736 <USBD_StdEPReq+0x112>
 80076bc:	e13e      	b.n	800793c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d002      	beq.n	80076d0 <USBD_StdEPReq+0xac>
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d016      	beq.n	80076fc <USBD_StdEPReq+0xd8>
 80076ce:	e02c      	b.n	800772a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00d      	beq.n	80076f2 <USBD_StdEPReq+0xce>
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d00a      	beq.n	80076f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fc4d 	bl	8008f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fc49 	bl	8008f80 <USBD_LL_StallEP>
 80076ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076f0:	e020      	b.n	8007734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc7a 	bl	8007fee <USBD_CtlError>
              break;
 80076fa:	e01b      	b.n	8007734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10e      	bne.n	8007722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <USBD_StdEPReq+0xfe>
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d008      	beq.n	8007722 <USBD_StdEPReq+0xfe>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	88db      	ldrh	r3, [r3, #6]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fc2f 	bl	8008f80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fd2e 	bl	8008184 <USBD_CtlSendStatus>

              break;
 8007728:	e004      	b.n	8007734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc5e 	bl	8007fee <USBD_CtlError>
              break;
 8007732:	bf00      	nop
          }
          break;
 8007734:	e107      	b.n	8007946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d002      	beq.n	8007748 <USBD_StdEPReq+0x124>
 8007742:	2b03      	cmp	r3, #3
 8007744:	d016      	beq.n	8007774 <USBD_StdEPReq+0x150>
 8007746:	e04b      	b.n	80077e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <USBD_StdEPReq+0x146>
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b80      	cmp	r3, #128	; 0x80
 8007752:	d00a      	beq.n	800776a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fc11 	bl	8008f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800775e:	2180      	movs	r1, #128	; 0x80
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fc0d 	bl	8008f80 <USBD_LL_StallEP>
 8007766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007768:	e040      	b.n	80077ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc3e 	bl	8007fee <USBD_CtlError>
              break;
 8007772:	e03b      	b.n	80077ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d136      	bne.n	80077ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fc17 	bl	8008fbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fcf7 	bl	8008184 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fde2 	bl	8007364 <USBD_CoreFindEP>
 80077a0:	4603      	mov	r3, r0
 80077a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077a4:	7b7b      	ldrb	r3, [r7, #13]
 80077a6:	2bff      	cmp	r3, #255	; 0xff
 80077a8:	d01f      	beq.n	80077ea <USBD_StdEPReq+0x1c6>
 80077aa:	7b7b      	ldrb	r3, [r7, #13]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11c      	bne.n	80077ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077b0:	7b7a      	ldrb	r2, [r7, #13]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077b8:	7b7a      	ldrb	r2, [r7, #13]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32ae      	adds	r2, #174	; 0xae
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d010      	beq.n	80077ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077c8:	7b7a      	ldrb	r2, [r7, #13]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	; 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077de:	e004      	b.n	80077ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc03 	bl	8007fee <USBD_CtlError>
              break;
 80077e8:	e000      	b.n	80077ec <USBD_StdEPReq+0x1c8>
              break;
 80077ea:	bf00      	nop
          }
          break;
 80077ec:	e0ab      	b.n	8007946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d002      	beq.n	8007800 <USBD_StdEPReq+0x1dc>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d032      	beq.n	8007864 <USBD_StdEPReq+0x240>
 80077fe:	e097      	b.n	8007930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <USBD_StdEPReq+0x1f2>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d004      	beq.n	8007816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fbed 	bl	8007fee <USBD_CtlError>
                break;
 8007814:	e091      	b.n	800793a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da0b      	bge.n	8007836 <USBD_StdEPReq+0x212>
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	3310      	adds	r3, #16
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	e00b      	b.n	800784e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4413      	add	r3, r2
 800784c:	3304      	adds	r3, #4
 800784e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2202      	movs	r2, #2
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc37 	bl	80080d0 <USBD_CtlSendData>
              break;
 8007862:	e06a      	b.n	800793a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	da11      	bge.n	8007890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	f003 020f 	and.w	r2, r3, #15
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d117      	bne.n	80078b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fbb0 	bl	8007fee <USBD_CtlError>
                  break;
 800788e:	e054      	b.n	800793a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb9d 	bl	8007fee <USBD_CtlError>
                  break;
 80078b4:	e041      	b.n	800793a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da0b      	bge.n	80078d6 <USBD_StdEPReq+0x2b2>
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	3310      	adds	r3, #16
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	3304      	adds	r3, #4
 80078d4:	e00b      	b.n	80078ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4413      	add	r3, r2
 80078ec:	3304      	adds	r3, #4
 80078ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0x2d8>
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d103      	bne.n	8007904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e00e      	b.n	8007922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fb77 	bl	8008ffc <USBD_LL_IsStallEP>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e002      	b.n	8007922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2202      	movs	r2, #2
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fbd1 	bl	80080d0 <USBD_CtlSendData>
              break;
 800792e:	e004      	b.n	800793a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fb5b 	bl	8007fee <USBD_CtlError>
              break;
 8007938:	bf00      	nop
          }
          break;
 800793a:	e004      	b.n	8007946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fb55 	bl	8007fee <USBD_CtlError>
          break;
 8007944:	bf00      	nop
      }
      break;
 8007946:	e005      	b.n	8007954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb4f 	bl	8007fee <USBD_CtlError>
      break;
 8007950:	e000      	b.n	8007954 <USBD_StdEPReq+0x330>
      break;
 8007952:	bf00      	nop
  }

  return ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	885b      	ldrh	r3, [r3, #2]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	2b06      	cmp	r3, #6
 8007982:	f200 8128 	bhi.w	8007bd6 <USBD_GetDescriptor+0x276>
 8007986:	a201      	add	r2, pc, #4	; (adr r2, 800798c <USBD_GetDescriptor+0x2c>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079a9 	.word	0x080079a9
 8007990:	080079c1 	.word	0x080079c1
 8007994:	08007a01 	.word	0x08007a01
 8007998:	08007bd7 	.word	0x08007bd7
 800799c:	08007bd7 	.word	0x08007bd7
 80079a0:	08007b77 	.word	0x08007b77
 80079a4:	08007ba3 	.word	0x08007ba3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
      break;
 80079be:	e112      	b.n	8007be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7c1b      	ldrb	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10d      	bne.n	80079e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	2202      	movs	r2, #2
 80079e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079e2:	e100      	b.n	8007be6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	f107 0208 	add.w	r2, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	2202      	movs	r2, #2
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e0f2      	b.n	8007be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	f200 80ac 	bhi.w	8007b64 <USBD_GetDescriptor+0x204>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <USBD_GetDescriptor+0xb4>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a2d 	.word	0x08007a2d
 8007a18:	08007a61 	.word	0x08007a61
 8007a1c:	08007a95 	.word	0x08007a95
 8007a20:	08007ac9 	.word	0x08007ac9
 8007a24:	08007afd 	.word	0x08007afd
 8007a28:	08007b31 	.word	0x08007b31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	7c12      	ldrb	r2, [r2, #16]
 8007a44:	f107 0108 	add.w	r1, r7, #8
 8007a48:	4610      	mov	r0, r2
 8007a4a:	4798      	blx	r3
 8007a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a4e:	e091      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 facb 	bl	8007fee <USBD_CtlError>
            err++;
 8007a58:	7afb      	ldrb	r3, [r7, #11]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a5e:	e089      	b.n	8007b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	7c12      	ldrb	r2, [r2, #16]
 8007a78:	f107 0108 	add.w	r1, r7, #8
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
 8007a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a82:	e077      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fab1 	bl	8007fee <USBD_CtlError>
            err++;
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	72fb      	strb	r3, [r7, #11]
          break;
 8007a92:	e06f      	b.n	8007b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	7c12      	ldrb	r2, [r2, #16]
 8007aac:	f107 0108 	add.w	r1, r7, #8
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4798      	blx	r3
 8007ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ab6:	e05d      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa97 	bl	8007fee <USBD_CtlError>
            err++;
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ac6:	e055      	b.n	8007b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c12      	ldrb	r2, [r2, #16]
 8007ae0:	f107 0108 	add.w	r1, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aea:	e043      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa7d 	bl	8007fee <USBD_CtlError>
            err++;
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	3301      	adds	r3, #1
 8007af8:	72fb      	strb	r3, [r7, #11]
          break;
 8007afa:	e03b      	b.n	8007b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 0108 	add.w	r1, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1e:	e029      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa63 	bl	8007fee <USBD_CtlError>
            err++;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2e:	e021      	b.n	8007b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	7c12      	ldrb	r2, [r2, #16]
 8007b48:	f107 0108 	add.w	r1, r7, #8
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b52:	e00f      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa49 	bl	8007fee <USBD_CtlError>
            err++;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	72fb      	strb	r3, [r7, #11]
          break;
 8007b62:	e007      	b.n	8007b74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa41 	bl	8007fee <USBD_CtlError>
          err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e037      	b.n	8007be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7c1b      	ldrb	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4798      	blx	r3
 8007b8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b90:	e029      	b.n	8007be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa2a 	bl	8007fee <USBD_CtlError>
        err++;
 8007b9a:	7afb      	ldrb	r3, [r7, #11]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba0:	e021      	b.n	8007be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7c1b      	ldrb	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10d      	bne.n	8007bc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	f107 0208 	add.w	r2, r7, #8
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4798      	blx	r3
 8007bba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc4:	e00f      	b.n	8007be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa10 	bl	8007fee <USBD_CtlError>
        err++;
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd4:	e007      	b.n	8007be6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa08 	bl	8007fee <USBD_CtlError>
      err++;
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	3301      	adds	r3, #1
 8007be2:	72fb      	strb	r3, [r7, #11]
      break;
 8007be4:	bf00      	nop
  }

  if (err != 0U)
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d11e      	bne.n	8007c2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	88db      	ldrh	r3, [r3, #6]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d016      	beq.n	8007c22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00e      	beq.n	8007c18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	88da      	ldrh	r2, [r3, #6]
 8007bfe:	893b      	ldrh	r3, [r7, #8]
 8007c00:	4293      	cmp	r3, r2
 8007c02:	bf28      	it	cs
 8007c04:	4613      	movcs	r3, r2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c0a:	893b      	ldrh	r3, [r7, #8]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa5d 	bl	80080d0 <USBD_CtlSendData>
 8007c16:	e009      	b.n	8007c2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9e7 	bl	8007fee <USBD_CtlError>
 8007c20:	e004      	b.n	8007c2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 faae 	bl	8008184 <USBD_CtlSendStatus>
 8007c28:	e000      	b.n	8007c2c <USBD_GetDescriptor+0x2cc>
    return;
 8007c2a:	bf00      	nop
  }
}
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop

08007c34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d131      	bne.n	8007caa <USBD_SetAddress+0x76>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88db      	ldrh	r3, [r3, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d12d      	bne.n	8007caa <USBD_SetAddress+0x76>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	2b7f      	cmp	r3, #127	; 0x7f
 8007c54:	d829      	bhi.n	8007caa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	885b      	ldrh	r3, [r3, #2]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d104      	bne.n	8007c78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9bc 	bl	8007fee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	e01d      	b.n	8007cb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7bfa      	ldrb	r2, [r7, #15]
 8007c7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f9e5 	bl	8009054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa7a 	bl	8008184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9e:	e009      	b.n	8007cb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca8:	e004      	b.n	8007cb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f99e 	bl	8007fee <USBD_CtlError>
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	4b4e      	ldr	r3, [pc, #312]	; (8007e0c <USBD_SetConfig+0x150>)
 8007cd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cd4:	4b4d      	ldr	r3, [pc, #308]	; (8007e0c <USBD_SetConfig+0x150>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d905      	bls.n	8007ce8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f985 	bl	8007fee <USBD_CtlError>
    return USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e08c      	b.n	8007e02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d002      	beq.n	8007cfa <USBD_SetConfig+0x3e>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d029      	beq.n	8007d4c <USBD_SetConfig+0x90>
 8007cf8:	e075      	b.n	8007de6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cfa:	4b44      	ldr	r3, [pc, #272]	; (8007e0c <USBD_SetConfig+0x150>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d020      	beq.n	8007d44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d02:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d0c:	4b3f      	ldr	r3, [pc, #252]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fe ffe7 	bl	8006ce6 <USBD_SetClassConfig>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f962 	bl	8007fee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d32:	e065      	b.n	8007e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa25 	bl	8008184 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d42:	e05d      	b.n	8007e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa1d 	bl	8008184 <USBD_CtlSendStatus>
      break;
 8007d4a:	e059      	b.n	8007e00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d4c:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d112      	bne.n	8007d7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d5c:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fe ffd6 	bl	8006d1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa06 	bl	8008184 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d78:	e042      	b.n	8007e00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d02a      	beq.n	8007dde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7fe ffc4 	bl	8006d1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <USBD_SetConfig+0x150>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <USBD_SetConfig+0x150>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fe ff9d 	bl	8006ce6 <USBD_SetClassConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00f      	beq.n	8007dd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f918 	bl	8007fee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe ffa9 	bl	8006d1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dd4:	e014      	b.n	8007e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f9d4 	bl	8008184 <USBD_CtlSendStatus>
      break;
 8007ddc:	e010      	b.n	8007e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9d0 	bl	8008184 <USBD_CtlSendStatus>
      break;
 8007de4:	e00c      	b.n	8007e00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f900 	bl	8007fee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <USBD_SetConfig+0x150>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fe ff92 	bl	8006d1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200003e0 	.word	0x200003e0

08007e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d004      	beq.n	8007e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8e2 	bl	8007fee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e2a:	e023      	b.n	8007e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	dc02      	bgt.n	8007e3e <USBD_GetConfig+0x2e>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc03      	bgt.n	8007e44 <USBD_GetConfig+0x34>
 8007e3c:	e015      	b.n	8007e6a <USBD_GetConfig+0x5a>
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d00b      	beq.n	8007e5a <USBD_GetConfig+0x4a>
 8007e42:	e012      	b.n	8007e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f93c 	bl	80080d0 <USBD_CtlSendData>
        break;
 8007e58:	e00c      	b.n	8007e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f934 	bl	80080d0 <USBD_CtlSendData>
        break;
 8007e68:	e004      	b.n	8007e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8be 	bl	8007fee <USBD_CtlError>
        break;
 8007e72:	bf00      	nop
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d81e      	bhi.n	8007ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	88db      	ldrh	r3, [r3, #6]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d004      	beq.n	8007ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8a5 	bl	8007fee <USBD_CtlError>
        break;
 8007ea4:	e01a      	b.n	8007edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f043 0202 	orr.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f900 	bl	80080d0 <USBD_CtlSendData>
      break;
 8007ed0:	e004      	b.n	8007edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f88a 	bl	8007fee <USBD_CtlError>
      break;
 8007eda:	bf00      	nop
  }
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d107      	bne.n	8007f06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f940 	bl	8008184 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f04:	e013      	b.n	8007f2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d10b      	bne.n	8007f26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f930 	bl	8008184 <USBD_CtlSendStatus>
}
 8007f24:	e003      	b.n	8007f2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f860 	bl	8007fee <USBD_CtlError>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d80b      	bhi.n	8007f66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d10c      	bne.n	8007f70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f910 	bl	8008184 <USBD_CtlSendStatus>
      }
      break;
 8007f64:	e004      	b.n	8007f70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f840 	bl	8007fee <USBD_CtlError>
      break;
 8007f6e:	e000      	b.n	8007f72 <USBD_ClrFeature+0x3c>
      break;
 8007f70:	bf00      	nop
  }
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7ff fa41 	bl	800742c <SWAPBYTE>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff fa34 	bl	800742c <SWAPBYTE>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fa27 	bl	800742c <SWAPBYTE>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	80da      	strh	r2, [r3, #6]
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ff8:	2180      	movs	r1, #128	; 0x80
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 ffc0 	bl	8008f80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008000:	2100      	movs	r1, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 ffbc 	bl	8008f80 <USBD_LL_StallEP>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d036      	beq.n	8008094 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f000 f836 	bl	800809c <USBD_GetLen>
 8008030:	4603      	mov	r3, r0
 8008032:	3301      	adds	r3, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4413      	add	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	701a      	strb	r2, [r3, #0]
  idx++;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	3301      	adds	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	2203      	movs	r2, #3
 8008058:	701a      	strb	r2, [r3, #0]
  idx++;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	3301      	adds	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008060:	e013      	b.n	800808a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	7812      	ldrb	r2, [r2, #0]
 800806c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	613b      	str	r3, [r7, #16]
    idx++;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	3301      	adds	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4413      	add	r3, r2
 8008080:	2200      	movs	r2, #0
 8008082:	701a      	strb	r2, [r3, #0]
    idx++;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	3301      	adds	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e7      	bne.n	8008062 <USBD_GetString+0x52>
 8008092:	e000      	b.n	8008096 <USBD_GetString+0x86>
    return;
 8008094:	bf00      	nop
  }
}
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080ac:	e005      	b.n	80080ba <USBD_GetLen+0x1e>
  {
    len++;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	3301      	adds	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f5      	bne.n	80080ae <USBD_GetLen+0x12>
  }

  return len;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2202      	movs	r2, #2
 80080e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 ffcb 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	2100      	movs	r1, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 ffba 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2203      	movs	r2, #3
 8008138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 ffbe 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	2100      	movs	r1, #0
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 ffad 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2204      	movs	r2, #4
 8008190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008194:	2300      	movs	r3, #0
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 ff79 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2205      	movs	r2, #5
 80081b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ba:	2300      	movs	r3, #0
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 ff87 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <BMX055_Init>:
//Resolution each sensor
float f_accRes = 1.0;
float f_magRes = 1.0;
float f_gyroRes = 1.0;

uint8_t BMX055_Init(I2C_HandleTypeDef *I2Cx){
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;

	/* Read ACC BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
 80081d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	2301      	movs	r3, #1
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	f107 030f 	add.w	r3, r7, #15
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2301      	movs	r3, #1
 80081ea:	2200      	movs	r2, #0
 80081ec:	2130      	movs	r1, #48	; 0x30
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7f9 ff96 	bl	8002120 <HAL_I2C_Mem_Read>

	if(readData != BMX055_ACC_DEVICE){
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2bfa      	cmp	r3, #250	; 0xfa
 80081f8:	d001      	beq.n	80081fe <BMX055_Init+0x2e>
		return 0xFF;
 80081fa:	23ff      	movs	r3, #255	; 0xff
 80081fc:	e0f0      	b.n	80083e0 <BMX055_Init+0x210>
	}

	/* Wakeup Magnetometer */
	writeData = BMX055_MAG_SLEEP_MODE;
 80081fe:	2301      	movs	r3, #1
 8008200:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_POW_CTL_REG, 1, &writeData, 1, 500);
 8008202:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	2301      	movs	r3, #1
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	f107 030e 	add.w	r3, r7, #14
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2301      	movs	r3, #1
 8008214:	224b      	movs	r2, #75	; 0x4b
 8008216:	2120      	movs	r1, #32
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7f9 fe87 	bl	8001f2c <HAL_I2C_Mem_Write>
	/* Read MAG BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_MAG_REG, 1, &readData, 1, 500);
 800821e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008222:	9302      	str	r3, [sp, #8]
 8008224:	2301      	movs	r3, #1
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	f107 030f 	add.w	r3, r7, #15
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	2301      	movs	r3, #1
 8008230:	2240      	movs	r2, #64	; 0x40
 8008232:	2120      	movs	r1, #32
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7f9 ff73 	bl	8002120 <HAL_I2C_Mem_Read>
	if( readData != BMX055_MAG_DEVICE ){
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b32      	cmp	r3, #50	; 0x32
 800823e:	d001      	beq.n	8008244 <BMX055_Init+0x74>
		/* Sleep mode */
		return 0xFE;
 8008240:	23fe      	movs	r3, #254	; 0xfe
 8008242:	e0cd      	b.n	80083e0 <BMX055_Init+0x210>
	}

	/* Read GYRO BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
 8008244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008248:	9302      	str	r3, [sp, #8]
 800824a:	2301      	movs	r3, #1
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	f107 030f 	add.w	r3, r7, #15
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2301      	movs	r3, #1
 8008256:	2200      	movs	r2, #0
 8008258:	21d0      	movs	r1, #208	; 0xd0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7f9 ff60 	bl	8002120 <HAL_I2C_Mem_Read>
	if( readData != BMX055_GYRO_DEVICE ){
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	d001      	beq.n	800826a <BMX055_Init+0x9a>
		return 0xFD;
 8008266:	23fd      	movs	r3, #253	; 0xfd
 8008268:	e0ba      	b.n	80083e0 <BMX055_Init+0x210>
	}

	/* Accelerometer Soft Reset */
	writeData = BMX055_INITIATED_SOFT_RESET;
 800826a:	23b6      	movs	r3, #182	; 0xb6
 800826c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_RESET_REG, 1, &writeData, 1, 500);
 800826e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008272:	9302      	str	r3, [sp, #8]
 8008274:	2301      	movs	r3, #1
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	f107 030e 	add.w	r3, r7, #14
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	2301      	movs	r3, #1
 8008280:	2214      	movs	r2, #20
 8008282:	2130      	movs	r1, #48	; 0x30
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7f9 fe51 	bl	8001f2c <HAL_I2C_Mem_Write>
	HAL_Delay(2);	/* Wait 2ms */
 800828a:	2002      	movs	r0, #2
 800828c:	f7f9 fa50 	bl	8001730 <HAL_Delay>

	/* Configure Acceleration range */
	writeData = Ascale;
 8008290:	2305      	movs	r3, #5
 8008292:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_RANGE_REG, 1, &writeData, 1, 500);
 8008294:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008298:	9302      	str	r3, [sp, #8]
 800829a:	2301      	movs	r3, #1
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	f107 030e 	add.w	r3, r7, #14
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2301      	movs	r3, #1
 80082a6:	220f      	movs	r2, #15
 80082a8:	2130      	movs	r1, #48	; 0x30
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7f9 fe3e 	bl	8001f2c <HAL_I2C_Mem_Write>

	/* Select Accel BandWidth */
	writeData = BMX055_ACC_PMU_BW_250;
 80082b0:	230d      	movs	r3, #13
 80082b2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_BW_REG, 1, &writeData, 1, 500);
 80082b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	2301      	movs	r3, #1
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	f107 030e 	add.w	r3, r7, #14
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2301      	movs	r3, #1
 80082c6:	2210      	movs	r2, #16
 80082c8:	2130      	movs	r1, #48	; 0x30
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f9 fe2e 	bl	8001f2c <HAL_I2C_Mem_Write>


	/* LP Mode Sleep mode */
	writeData = BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_2MS;
 80082d0:	230e      	movs	r3, #14
 80082d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_LPW_REG, 1, &writeData, 1, 500);
 80082d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	2301      	movs	r3, #1
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	f107 030e 	add.w	r3, r7, #14
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2301      	movs	r3, #1
 80082e6:	2211      	movs	r2, #17
 80082e8:	2130      	movs	r1, #48	; 0x30
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7f9 fe1e 	bl	8001f2c <HAL_I2C_Mem_Write>


	/* Gyroscope Soft Reset  */
	writeData = BMX055_INITIATED_SOFT_RESET;
 80082f0:	23b6      	movs	r3, #182	; 0xb6
 80082f2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_RESET_REG, 1, &writeData, 1, 500);
 80082f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	2301      	movs	r3, #1
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f107 030e 	add.w	r3, r7, #14
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2301      	movs	r3, #1
 8008306:	2214      	movs	r2, #20
 8008308:	21d0      	movs	r1, #208	; 0xd0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f9 fe0e 	bl	8001f2c <HAL_I2C_Mem_Write>
	HAL_Delay(2);	/* Wait 2ms */
 8008310:	2002      	movs	r0, #2
 8008312:	f7f9 fa0d 	bl	8001730 <HAL_Delay>

	/* Select Gyro Range 262.4 LSB/°/s */
	writeData = Gscale;
 8008316:	2300      	movs	r3, #0
 8008318:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_RANGE_REG, 1, &writeData, 1, 500);
 800831a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800831e:	9302      	str	r3, [sp, #8]
 8008320:	2301      	movs	r3, #1
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	f107 030e 	add.w	r3, r7, #14
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2301      	movs	r3, #1
 800832c:	220f      	movs	r2, #15
 800832e:	21d0      	movs	r1, #208	; 0xd0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7f9 fdfb 	bl	8001f2c <HAL_I2C_Mem_Write>

	/* Select Gyro BandWidth */
	writeData = BMX055_GYRO_BW_32;
 8008336:	2307      	movs	r3, #7
 8008338:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_BW_REG, 1, &writeData, 1, 500);
 800833a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800833e:	9302      	str	r3, [sp, #8]
 8008340:	2301      	movs	r3, #1
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	f107 030e 	add.w	r3, r7, #14
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	2301      	movs	r3, #1
 800834c:	2210      	movs	r2, #16
 800834e:	21d0      	movs	r1, #208	; 0xd0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f9 fdeb 	bl	8001f2c <HAL_I2C_Mem_Write>

	/* Select Gyro LPM (NormalMode, SleepDuration 2ms) */
	writeData = BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_4MS;
 8008356:	2301      	movs	r3, #1
 8008358:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_LPM1_REG, 1, &writeData, 1, 500);
 800835a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800835e:	9302      	str	r3, [sp, #8]
 8008360:	2301      	movs	r3, #1
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	f107 030e 	add.w	r3, r7, #14
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	2301      	movs	r3, #1
 800836c:	2211      	movs	r2, #17
 800836e:	21d0      	movs	r1, #208	; 0xd0
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7f9 fddb 	bl	8001f2c <HAL_I2C_Mem_Write>
//	/* WK UP MAGN */
//	writeData = BMX055_MAG_SLEEP_MODE;
//	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_POW_CTL_REG, 1, &writeData, 1, 500);

	/* Normal Mode , ODR 10Hz*/
	writeData = BMX055_MAG_OP_MODE_NORMAL | BMX055_MAG_DATA_RATE_10;
 8008376:	2300      	movs	r3, #0
 8008378:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_ADV_OP_OUTPUT_REG, 1, &writeData, 1, 500);
 800837a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	2301      	movs	r3, #1
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	f107 030e 	add.w	r3, r7, #14
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	2301      	movs	r3, #1
 800838c:	224c      	movs	r2, #76	; 0x4c
 800838e:	2120      	movs	r1, #32
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7f9 fdcb 	bl	8001f2c <HAL_I2C_Mem_Write>

	/* Repetitions for X-Y Axis 0x04 -> 0b0100 -> 1+2(2^2) = 9 */
	writeData = 0x04;
 8008396:	2304      	movs	r3, #4
 8008398:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_REP_XY_REG, 1, &writeData, 1, 500);
 800839a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	2301      	movs	r3, #1
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	f107 030e 	add.w	r3, r7, #14
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2301      	movs	r3, #1
 80083ac:	2251      	movs	r2, #81	; 0x51
 80083ae:	2120      	movs	r1, #32
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7f9 fdbb 	bl	8001f2c <HAL_I2C_Mem_Write>

	/* Repetitions for Z Axis 0x0F -> 0b1111 -> 1+(2^3 + 2^2 + 2^1 + 2^0) = 15 */
	writeData = 0x0E;
 80083b6:	230e      	movs	r3, #14
 80083b8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_REP_Z_REG, 1, &writeData, 1, 500);
 80083ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	2301      	movs	r3, #1
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	f107 030e 	add.w	r3, r7, #14
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	2301      	movs	r3, #1
 80083cc:	2252      	movs	r2, #82	; 0x52
 80083ce:	2120      	movs	r1, #32
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7f9 fdab 	bl	8001f2c <HAL_I2C_Mem_Write>


	//Init Accelerometer

	/* Read Actual Accelerometer Resolution */
	getAcc_Res();
 80083d6:	f000 f905 	bl	80085e4 <getAcc_Res>

	/* Read Actual Gyroscope Resolution */
	getGyro_Res();
 80083da:	f000 f93d 	bl	8008658 <getGyro_Res>


	return 0;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <readTemp_BMX055>:

void readTemp_BMX055(float *destination, I2C_HandleTypeDef *I2Cx){
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af04      	add	r7, sp, #16
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	uint16_t rawData;
	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_TEMP_SENSOR, 1, &rawData, 1, 500);
 80083f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083f6:	9302      	str	r3, [sp, #8]
 80083f8:	2301      	movs	r3, #1
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	f107 030e 	add.w	r3, r7, #14
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	2301      	movs	r3, #1
 8008404:	2208      	movs	r2, #8
 8008406:	2130      	movs	r1, #48	; 0x30
 8008408:	6838      	ldr	r0, [r7, #0]
 800840a:	f7f9 fe89 	bl	8002120 <HAL_I2C_Mem_Read>
	rawData = ((int16_t)((int16_t)rawData << 8)) >> 8 ;
 800840e:	89fb      	ldrh	r3, [r7, #14]
 8008410:	b21b      	sxth	r3, r3
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	b21b      	sxth	r3, r3
 8008416:	121b      	asrs	r3, r3, #8
 8008418:	b21b      	sxth	r3, r3
 800841a:	b29b      	uxth	r3, r3
 800841c:	81fb      	strh	r3, [r7, #14]
	*destination = ( (float) rawData )/2.0 + 23.0;
 800841e:	89fb      	ldrh	r3, [r7, #14]
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008428:	ee17 0a90 	vmov	r0, s15
 800842c:	f7f8 f894 	bl	8000558 <__aeabi_f2d>
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008438:	f7f8 fa10 	bl	800085c <__aeabi_ddiv>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	4b07      	ldr	r3, [pc, #28]	; (8008468 <readTemp_BMX055+0x80>)
 800844a:	f7f7 ff27 	bl	800029c <__adddf3>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	f7f8 fbaf 	bl	8000bb8 <__aeabi_d2f>
 800845a:	4602      	mov	r2, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
}
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40370000 	.word	0x40370000

0800846c <readAccelData>:

void readAccelData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af04      	add	r7, sp, #16
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	/* XYZ Data Register Stored Here */
	uint8_t rawData[6];

	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_DATA_START_REG, 1, rawData, 6, 500);
 8008476:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800847a:	9302      	str	r3, [sp, #8]
 800847c:	2306      	movs	r3, #6
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f107 0308 	add.w	r3, r7, #8
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	2301      	movs	r3, #1
 8008488:	2202      	movs	r2, #2
 800848a:	2130      	movs	r1, #48	; 0x30
 800848c:	6838      	ldr	r0, [r7, #0]
 800848e:	f7f9 fe47 	bl	8002120 <HAL_I2C_Mem_Read>

//	if((rawData[0] & 0x01) && (rawData[2] & 0x01) && (rawData[4] & 0x01)) {  // Check that all 3 axes have new data
		destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 4;  // Turn the MSB and LSB into a signed 12-bit value
 8008492:	7a7b      	ldrb	r3, [r7, #9]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b21a      	sxth	r2, r3
 8008498:	7a3b      	ldrb	r3, [r7, #8]
 800849a:	b21b      	sxth	r3, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	b21b      	sxth	r3, r3
 80084a0:	111b      	asrs	r3, r3, #4
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	801a      	strh	r2, [r3, #0]
		destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 4;
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	b21a      	sxth	r2, r3
 80084ae:	7abb      	ldrb	r3, [r7, #10]
 80084b0:	b21b      	sxth	r3, r3
 80084b2:	4313      	orrs	r3, r2
 80084b4:	b21a      	sxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3302      	adds	r3, #2
 80084ba:	1112      	asrs	r2, r2, #4
 80084bc:	b212      	sxth	r2, r2
 80084be:	801a      	strh	r2, [r3, #0]
		destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 4;
 80084c0:	7b7b      	ldrb	r3, [r7, #13]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	b21a      	sxth	r2, r3
 80084c6:	7b3b      	ldrb	r3, [r7, #12]
 80084c8:	b21b      	sxth	r3, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	b21a      	sxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3304      	adds	r3, #4
 80084d2:	1112      	asrs	r2, r2, #4
 80084d4:	b212      	sxth	r2, r2
 80084d6:	801a      	strh	r2, [r3, #0]
//	}

}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <readGyroData>:

void readGyroData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_DATA_START_REG, 1, rawData, 6, 500);
 80084ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	2306      	movs	r3, #6
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	2301      	movs	r3, #1
 80084fc:	2202      	movs	r2, #2
 80084fe:	21d0      	movs	r1, #208	; 0xd0
 8008500:	6838      	ldr	r0, [r7, #0]
 8008502:	f7f9 fe0d 	bl	8002120 <HAL_I2C_Mem_Read>

	destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);   // Turn the MSB and LSB into a signed 16-bit value
 8008506:	7a7b      	ldrb	r3, [r7, #9]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	b21a      	sxth	r2, r3
 800850c:	7a3b      	ldrb	r3, [r7, #8]
 800850e:	b21b      	sxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b21a      	sxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]);
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	b219      	sxth	r1, r3
 800851e:	7abb      	ldrb	r3, [r7, #10]
 8008520:	b21a      	sxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3302      	adds	r3, #2
 8008526:	430a      	orrs	r2, r1
 8008528:	b212      	sxth	r2, r2
 800852a:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]);
 800852c:	7b7b      	ldrb	r3, [r7, #13]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	b219      	sxth	r1, r3
 8008532:	7b3b      	ldrb	r3, [r7, #12]
 8008534:	b21a      	sxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	430a      	orrs	r2, r1
 800853c:	b212      	sxth	r2, r2
 800853e:	801a      	strh	r2, [r3, #0]

}
 8008540:	bf00      	nop
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <readMagData>:

void readMagData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af04      	add	r7, sp, #16
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	int16_t mdata_x = 0, mdata_y = 0, mdata_z = 0, temp = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	82fb      	strh	r3, [r7, #22]
 8008556:	2300      	movs	r3, #0
 8008558:	82bb      	strh	r3, [r7, #20]
 800855a:	2300      	movs	r3, #0
 800855c:	827b      	strh	r3, [r7, #18]
 800855e:	2300      	movs	r3, #0
 8008560:	823b      	strh	r3, [r7, #16]
	uint16_t data_r = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	81fb      	strh	r3, [r7, #14]
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_DATA_START_REG, 1, rawData, 8, 2000);  // Read the eight raw data registers sequentially into data array
 8008566:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	2308      	movs	r3, #8
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	2301      	movs	r3, #1
 8008578:	2242      	movs	r2, #66	; 0x42
 800857a:	2120      	movs	r1, #32
 800857c:	6838      	ldr	r0, [r7, #0]
 800857e:	f7f9 fdcf 	bl	8002120 <HAL_I2C_Mem_Read>

//	if(rawData[6] & 0x01) { // Check if data ready status bit is set
		destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 3;  // 13-bit signed integer for x-axis field
 8008582:	7a7b      	ldrb	r3, [r7, #9]
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	b21a      	sxth	r2, r3
 8008588:	7a3b      	ldrb	r3, [r7, #8]
 800858a:	b21b      	sxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b21b      	sxth	r3, r3
 8008590:	10db      	asrs	r3, r3, #3
 8008592:	b21a      	sxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	801a      	strh	r2, [r3, #0]
		destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 3;  // 13-bit signed integer for y-axis field
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	b21a      	sxth	r2, r3
 800859e:	7abb      	ldrb	r3, [r7, #10]
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	b21a      	sxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3302      	adds	r3, #2
 80085aa:	10d2      	asrs	r2, r2, #3
 80085ac:	b212      	sxth	r2, r2
 80085ae:	801a      	strh	r2, [r3, #0]
		destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 1;  // 15-bit signed integer for z-axis field
 80085b0:	7b7b      	ldrb	r3, [r7, #13]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	b21a      	sxth	r2, r3
 80085b6:	7b3b      	ldrb	r3, [r7, #12]
 80085b8:	b21b      	sxth	r3, r3
 80085ba:	4313      	orrs	r3, r2
 80085bc:	b21a      	sxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3304      	adds	r3, #4
 80085c2:	1052      	asrs	r2, r2, #1
 80085c4:	b212      	sxth	r2, r2
 80085c6:	801a      	strh	r2, [r3, #0]
		data_r = (uint16_t) (((uint16_t)rawData[7] << 8) | rawData[6]) >> 2;  // 14-bit unsigned integer for Hall resistance
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	b21a      	sxth	r2, r3
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	b21b      	sxth	r3, r3
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b21b      	sxth	r3, r3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	089b      	lsrs	r3, r3, #2
 80085da:	81fb      	strh	r3, [r7, #14]
//	magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
//	((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));

//	}

}
 80085dc:	bf00      	nop
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <getAcc_Res>:
//	          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
//	          break;
	  }
}

void getAcc_Res(void){
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
	  switch (Ascale)
 80085e8:	2305      	movs	r3, #5
 80085ea:	3b03      	subs	r3, #3
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d82b      	bhi.n	8008648 <getAcc_Res+0x64>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <getAcc_Res+0x14>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	08008621 	.word	0x08008621
 80085fc:	08008649 	.word	0x08008649
 8008600:	0800862b 	.word	0x0800862b
 8008604:	08008649 	.word	0x08008649
 8008608:	08008649 	.word	0x08008649
 800860c:	08008635 	.word	0x08008635
 8008610:	08008649 	.word	0x08008649
 8008614:	08008649 	.word	0x08008649
 8008618:	08008649 	.word	0x08008649
 800861c:	0800863f 	.word	0x0800863f
	  {
	 	// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (0011), 4 Gs (0101), 8 Gs (1000), and 16 Gs  (1100).
	        // BMX055 ACC data is signed 12 bit
	    case BMX055_ACC_RANGE_2G:
	          f_accRes = 2.0/2048.0;
 8008620:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <getAcc_Res+0x70>)
 8008622:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8008626:	601a      	str	r2, [r3, #0]
	          break;
 8008628:	e00e      	b.n	8008648 <getAcc_Res+0x64>
	    case BMX055_ACC_RANGE_4G:
	    	f_accRes = 4.0/2048.0;
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <getAcc_Res+0x70>)
 800862c:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
 8008630:	601a      	str	r2, [r3, #0]
	          break;
 8008632:	e009      	b.n	8008648 <getAcc_Res+0x64>
	    case BMX055_ACC_RANGE_8G:
	    	f_accRes = 8.0/2048.0;
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <getAcc_Res+0x70>)
 8008636:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800863a:	601a      	str	r2, [r3, #0]
	          break;
 800863c:	e004      	b.n	8008648 <getAcc_Res+0x64>
	    case BMX055_ACC_RANGE_16G:
	    	f_accRes = 16.0/2048.0;
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <getAcc_Res+0x70>)
 8008640:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 8008644:	601a      	str	r2, [r3, #0]
	          break;
 8008646:	bf00      	nop
	  }
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200000fc 	.word	0x200000fc

08008658 <getGyro_Res>:

void getGyro_Res(void){
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0

	switch (Gscale)
 800865c:	2300      	movs	r3, #0
 800865e:	2b04      	cmp	r3, #4
 8008660:	d820      	bhi.n	80086a4 <getGyro_Res+0x4c>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <getGyro_Res+0x10>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	0800867d 	.word	0x0800867d
 800866c:	08008685 	.word	0x08008685
 8008670:	0800868d 	.word	0x0800868d
 8008674:	08008695 	.word	0x08008695
 8008678:	0800869d 	.word	0x0800869d
		  {
		 	// Possible accelerometer scales (and their register bit settings) are:
			// 2 Gs (0011), 4 Gs (0101), 8 Gs (1000), and 16 Gs  (1100).
		        // BMX055 ACC data is signed 12 bit
		    case BMX055_GYRO_RANGE_2000DPS:
		    	f_gyroRes =1998.0/32768.0;
 800867c:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <getGyro_Res+0x58>)
 800867e:	4a0d      	ldr	r2, [pc, #52]	; (80086b4 <getGyro_Res+0x5c>)
 8008680:	601a      	str	r2, [r3, #0]
		          break;
 8008682:	e00f      	b.n	80086a4 <getGyro_Res+0x4c>
		    case BMX055_GYRO_RANGE_1000DPS:
		    	f_gyroRes = 999.0/32768.0;
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <getGyro_Res+0x58>)
 8008686:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <getGyro_Res+0x60>)
 8008688:	601a      	str	r2, [r3, #0]
		    	break;
 800868a:	e00b      	b.n	80086a4 <getGyro_Res+0x4c>
		    case BMX055_GYRO_RANGE_500DPS:
		    	f_gyroRes = 499.5/32768.0;
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <getGyro_Res+0x58>)
 800868e:	4a0b      	ldr	r2, [pc, #44]	; (80086bc <getGyro_Res+0x64>)
 8008690:	601a      	str	r2, [r3, #0]
		    	break;
 8008692:	e007      	b.n	80086a4 <getGyro_Res+0x4c>
		    case BMX055_GYRO_RANGE_250DPS:
		    	f_gyroRes = 249.75/32768.0;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <getGyro_Res+0x58>)
 8008696:	4a0a      	ldr	r2, [pc, #40]	; (80086c0 <getGyro_Res+0x68>)
 8008698:	601a      	str	r2, [r3, #0]
		    	break;
 800869a:	e003      	b.n	80086a4 <getGyro_Res+0x4c>
		    case BMX055_GYRO_RANGE_125DPS:
		    	f_gyroRes = 124.87/32768.0;
 800869c:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <getGyro_Res+0x58>)
 800869e:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <getGyro_Res+0x6c>)
 80086a0:	601a      	str	r2, [r3, #0]
		    	break;
 80086a2:	bf00      	nop
		  }

}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20000100 	.word	0x20000100
 80086b4:	3d79c000 	.word	0x3d79c000
 80086b8:	3cf9c000 	.word	0x3cf9c000
 80086bc:	3c79c000 	.word	0x3c79c000
 80086c0:	3bf9c000 	.word	0x3bf9c000
 80086c4:	3b79bd71 	.word	0x3b79bd71

080086c8 <BMX055_readAllSensors>:

void BMX055_readAllSensors(I2C_HandleTypeDef *I2Cx, BMX055_t *DataStruct){
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	int16_t accelCount[3];
	int16_t gyroCount[3];

	/* Read (x,y,z) accelerometer values */
	readAccelData(accelCount, I2Cx);
 80086d2:	f107 0310 	add.w	r3, r7, #16
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fec7 	bl	800846c <readAccelData>

	/* Calculate actual values in G's */
	DataStruct->AccelX = (float)((int)accelCount[0]*f_accRes);
 80086de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086ea:	4b2c      	ldr	r3, [pc, #176]	; (800879c <BMX055_readAllSensors+0xd4>)
 80086ec:	edd3 7a00 	vldr	s15, [r3]
 80086f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	edc3 7a00 	vstr	s15, [r3]
	DataStruct->AccelY = (float)((int)accelCount[1]*f_accRes);
 80086fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008706:	4b25      	ldr	r3, [pc, #148]	; (800879c <BMX055_readAllSensors+0xd4>)
 8008708:	edd3 7a00 	vldr	s15, [r3]
 800870c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	edc3 7a01 	vstr	s15, [r3, #4]
	DataStruct->AccelZ = (float)((int)accelCount[2]*f_accRes);
 8008716:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008722:	4b1e      	ldr	r3, [pc, #120]	; (800879c <BMX055_readAllSensors+0xd4>)
 8008724:	edd3 7a00 	vldr	s15, [r3]
 8008728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Read (x,y,z) gyroscope values */
	readGyroData(gyroCount, I2Cx);
 8008732:	f107 0308 	add.w	r3, r7, #8
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fed1 	bl	80084e0 <readGyroData>

	/* Calculate actual values in °/s */
	DataStruct->GyroX = (float)((int)gyroCount[0]*f_gyroRes);
 800873e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800874a:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <BMX055_readAllSensors+0xd8>)
 800874c:	edd3 7a00 	vldr	s15, [r3]
 8008750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->GyroY = (float)((int)gyroCount[1]*f_gyroRes);
 800875a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <BMX055_readAllSensors+0xd8>)
 8008768:	edd3 7a00 	vldr	s15, [r3]
 800876c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->GyroZ = (float)((int)gyroCount[2]*f_gyroRes);
 8008776:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <BMX055_readAllSensors+0xd8>)
 8008784:	edd3 7a00 	vldr	s15, [r3]
 8008788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Read (x,y,z) magnetometer */


}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200000fc 	.word	0x200000fc
 80087a0:	20000100 	.word	0x20000100

080087a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4912      	ldr	r1, [pc, #72]	; (80087f4 <MX_USB_DEVICE_Init+0x50>)
 80087ac:	4812      	ldr	r0, [pc, #72]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087ae:	f7fe fa1d 	bl	8006bec <USBD_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087b8:	f7f8 fd9c 	bl	80012f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087bc:	490f      	ldr	r1, [pc, #60]	; (80087fc <MX_USB_DEVICE_Init+0x58>)
 80087be:	480e      	ldr	r0, [pc, #56]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087c0:	f7fe fa44 	bl	8006c4c <USBD_RegisterClass>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087ca:	f7f8 fd93 	bl	80012f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087ce:	490c      	ldr	r1, [pc, #48]	; (8008800 <MX_USB_DEVICE_Init+0x5c>)
 80087d0:	4809      	ldr	r0, [pc, #36]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087d2:	f7fe f935 	bl	8006a40 <USBD_CDC_RegisterInterface>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087dc:	f7f8 fd8a 	bl	80012f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087e0:	4805      	ldr	r0, [pc, #20]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087e2:	f7fe fa69 	bl	8006cb8 <USBD_Start>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087ec:	f7f8 fd82 	bl	80012f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f0:	bf00      	nop
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000118 	.word	0x20000118
 80087f8:	200003e4 	.word	0x200003e4
 80087fc:	2000007c 	.word	0x2000007c
 8008800:	20000104 	.word	0x20000104

08008804 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008808:	2200      	movs	r2, #0
 800880a:	4905      	ldr	r1, [pc, #20]	; (8008820 <CDC_Init_FS+0x1c>)
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <CDC_Init_FS+0x20>)
 800880e:	f7fe f931 	bl	8006a74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008812:	4905      	ldr	r1, [pc, #20]	; (8008828 <CDC_Init_FS+0x24>)
 8008814:	4803      	ldr	r0, [pc, #12]	; (8008824 <CDC_Init_FS+0x20>)
 8008816:	f7fe f94f 	bl	8006ab8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800881a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800881c:	4618      	mov	r0, r3
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000ec0 	.word	0x20000ec0
 8008824:	200003e4 	.word	0x200003e4
 8008828:	200006c0 	.word	0x200006c0

0800882c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008830:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008832:	4618      	mov	r0, r3
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
 8008848:	4613      	mov	r3, r2
 800884a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b23      	cmp	r3, #35	; 0x23
 8008850:	d84a      	bhi.n	80088e8 <CDC_Control_FS+0xac>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <CDC_Control_FS+0x1c>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088e9 	.word	0x080088e9
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088e9 	.word	0x080088e9
 8008874:	080088e9 	.word	0x080088e9
 8008878:	080088e9 	.word	0x080088e9
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080088e9 	.word	0x080088e9
 8008884:	080088e9 	.word	0x080088e9
 8008888:	080088e9 	.word	0x080088e9
 800888c:	080088e9 	.word	0x080088e9
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088e9 	.word	0x080088e9
 8008898:	080088e9 	.word	0x080088e9
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088e9 	.word	0x080088e9
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e9 	.word	0x080088e9
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088e9 	.word	0x080088e9
 80088d8:	080088e9 	.word	0x080088e9
 80088dc:	080088e9 	.word	0x080088e9
 80088e0:	080088e9 	.word	0x080088e9
 80088e4:	080088e9 	.word	0x080088e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088e8:	bf00      	nop
  }

  return (USBD_OK);
 80088ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4805      	ldr	r0, [pc, #20]	; (800891c <CDC_Receive_FS+0x24>)
 8008906:	f7fe f8d7 	bl	8006ab8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800890a:	4804      	ldr	r0, [pc, #16]	; (800891c <CDC_Receive_FS+0x24>)
 800890c:	f7fe f938 	bl	8006b80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008910:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200003e4 	.word	0x200003e4

08008920 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008930:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <CDC_Transmit_FS+0x48>)
 8008932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008936:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008942:	2301      	movs	r3, #1
 8008944:	e00b      	b.n	800895e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008946:	887b      	ldrh	r3, [r7, #2]
 8008948:	461a      	mov	r2, r3
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4806      	ldr	r0, [pc, #24]	; (8008968 <CDC_Transmit_FS+0x48>)
 800894e:	f7fe f891 	bl	8006a74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008952:	4805      	ldr	r0, [pc, #20]	; (8008968 <CDC_Transmit_FS+0x48>)
 8008954:	f7fe f8ce 	bl	8006af4 <USBD_CDC_TransmitPacket>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200003e4 	.word	0x200003e4

0800896c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800897e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2212      	movs	r2, #18
 80089a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20000134 	.word	0x20000134

080089b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2204      	movs	r2, #4
 80089c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089c6:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20000148 	.word	0x20000148

080089d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4907      	ldr	r1, [pc, #28]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089ee:	4808      	ldr	r0, [pc, #32]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089f0:	f7ff fb0e 	bl	8008010 <USBD_GetString>
 80089f4:	e004      	b.n	8008a00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4904      	ldr	r1, [pc, #16]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089fa:	4805      	ldr	r0, [pc, #20]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089fc:	f7ff fb08 	bl	8008010 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200016c0 	.word	0x200016c0
 8008a10:	0800c060 	.word	0x0800c060

08008a14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4904      	ldr	r1, [pc, #16]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a24:	4804      	ldr	r0, [pc, #16]	; (8008a38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a26:	f7ff faf3 	bl	8008010 <USBD_GetString>
  return USBD_StrDesc;
 8008a2a:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200016c0 	.word	0x200016c0
 8008a38:	0800c078 	.word	0x0800c078

08008a3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	221a      	movs	r2, #26
 8008a4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a4e:	f000 f843 	bl	8008ad8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a52:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	2000014c 	.word	0x2000014c

08008a60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a78:	f7ff faca 	bl	8008010 <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a84:	f7ff fac4 	bl	8008010 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200016c0 	.word	0x200016c0
 8008a98:	0800c08c 	.word	0x0800c08c

08008a9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	4907      	ldr	r1, [pc, #28]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ab2:	4808      	ldr	r0, [pc, #32]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab4:	f7ff faac 	bl	8008010 <USBD_GetString>
 8008ab8:	e004      	b.n	8008ac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4904      	ldr	r1, [pc, #16]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ac0:	f7ff faa6 	bl	8008010 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200016c0 	.word	0x200016c0
 8008ad4:	0800c098 	.word	0x0800c098

08008ad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <Get_SerialNum+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <Get_SerialNum+0x48>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <Get_SerialNum+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008afe:	2208      	movs	r2, #8
 8008b00:	4909      	ldr	r1, [pc, #36]	; (8008b28 <Get_SerialNum+0x50>)
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f814 	bl	8008b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b08:	2204      	movs	r2, #4
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <Get_SerialNum+0x54>)
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80f 	bl	8008b30 <IntToUnicode>
  }
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	1fff7a10 	.word	0x1fff7a10
 8008b20:	1fff7a14 	.word	0x1fff7a14
 8008b24:	1fff7a18 	.word	0x1fff7a18
 8008b28:	2000014e 	.word	0x2000014e
 8008b2c:	2000015e 	.word	0x2000015e

08008b30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e027      	b.n	8008b98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d80b      	bhi.n	8008b68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	0f1b      	lsrs	r3, r3, #28
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	440b      	add	r3, r1
 8008b60:	3230      	adds	r2, #48	; 0x30
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e00a      	b.n	8008b7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	440b      	add	r3, r1
 8008b78:	3237      	adds	r2, #55	; 0x37
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	3301      	adds	r3, #1
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	3301      	adds	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3d3      	bcc.n	8008b48 <IntToUnicode+0x18>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd0:	d13a      	bne.n	8008c48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	6313      	str	r3, [r2, #48]	; 0x30
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c00:	230a      	movs	r3, #10
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4812      	ldr	r0, [pc, #72]	; (8008c54 <HAL_PCD_MspInit+0xa4>)
 8008c0c:	f7f8 fec6 	bl	800199c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	6353      	str	r3, [r2, #52]	; 0x34
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c24:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	2043      	movs	r0, #67	; 0x43
 8008c3e:	f7f8 fe76 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c42:	2043      	movs	r0, #67	; 0x43
 8008c44:	f7f8 fe8f 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3728      	adds	r7, #40	; 0x28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40020000 	.word	0x40020000

08008c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fe f86f 	bl	8006d52 <USBD_LL_SetupStage>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f7fe f8a9 	bl	8006dfc <USBD_LL_DataOutStage>
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	334c      	adds	r3, #76	; 0x4c
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7fe f942 	bl	8006f62 <USBD_LL_DataInStage>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe fa76 	bl	80071e6 <USBD_LL_SOF>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d001      	beq.n	8008d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d16:	f7f8 faed 	bl	80012f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fa20 	bl	800716a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe f9c8 	bl	80070c6 <USBD_LL_Reset>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe fa1b 	bl	800718a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <HAL_PCD_SuspendCallback+0x48>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <HAL_PCD_SuspendCallback+0x48>)
 8008d7a:	f043 0306 	orr.w	r3, r3, #6
 8008d7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	e000ed00 	.word	0xe000ed00

08008d8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fa0b 	bl	80071b6 <USBD_LL_Resume>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fa63 	bl	800728a <USBD_LL_IsoOUTIncomplete>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fa1f 	bl	8007226 <USBD_LL_IsoINIncomplete>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fa75 	bl	80072ee <USBD_LL_DevConnected>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fa72 	bl	8007304 <USBD_LL_DevDisconnected>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d13c      	bne.n	8008eb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1e      	ldr	r2, [pc, #120]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e48:	4b1c      	ldr	r3, [pc, #112]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e50:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e52:	2204      	movs	r2, #4
 8008e54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e56:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e58:	2202      	movs	r2, #2
 8008e5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e5c:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e64:	2202      	movs	r2, #2
 8008e66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e68:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e88:	f7f9 fecb 	bl	8002c22 <HAL_PCD_Init>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e92:	f7f8 fa2f 	bl	80012f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e9a:	f7fb f922 	bl	80040e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e9e:	2240      	movs	r2, #64	; 0x40
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4806      	ldr	r0, [pc, #24]	; (8008ebc <USBD_LL_Init+0x94>)
 8008ea4:	f7fb f8d6 	bl	8004054 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ea8:	2280      	movs	r2, #128	; 0x80
 8008eaa:	2101      	movs	r1, #1
 8008eac:	4803      	ldr	r0, [pc, #12]	; (8008ebc <USBD_LL_Init+0x94>)
 8008eae:	f7fb f8d1 	bl	8004054 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200018c0 	.word	0x200018c0

08008ec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f9 ffc0 	bl	8002e5c <HAL_PCD_Start>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f942 	bl	800916c <USBD_Get_USB_Status>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	4603      	mov	r3, r0
 8008f06:	70fb      	strb	r3, [r7, #3]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70bb      	strb	r3, [r7, #2]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f1e:	78bb      	ldrb	r3, [r7, #2]
 8008f20:	883a      	ldrh	r2, [r7, #0]
 8008f22:	78f9      	ldrb	r1, [r7, #3]
 8008f24:	f7fa fc91 	bl	800384a <HAL_PCD_EP_Open>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f91c 	bl	800916c <USBD_Get_USB_Status>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fa fcda 	bl	800391a <HAL_PCD_EP_Close>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f8fd 	bl	800916c <USBD_Get_USB_Status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fa fdb2 	bl	8003b08 <HAL_PCD_EP_SetStall>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f8de 	bl	800916c <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fa fdf7 	bl	8003bd0 <HAL_PCD_EP_ClrStall>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f8bf 	bl	800916c <USBD_Get_USB_Status>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800900e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	da0b      	bge.n	8009030 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	333e      	adds	r3, #62	; 0x3e
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	e00b      	b.n	8009048 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	4613      	mov	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009046:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7fa fbc4 	bl	8003800 <HAL_PCD_SetAddress>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f874 	bl	800916c <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	460b      	mov	r3, r1
 80090a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090b0:	7af9      	ldrb	r1, [r7, #11]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f7fa fcdd 	bl	8003a74 <HAL_PCD_EP_Transmit>
 80090ba:	4603      	mov	r3, r0
 80090bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f853 	bl	800916c <USBD_Get_USB_Status>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	460b      	mov	r3, r1
 80090e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090f2:	7af9      	ldrb	r1, [r7, #11]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f7fa fc59 	bl	80039ae <HAL_PCD_EP_Receive>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f832 	bl	800916c <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800910c:	7dbb      	ldrb	r3, [r7, #22]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7fa fc89 	bl	8003a44 <HAL_PCD_EP_GetRxCount>
 8009132:	4603      	mov	r3, r0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009144:	4b03      	ldr	r3, [pc, #12]	; (8009154 <USBD_static_malloc+0x18>)
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20001dcc 	.word	0x20001dcc

08009158 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d817      	bhi.n	80091b0 <USBD_Get_USB_Status+0x44>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <USBD_Get_USB_Status+0x1c>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	08009199 	.word	0x08009199
 800918c:	0800919f 	.word	0x0800919f
 8009190:	080091a5 	.word	0x080091a5
 8009194:	080091ab 	.word	0x080091ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
    break;
 800919c:	e00b      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
    break;
 80091a2:	e008      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091a4:	2301      	movs	r3, #1
 80091a6:	73fb      	strb	r3, [r7, #15]
    break;
 80091a8:	e005      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091aa:	2303      	movs	r3, #3
 80091ac:	73fb      	strb	r3, [r7, #15]
    break;
 80091ae:	e002      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	bf00      	nop
  }
  return usb_status;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <__errno>:
 80091c4:	4b01      	ldr	r3, [pc, #4]	; (80091cc <__errno+0x8>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000168 	.word	0x20000168

080091d0 <__libc_init_array>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4d0d      	ldr	r5, [pc, #52]	; (8009208 <__libc_init_array+0x38>)
 80091d4:	4c0d      	ldr	r4, [pc, #52]	; (800920c <__libc_init_array+0x3c>)
 80091d6:	1b64      	subs	r4, r4, r5
 80091d8:	10a4      	asrs	r4, r4, #2
 80091da:	2600      	movs	r6, #0
 80091dc:	42a6      	cmp	r6, r4
 80091de:	d109      	bne.n	80091f4 <__libc_init_array+0x24>
 80091e0:	4d0b      	ldr	r5, [pc, #44]	; (8009210 <__libc_init_array+0x40>)
 80091e2:	4c0c      	ldr	r4, [pc, #48]	; (8009214 <__libc_init_array+0x44>)
 80091e4:	f002 ff04 	bl	800bff0 <_init>
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	2600      	movs	r6, #0
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d105      	bne.n	80091fe <__libc_init_array+0x2e>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f8:	4798      	blx	r3
 80091fa:	3601      	adds	r6, #1
 80091fc:	e7ee      	b.n	80091dc <__libc_init_array+0xc>
 80091fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009202:	4798      	blx	r3
 8009204:	3601      	adds	r6, #1
 8009206:	e7f2      	b.n	80091ee <__libc_init_array+0x1e>
 8009208:	0800c4a4 	.word	0x0800c4a4
 800920c:	0800c4a4 	.word	0x0800c4a4
 8009210:	0800c4a4 	.word	0x0800c4a4
 8009214:	0800c4a8 	.word	0x0800c4a8

08009218 <memset>:
 8009218:	4402      	add	r2, r0
 800921a:	4603      	mov	r3, r0
 800921c:	4293      	cmp	r3, r2
 800921e:	d100      	bne.n	8009222 <memset+0xa>
 8009220:	4770      	bx	lr
 8009222:	f803 1b01 	strb.w	r1, [r3], #1
 8009226:	e7f9      	b.n	800921c <memset+0x4>

08009228 <__cvt>:
 8009228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	ec55 4b10 	vmov	r4, r5, d0
 8009230:	2d00      	cmp	r5, #0
 8009232:	460e      	mov	r6, r1
 8009234:	4619      	mov	r1, r3
 8009236:	462b      	mov	r3, r5
 8009238:	bfbb      	ittet	lt
 800923a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800923e:	461d      	movlt	r5, r3
 8009240:	2300      	movge	r3, #0
 8009242:	232d      	movlt	r3, #45	; 0x2d
 8009244:	700b      	strb	r3, [r1, #0]
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800924c:	4691      	mov	r9, r2
 800924e:	f023 0820 	bic.w	r8, r3, #32
 8009252:	bfbc      	itt	lt
 8009254:	4622      	movlt	r2, r4
 8009256:	4614      	movlt	r4, r2
 8009258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800925c:	d005      	beq.n	800926a <__cvt+0x42>
 800925e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009262:	d100      	bne.n	8009266 <__cvt+0x3e>
 8009264:	3601      	adds	r6, #1
 8009266:	2102      	movs	r1, #2
 8009268:	e000      	b.n	800926c <__cvt+0x44>
 800926a:	2103      	movs	r1, #3
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	ab02      	add	r3, sp, #8
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	ec45 4b10 	vmov	d0, r4, r5
 8009278:	4653      	mov	r3, sl
 800927a:	4632      	mov	r2, r6
 800927c:	f000 fcec 	bl	8009c58 <_dtoa_r>
 8009280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009284:	4607      	mov	r7, r0
 8009286:	d102      	bne.n	800928e <__cvt+0x66>
 8009288:	f019 0f01 	tst.w	r9, #1
 800928c:	d022      	beq.n	80092d4 <__cvt+0xac>
 800928e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009292:	eb07 0906 	add.w	r9, r7, r6
 8009296:	d110      	bne.n	80092ba <__cvt+0x92>
 8009298:	783b      	ldrb	r3, [r7, #0]
 800929a:	2b30      	cmp	r3, #48	; 0x30
 800929c:	d10a      	bne.n	80092b4 <__cvt+0x8c>
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f7 fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 80092aa:	b918      	cbnz	r0, 80092b4 <__cvt+0x8c>
 80092ac:	f1c6 0601 	rsb	r6, r6, #1
 80092b0:	f8ca 6000 	str.w	r6, [sl]
 80092b4:	f8da 3000 	ldr.w	r3, [sl]
 80092b8:	4499      	add	r9, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80092c6:	b108      	cbz	r0, 80092cc <__cvt+0xa4>
 80092c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092cc:	2230      	movs	r2, #48	; 0x30
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	454b      	cmp	r3, r9
 80092d2:	d307      	bcc.n	80092e4 <__cvt+0xbc>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d8:	1bdb      	subs	r3, r3, r7
 80092da:	4638      	mov	r0, r7
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	b004      	add	sp, #16
 80092e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e4:	1c59      	adds	r1, r3, #1
 80092e6:	9103      	str	r1, [sp, #12]
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	e7f0      	b.n	80092ce <__cvt+0xa6>

080092ec <__exponent>:
 80092ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ee:	4603      	mov	r3, r0
 80092f0:	2900      	cmp	r1, #0
 80092f2:	bfb8      	it	lt
 80092f4:	4249      	neglt	r1, r1
 80092f6:	f803 2b02 	strb.w	r2, [r3], #2
 80092fa:	bfb4      	ite	lt
 80092fc:	222d      	movlt	r2, #45	; 0x2d
 80092fe:	222b      	movge	r2, #43	; 0x2b
 8009300:	2909      	cmp	r1, #9
 8009302:	7042      	strb	r2, [r0, #1]
 8009304:	dd2a      	ble.n	800935c <__exponent+0x70>
 8009306:	f10d 0407 	add.w	r4, sp, #7
 800930a:	46a4      	mov	ip, r4
 800930c:	270a      	movs	r7, #10
 800930e:	46a6      	mov	lr, r4
 8009310:	460a      	mov	r2, r1
 8009312:	fb91 f6f7 	sdiv	r6, r1, r7
 8009316:	fb07 1516 	mls	r5, r7, r6, r1
 800931a:	3530      	adds	r5, #48	; 0x30
 800931c:	2a63      	cmp	r2, #99	; 0x63
 800931e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009326:	4631      	mov	r1, r6
 8009328:	dcf1      	bgt.n	800930e <__exponent+0x22>
 800932a:	3130      	adds	r1, #48	; 0x30
 800932c:	f1ae 0502 	sub.w	r5, lr, #2
 8009330:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009334:	1c44      	adds	r4, r0, #1
 8009336:	4629      	mov	r1, r5
 8009338:	4561      	cmp	r1, ip
 800933a:	d30a      	bcc.n	8009352 <__exponent+0x66>
 800933c:	f10d 0209 	add.w	r2, sp, #9
 8009340:	eba2 020e 	sub.w	r2, r2, lr
 8009344:	4565      	cmp	r5, ip
 8009346:	bf88      	it	hi
 8009348:	2200      	movhi	r2, #0
 800934a:	4413      	add	r3, r2
 800934c:	1a18      	subs	r0, r3, r0
 800934e:	b003      	add	sp, #12
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009356:	f804 2f01 	strb.w	r2, [r4, #1]!
 800935a:	e7ed      	b.n	8009338 <__exponent+0x4c>
 800935c:	2330      	movs	r3, #48	; 0x30
 800935e:	3130      	adds	r1, #48	; 0x30
 8009360:	7083      	strb	r3, [r0, #2]
 8009362:	70c1      	strb	r1, [r0, #3]
 8009364:	1d03      	adds	r3, r0, #4
 8009366:	e7f1      	b.n	800934c <__exponent+0x60>

08009368 <_printf_float>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	ed2d 8b02 	vpush	{d8}
 8009370:	b08d      	sub	sp, #52	; 0x34
 8009372:	460c      	mov	r4, r1
 8009374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009378:	4616      	mov	r6, r2
 800937a:	461f      	mov	r7, r3
 800937c:	4605      	mov	r5, r0
 800937e:	f001 fa59 	bl	800a834 <_localeconv_r>
 8009382:	f8d0 a000 	ldr.w	sl, [r0]
 8009386:	4650      	mov	r0, sl
 8009388:	f7f6 ff2a 	bl	80001e0 <strlen>
 800938c:	2300      	movs	r3, #0
 800938e:	930a      	str	r3, [sp, #40]	; 0x28
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	9305      	str	r3, [sp, #20]
 8009394:	f8d8 3000 	ldr.w	r3, [r8]
 8009398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800939c:	3307      	adds	r3, #7
 800939e:	f023 0307 	bic.w	r3, r3, #7
 80093a2:	f103 0208 	add.w	r2, r3, #8
 80093a6:	f8c8 2000 	str.w	r2, [r8]
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80093c0:	ee08 0a10 	vmov	s16, r0
 80093c4:	4b9f      	ldr	r3, [pc, #636]	; (8009644 <_printf_float+0x2dc>)
 80093c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	f7f7 fbb5 	bl	8000b3c <__aeabi_dcmpun>
 80093d2:	bb88      	cbnz	r0, 8009438 <_printf_float+0xd0>
 80093d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d8:	4b9a      	ldr	r3, [pc, #616]	; (8009644 <_printf_float+0x2dc>)
 80093da:	f04f 32ff 	mov.w	r2, #4294967295
 80093de:	f7f7 fb8f 	bl	8000b00 <__aeabi_dcmple>
 80093e2:	bb48      	cbnz	r0, 8009438 <_printf_float+0xd0>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 fb7e 	bl	8000aec <__aeabi_dcmplt>
 80093f0:	b110      	cbz	r0, 80093f8 <_printf_float+0x90>
 80093f2:	232d      	movs	r3, #45	; 0x2d
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f8:	4b93      	ldr	r3, [pc, #588]	; (8009648 <_printf_float+0x2e0>)
 80093fa:	4894      	ldr	r0, [pc, #592]	; (800964c <_printf_float+0x2e4>)
 80093fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009400:	bf94      	ite	ls
 8009402:	4698      	movls	r8, r3
 8009404:	4680      	movhi	r8, r0
 8009406:	2303      	movs	r3, #3
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	f023 0204 	bic.w	r2, r3, #4
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	f04f 0900 	mov.w	r9, #0
 8009416:	9700      	str	r7, [sp, #0]
 8009418:	4633      	mov	r3, r6
 800941a:	aa0b      	add	r2, sp, #44	; 0x2c
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f9d8 	bl	80097d4 <_printf_common>
 8009424:	3001      	adds	r0, #1
 8009426:	f040 8090 	bne.w	800954a <_printf_float+0x1e2>
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	b00d      	add	sp, #52	; 0x34
 8009430:	ecbd 8b02 	vpop	{d8}
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f7 fb7c 	bl	8000b3c <__aeabi_dcmpun>
 8009444:	b140      	cbz	r0, 8009458 <_printf_float+0xf0>
 8009446:	464b      	mov	r3, r9
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfbc      	itt	lt
 800944c:	232d      	movlt	r3, #45	; 0x2d
 800944e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009452:	487f      	ldr	r0, [pc, #508]	; (8009650 <_printf_float+0x2e8>)
 8009454:	4b7f      	ldr	r3, [pc, #508]	; (8009654 <_printf_float+0x2ec>)
 8009456:	e7d1      	b.n	80093fc <_printf_float+0x94>
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800945e:	9206      	str	r2, [sp, #24]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	d13f      	bne.n	80094e4 <_printf_float+0x17c>
 8009464:	2306      	movs	r3, #6
 8009466:	6063      	str	r3, [r4, #4]
 8009468:	9b05      	ldr	r3, [sp, #20]
 800946a:	6861      	ldr	r1, [r4, #4]
 800946c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009470:	2300      	movs	r3, #0
 8009472:	9303      	str	r3, [sp, #12]
 8009474:	ab0a      	add	r3, sp, #40	; 0x28
 8009476:	e9cd b301 	strd	fp, r3, [sp, #4]
 800947a:	ab09      	add	r3, sp, #36	; 0x24
 800947c:	ec49 8b10 	vmov	d0, r8, r9
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	6022      	str	r2, [r4, #0]
 8009484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff fecd 	bl	8009228 <__cvt>
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009492:	2b47      	cmp	r3, #71	; 0x47
 8009494:	4680      	mov	r8, r0
 8009496:	d108      	bne.n	80094aa <_printf_float+0x142>
 8009498:	1cc8      	adds	r0, r1, #3
 800949a:	db02      	blt.n	80094a2 <_printf_float+0x13a>
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	4299      	cmp	r1, r3
 80094a0:	dd41      	ble.n	8009526 <_printf_float+0x1be>
 80094a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80094a6:	fa5f fb8b 	uxtb.w	fp, fp
 80094aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094ae:	d820      	bhi.n	80094f2 <_printf_float+0x18a>
 80094b0:	3901      	subs	r1, #1
 80094b2:	465a      	mov	r2, fp
 80094b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094b8:	9109      	str	r1, [sp, #36]	; 0x24
 80094ba:	f7ff ff17 	bl	80092ec <__exponent>
 80094be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c0:	1813      	adds	r3, r2, r0
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	4681      	mov	r9, r0
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	dc02      	bgt.n	80094d0 <_printf_float+0x168>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	07d2      	lsls	r2, r2, #31
 80094ce:	d501      	bpl.n	80094d4 <_printf_float+0x16c>
 80094d0:	3301      	adds	r3, #1
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d09c      	beq.n	8009416 <_printf_float+0xae>
 80094dc:	232d      	movs	r3, #45	; 0x2d
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e2:	e798      	b.n	8009416 <_printf_float+0xae>
 80094e4:	9a06      	ldr	r2, [sp, #24]
 80094e6:	2a47      	cmp	r2, #71	; 0x47
 80094e8:	d1be      	bne.n	8009468 <_printf_float+0x100>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1bc      	bne.n	8009468 <_printf_float+0x100>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e7b9      	b.n	8009466 <_printf_float+0xfe>
 80094f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094f6:	d118      	bne.n	800952a <_printf_float+0x1c2>
 80094f8:	2900      	cmp	r1, #0
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	dd0b      	ble.n	8009516 <_printf_float+0x1ae>
 80094fe:	6121      	str	r1, [r4, #16]
 8009500:	b913      	cbnz	r3, 8009508 <_printf_float+0x1a0>
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	07d0      	lsls	r0, r2, #31
 8009506:	d502      	bpl.n	800950e <_printf_float+0x1a6>
 8009508:	3301      	adds	r3, #1
 800950a:	440b      	add	r3, r1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	e7de      	b.n	80094d4 <_printf_float+0x16c>
 8009516:	b913      	cbnz	r3, 800951e <_printf_float+0x1b6>
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	07d2      	lsls	r2, r2, #31
 800951c:	d501      	bpl.n	8009522 <_printf_float+0x1ba>
 800951e:	3302      	adds	r3, #2
 8009520:	e7f4      	b.n	800950c <_printf_float+0x1a4>
 8009522:	2301      	movs	r3, #1
 8009524:	e7f2      	b.n	800950c <_printf_float+0x1a4>
 8009526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800952a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952c:	4299      	cmp	r1, r3
 800952e:	db05      	blt.n	800953c <_printf_float+0x1d4>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	6121      	str	r1, [r4, #16]
 8009534:	07d8      	lsls	r0, r3, #31
 8009536:	d5ea      	bpl.n	800950e <_printf_float+0x1a6>
 8009538:	1c4b      	adds	r3, r1, #1
 800953a:	e7e7      	b.n	800950c <_printf_float+0x1a4>
 800953c:	2900      	cmp	r1, #0
 800953e:	bfd4      	ite	le
 8009540:	f1c1 0202 	rsble	r2, r1, #2
 8009544:	2201      	movgt	r2, #1
 8009546:	4413      	add	r3, r2
 8009548:	e7e0      	b.n	800950c <_printf_float+0x1a4>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	055a      	lsls	r2, r3, #21
 800954e:	d407      	bmi.n	8009560 <_printf_float+0x1f8>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	4642      	mov	r2, r8
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	d12c      	bne.n	80095b8 <_printf_float+0x250>
 800955e:	e764      	b.n	800942a <_printf_float+0xc2>
 8009560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009564:	f240 80e0 	bls.w	8009728 <_printf_float+0x3c0>
 8009568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	f7f7 fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009574:	2800      	cmp	r0, #0
 8009576:	d034      	beq.n	80095e2 <_printf_float+0x27a>
 8009578:	4a37      	ldr	r2, [pc, #220]	; (8009658 <_printf_float+0x2f0>)
 800957a:	2301      	movs	r3, #1
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	f43f af51 	beq.w	800942a <_printf_float+0xc2>
 8009588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800958c:	429a      	cmp	r2, r3
 800958e:	db02      	blt.n	8009596 <_printf_float+0x22e>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	07d8      	lsls	r0, r3, #31
 8009594:	d510      	bpl.n	80095b8 <_printf_float+0x250>
 8009596:	ee18 3a10 	vmov	r3, s16
 800959a:	4652      	mov	r2, sl
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af41 	beq.w	800942a <_printf_float+0xc2>
 80095a8:	f04f 0800 	mov.w	r8, #0
 80095ac:	f104 091a 	add.w	r9, r4, #26
 80095b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4543      	cmp	r3, r8
 80095b6:	dc09      	bgt.n	80095cc <_printf_float+0x264>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	079b      	lsls	r3, r3, #30
 80095bc:	f100 8105 	bmi.w	80097ca <_printf_float+0x462>
 80095c0:	68e0      	ldr	r0, [r4, #12]
 80095c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c4:	4298      	cmp	r0, r3
 80095c6:	bfb8      	it	lt
 80095c8:	4618      	movlt	r0, r3
 80095ca:	e730      	b.n	800942e <_printf_float+0xc6>
 80095cc:	2301      	movs	r3, #1
 80095ce:	464a      	mov	r2, r9
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f af27 	beq.w	800942a <_printf_float+0xc2>
 80095dc:	f108 0801 	add.w	r8, r8, #1
 80095e0:	e7e6      	b.n	80095b0 <_printf_float+0x248>
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dc39      	bgt.n	800965c <_printf_float+0x2f4>
 80095e8:	4a1b      	ldr	r2, [pc, #108]	; (8009658 <_printf_float+0x2f0>)
 80095ea:	2301      	movs	r3, #1
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af19 	beq.w	800942a <_printf_float+0xc2>
 80095f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095fc:	4313      	orrs	r3, r2
 80095fe:	d102      	bne.n	8009606 <_printf_float+0x29e>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d5d8      	bpl.n	80095b8 <_printf_float+0x250>
 8009606:	ee18 3a10 	vmov	r3, s16
 800960a:	4652      	mov	r2, sl
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af09 	beq.w	800942a <_printf_float+0xc2>
 8009618:	f04f 0900 	mov.w	r9, #0
 800961c:	f104 0a1a 	add.w	sl, r4, #26
 8009620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009622:	425b      	negs	r3, r3
 8009624:	454b      	cmp	r3, r9
 8009626:	dc01      	bgt.n	800962c <_printf_float+0x2c4>
 8009628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962a:	e792      	b.n	8009552 <_printf_float+0x1ea>
 800962c:	2301      	movs	r3, #1
 800962e:	4652      	mov	r2, sl
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f aef7 	beq.w	800942a <_printf_float+0xc2>
 800963c:	f109 0901 	add.w	r9, r9, #1
 8009640:	e7ee      	b.n	8009620 <_printf_float+0x2b8>
 8009642:	bf00      	nop
 8009644:	7fefffff 	.word	0x7fefffff
 8009648:	0800c0c4 	.word	0x0800c0c4
 800964c:	0800c0c8 	.word	0x0800c0c8
 8009650:	0800c0d0 	.word	0x0800c0d0
 8009654:	0800c0cc 	.word	0x0800c0cc
 8009658:	0800c0d4 	.word	0x0800c0d4
 800965c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009660:	429a      	cmp	r2, r3
 8009662:	bfa8      	it	ge
 8009664:	461a      	movge	r2, r3
 8009666:	2a00      	cmp	r2, #0
 8009668:	4691      	mov	r9, r2
 800966a:	dc37      	bgt.n	80096dc <_printf_float+0x374>
 800966c:	f04f 0b00 	mov.w	fp, #0
 8009670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009674:	f104 021a 	add.w	r2, r4, #26
 8009678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	eba3 0309 	sub.w	r3, r3, r9
 8009680:	455b      	cmp	r3, fp
 8009682:	dc33      	bgt.n	80096ec <_printf_float+0x384>
 8009684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009688:	429a      	cmp	r2, r3
 800968a:	db3b      	blt.n	8009704 <_printf_float+0x39c>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07da      	lsls	r2, r3, #31
 8009690:	d438      	bmi.n	8009704 <_printf_float+0x39c>
 8009692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009698:	1a9a      	subs	r2, r3, r2
 800969a:	eba3 0901 	sub.w	r9, r3, r1
 800969e:	4591      	cmp	r9, r2
 80096a0:	bfa8      	it	ge
 80096a2:	4691      	movge	r9, r2
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	dc35      	bgt.n	8009716 <_printf_float+0x3ae>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b2:	f104 0a1a 	add.w	sl, r4, #26
 80096b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	eba3 0309 	sub.w	r3, r3, r9
 80096c0:	4543      	cmp	r3, r8
 80096c2:	f77f af79 	ble.w	80095b8 <_printf_float+0x250>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4631      	mov	r1, r6
 80096cc:	4628      	mov	r0, r5
 80096ce:	47b8      	blx	r7
 80096d0:	3001      	adds	r0, #1
 80096d2:	f43f aeaa 	beq.w	800942a <_printf_float+0xc2>
 80096d6:	f108 0801 	add.w	r8, r8, #1
 80096da:	e7ec      	b.n	80096b6 <_printf_float+0x34e>
 80096dc:	4613      	mov	r3, r2
 80096de:	4631      	mov	r1, r6
 80096e0:	4642      	mov	r2, r8
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	d1c0      	bne.n	800966c <_printf_float+0x304>
 80096ea:	e69e      	b.n	800942a <_printf_float+0xc2>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	9205      	str	r2, [sp, #20]
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f ae97 	beq.w	800942a <_printf_float+0xc2>
 80096fc:	9a05      	ldr	r2, [sp, #20]
 80096fe:	f10b 0b01 	add.w	fp, fp, #1
 8009702:	e7b9      	b.n	8009678 <_printf_float+0x310>
 8009704:	ee18 3a10 	vmov	r3, s16
 8009708:	4652      	mov	r2, sl
 800970a:	4631      	mov	r1, r6
 800970c:	4628      	mov	r0, r5
 800970e:	47b8      	blx	r7
 8009710:	3001      	adds	r0, #1
 8009712:	d1be      	bne.n	8009692 <_printf_float+0x32a>
 8009714:	e689      	b.n	800942a <_printf_float+0xc2>
 8009716:	9a05      	ldr	r2, [sp, #20]
 8009718:	464b      	mov	r3, r9
 800971a:	4442      	add	r2, r8
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	d1c1      	bne.n	80096aa <_printf_float+0x342>
 8009726:	e680      	b.n	800942a <_printf_float+0xc2>
 8009728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800972a:	2a01      	cmp	r2, #1
 800972c:	dc01      	bgt.n	8009732 <_printf_float+0x3ca>
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d538      	bpl.n	80097a4 <_printf_float+0x43c>
 8009732:	2301      	movs	r3, #1
 8009734:	4642      	mov	r2, r8
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	f43f ae74 	beq.w	800942a <_printf_float+0xc2>
 8009742:	ee18 3a10 	vmov	r3, s16
 8009746:	4652      	mov	r2, sl
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f ae6b 	beq.w	800942a <_printf_float+0xc2>
 8009754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009758:	2200      	movs	r2, #0
 800975a:	2300      	movs	r3, #0
 800975c:	f7f7 f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009760:	b9d8      	cbnz	r0, 800979a <_printf_float+0x432>
 8009762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009764:	f108 0201 	add.w	r2, r8, #1
 8009768:	3b01      	subs	r3, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d10e      	bne.n	8009792 <_printf_float+0x42a>
 8009774:	e659      	b.n	800942a <_printf_float+0xc2>
 8009776:	2301      	movs	r3, #1
 8009778:	4652      	mov	r2, sl
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae52 	beq.w	800942a <_printf_float+0xc2>
 8009786:	f108 0801 	add.w	r8, r8, #1
 800978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978c:	3b01      	subs	r3, #1
 800978e:	4543      	cmp	r3, r8
 8009790:	dcf1      	bgt.n	8009776 <_printf_float+0x40e>
 8009792:	464b      	mov	r3, r9
 8009794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009798:	e6dc      	b.n	8009554 <_printf_float+0x1ec>
 800979a:	f04f 0800 	mov.w	r8, #0
 800979e:	f104 0a1a 	add.w	sl, r4, #26
 80097a2:	e7f2      	b.n	800978a <_printf_float+0x422>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4642      	mov	r2, r8
 80097a8:	e7df      	b.n	800976a <_printf_float+0x402>
 80097aa:	2301      	movs	r3, #1
 80097ac:	464a      	mov	r2, r9
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b8      	blx	r7
 80097b4:	3001      	adds	r0, #1
 80097b6:	f43f ae38 	beq.w	800942a <_printf_float+0xc2>
 80097ba:	f108 0801 	add.w	r8, r8, #1
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c2:	1a5b      	subs	r3, r3, r1
 80097c4:	4543      	cmp	r3, r8
 80097c6:	dcf0      	bgt.n	80097aa <_printf_float+0x442>
 80097c8:	e6fa      	b.n	80095c0 <_printf_float+0x258>
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	f104 0919 	add.w	r9, r4, #25
 80097d2:	e7f4      	b.n	80097be <_printf_float+0x456>

080097d4 <_printf_common>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	4616      	mov	r6, r2
 80097da:	4699      	mov	r9, r3
 80097dc:	688a      	ldr	r2, [r1, #8]
 80097de:	690b      	ldr	r3, [r1, #16]
 80097e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bfb8      	it	lt
 80097e8:	4613      	movlt	r3, r2
 80097ea:	6033      	str	r3, [r6, #0]
 80097ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f0:	4607      	mov	r7, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	b10a      	cbz	r2, 80097fa <_printf_common+0x26>
 80097f6:	3301      	adds	r3, #1
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	0699      	lsls	r1, r3, #26
 80097fe:	bf42      	ittt	mi
 8009800:	6833      	ldrmi	r3, [r6, #0]
 8009802:	3302      	addmi	r3, #2
 8009804:	6033      	strmi	r3, [r6, #0]
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	f015 0506 	ands.w	r5, r5, #6
 800980c:	d106      	bne.n	800981c <_printf_common+0x48>
 800980e:	f104 0a19 	add.w	sl, r4, #25
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	6832      	ldr	r2, [r6, #0]
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	42ab      	cmp	r3, r5
 800981a:	dc26      	bgt.n	800986a <_printf_common+0x96>
 800981c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009820:	1e13      	subs	r3, r2, #0
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	2301      	movne	r3, #1
 8009828:	0692      	lsls	r2, r2, #26
 800982a:	d42b      	bmi.n	8009884 <_printf_common+0xb0>
 800982c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009830:	4649      	mov	r1, r9
 8009832:	4638      	mov	r0, r7
 8009834:	47c0      	blx	r8
 8009836:	3001      	adds	r0, #1
 8009838:	d01e      	beq.n	8009878 <_printf_common+0xa4>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	68e5      	ldr	r5, [r4, #12]
 800983e:	6832      	ldr	r2, [r6, #0]
 8009840:	f003 0306 	and.w	r3, r3, #6
 8009844:	2b04      	cmp	r3, #4
 8009846:	bf08      	it	eq
 8009848:	1aad      	subeq	r5, r5, r2
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	bf0c      	ite	eq
 8009850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009854:	2500      	movne	r5, #0
 8009856:	4293      	cmp	r3, r2
 8009858:	bfc4      	itt	gt
 800985a:	1a9b      	subgt	r3, r3, r2
 800985c:	18ed      	addgt	r5, r5, r3
 800985e:	2600      	movs	r6, #0
 8009860:	341a      	adds	r4, #26
 8009862:	42b5      	cmp	r5, r6
 8009864:	d11a      	bne.n	800989c <_printf_common+0xc8>
 8009866:	2000      	movs	r0, #0
 8009868:	e008      	b.n	800987c <_printf_common+0xa8>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4649      	mov	r1, r9
 8009870:	4638      	mov	r0, r7
 8009872:	47c0      	blx	r8
 8009874:	3001      	adds	r0, #1
 8009876:	d103      	bne.n	8009880 <_printf_common+0xac>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	3501      	adds	r5, #1
 8009882:	e7c6      	b.n	8009812 <_printf_common+0x3e>
 8009884:	18e1      	adds	r1, r4, r3
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	2030      	movs	r0, #48	; 0x30
 800988a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988e:	4422      	add	r2, r4
 8009890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009898:	3302      	adds	r3, #2
 800989a:	e7c7      	b.n	800982c <_printf_common+0x58>
 800989c:	2301      	movs	r3, #1
 800989e:	4622      	mov	r2, r4
 80098a0:	4649      	mov	r1, r9
 80098a2:	4638      	mov	r0, r7
 80098a4:	47c0      	blx	r8
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0e6      	beq.n	8009878 <_printf_common+0xa4>
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7d9      	b.n	8009862 <_printf_common+0x8e>
	...

080098b0 <_printf_i>:
 80098b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	7e0f      	ldrb	r7, [r1, #24]
 80098b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098b8:	2f78      	cmp	r7, #120	; 0x78
 80098ba:	4691      	mov	r9, r2
 80098bc:	4680      	mov	r8, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	469a      	mov	sl, r3
 80098c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098c6:	d807      	bhi.n	80098d8 <_printf_i+0x28>
 80098c8:	2f62      	cmp	r7, #98	; 0x62
 80098ca:	d80a      	bhi.n	80098e2 <_printf_i+0x32>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	f000 80d8 	beq.w	8009a82 <_printf_i+0x1d2>
 80098d2:	2f58      	cmp	r7, #88	; 0x58
 80098d4:	f000 80a3 	beq.w	8009a1e <_printf_i+0x16e>
 80098d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e0:	e03a      	b.n	8009958 <_printf_i+0xa8>
 80098e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e6:	2b15      	cmp	r3, #21
 80098e8:	d8f6      	bhi.n	80098d8 <_printf_i+0x28>
 80098ea:	a101      	add	r1, pc, #4	; (adr r1, 80098f0 <_printf_i+0x40>)
 80098ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098f0:	08009949 	.word	0x08009949
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	080098d9 	.word	0x080098d9
 80098fc:	080098d9 	.word	0x080098d9
 8009900:	080098d9 	.word	0x080098d9
 8009904:	080098d9 	.word	0x080098d9
 8009908:	0800995d 	.word	0x0800995d
 800990c:	080098d9 	.word	0x080098d9
 8009910:	080098d9 	.word	0x080098d9
 8009914:	080098d9 	.word	0x080098d9
 8009918:	080098d9 	.word	0x080098d9
 800991c:	08009a69 	.word	0x08009a69
 8009920:	0800998d 	.word	0x0800998d
 8009924:	08009a4b 	.word	0x08009a4b
 8009928:	080098d9 	.word	0x080098d9
 800992c:	080098d9 	.word	0x080098d9
 8009930:	08009a8b 	.word	0x08009a8b
 8009934:	080098d9 	.word	0x080098d9
 8009938:	0800998d 	.word	0x0800998d
 800993c:	080098d9 	.word	0x080098d9
 8009940:	080098d9 	.word	0x080098d9
 8009944:	08009a53 	.word	0x08009a53
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	1d1a      	adds	r2, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	602a      	str	r2, [r5, #0]
 8009950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009958:	2301      	movs	r3, #1
 800995a:	e0a3      	b.n	8009aa4 <_printf_i+0x1f4>
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	0606      	lsls	r6, r0, #24
 8009962:	f101 0304 	add.w	r3, r1, #4
 8009966:	d50a      	bpl.n	800997e <_printf_i+0xce>
 8009968:	680e      	ldr	r6, [r1, #0]
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	2e00      	cmp	r6, #0
 800996e:	da03      	bge.n	8009978 <_printf_i+0xc8>
 8009970:	232d      	movs	r3, #45	; 0x2d
 8009972:	4276      	negs	r6, r6
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009978:	485e      	ldr	r0, [pc, #376]	; (8009af4 <_printf_i+0x244>)
 800997a:	230a      	movs	r3, #10
 800997c:	e019      	b.n	80099b2 <_printf_i+0x102>
 800997e:	680e      	ldr	r6, [r1, #0]
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009986:	bf18      	it	ne
 8009988:	b236      	sxthne	r6, r6
 800998a:	e7ef      	b.n	800996c <_printf_i+0xbc>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	1d19      	adds	r1, r3, #4
 8009992:	6029      	str	r1, [r5, #0]
 8009994:	0601      	lsls	r1, r0, #24
 8009996:	d501      	bpl.n	800999c <_printf_i+0xec>
 8009998:	681e      	ldr	r6, [r3, #0]
 800999a:	e002      	b.n	80099a2 <_printf_i+0xf2>
 800999c:	0646      	lsls	r6, r0, #25
 800999e:	d5fb      	bpl.n	8009998 <_printf_i+0xe8>
 80099a0:	881e      	ldrh	r6, [r3, #0]
 80099a2:	4854      	ldr	r0, [pc, #336]	; (8009af4 <_printf_i+0x244>)
 80099a4:	2f6f      	cmp	r7, #111	; 0x6f
 80099a6:	bf0c      	ite	eq
 80099a8:	2308      	moveq	r3, #8
 80099aa:	230a      	movne	r3, #10
 80099ac:	2100      	movs	r1, #0
 80099ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099b2:	6865      	ldr	r5, [r4, #4]
 80099b4:	60a5      	str	r5, [r4, #8]
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	bfa2      	ittt	ge
 80099ba:	6821      	ldrge	r1, [r4, #0]
 80099bc:	f021 0104 	bicge.w	r1, r1, #4
 80099c0:	6021      	strge	r1, [r4, #0]
 80099c2:	b90e      	cbnz	r6, 80099c8 <_printf_i+0x118>
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	d04d      	beq.n	8009a64 <_printf_i+0x1b4>
 80099c8:	4615      	mov	r5, r2
 80099ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80099ce:	fb03 6711 	mls	r7, r3, r1, r6
 80099d2:	5dc7      	ldrb	r7, [r0, r7]
 80099d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099d8:	4637      	mov	r7, r6
 80099da:	42bb      	cmp	r3, r7
 80099dc:	460e      	mov	r6, r1
 80099de:	d9f4      	bls.n	80099ca <_printf_i+0x11a>
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d10b      	bne.n	80099fc <_printf_i+0x14c>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	07de      	lsls	r6, r3, #31
 80099e8:	d508      	bpl.n	80099fc <_printf_i+0x14c>
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	4299      	cmp	r1, r3
 80099f0:	bfde      	ittt	le
 80099f2:	2330      	movle	r3, #48	; 0x30
 80099f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099fc:	1b52      	subs	r2, r2, r5
 80099fe:	6122      	str	r2, [r4, #16]
 8009a00:	f8cd a000 	str.w	sl, [sp]
 8009a04:	464b      	mov	r3, r9
 8009a06:	aa03      	add	r2, sp, #12
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7ff fee2 	bl	80097d4 <_printf_common>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d14c      	bne.n	8009aae <_printf_i+0x1fe>
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	b004      	add	sp, #16
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	4835      	ldr	r0, [pc, #212]	; (8009af4 <_printf_i+0x244>)
 8009a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a24:	6829      	ldr	r1, [r5, #0]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a2c:	6029      	str	r1, [r5, #0]
 8009a2e:	061d      	lsls	r5, r3, #24
 8009a30:	d514      	bpl.n	8009a5c <_printf_i+0x1ac>
 8009a32:	07df      	lsls	r7, r3, #31
 8009a34:	bf44      	itt	mi
 8009a36:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3a:	6023      	strmi	r3, [r4, #0]
 8009a3c:	b91e      	cbnz	r6, 8009a46 <_printf_i+0x196>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	f023 0320 	bic.w	r3, r3, #32
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	2310      	movs	r3, #16
 8009a48:	e7b0      	b.n	80099ac <_printf_i+0xfc>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f043 0320 	orr.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	2378      	movs	r3, #120	; 0x78
 8009a54:	4828      	ldr	r0, [pc, #160]	; (8009af8 <_printf_i+0x248>)
 8009a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a5a:	e7e3      	b.n	8009a24 <_printf_i+0x174>
 8009a5c:	0659      	lsls	r1, r3, #25
 8009a5e:	bf48      	it	mi
 8009a60:	b2b6      	uxthmi	r6, r6
 8009a62:	e7e6      	b.n	8009a32 <_printf_i+0x182>
 8009a64:	4615      	mov	r5, r2
 8009a66:	e7bb      	b.n	80099e0 <_printf_i+0x130>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	6826      	ldr	r6, [r4, #0]
 8009a6c:	6961      	ldr	r1, [r4, #20]
 8009a6e:	1d18      	adds	r0, r3, #4
 8009a70:	6028      	str	r0, [r5, #0]
 8009a72:	0635      	lsls	r5, r6, #24
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	d501      	bpl.n	8009a7c <_printf_i+0x1cc>
 8009a78:	6019      	str	r1, [r3, #0]
 8009a7a:	e002      	b.n	8009a82 <_printf_i+0x1d2>
 8009a7c:	0670      	lsls	r0, r6, #25
 8009a7e:	d5fb      	bpl.n	8009a78 <_printf_i+0x1c8>
 8009a80:	8019      	strh	r1, [r3, #0]
 8009a82:	2300      	movs	r3, #0
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	4615      	mov	r5, r2
 8009a88:	e7ba      	b.n	8009a00 <_printf_i+0x150>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	681d      	ldr	r5, [r3, #0]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	2100      	movs	r1, #0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7f6 fbaa 	bl	80001f0 <memchr>
 8009a9c:	b108      	cbz	r0, 8009aa2 <_printf_i+0x1f2>
 8009a9e:	1b40      	subs	r0, r0, r5
 8009aa0:	6060      	str	r0, [r4, #4]
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aac:	e7a8      	b.n	8009a00 <_printf_i+0x150>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	47d0      	blx	sl
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d0ab      	beq.n	8009a14 <_printf_i+0x164>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	079b      	lsls	r3, r3, #30
 8009ac0:	d413      	bmi.n	8009aea <_printf_i+0x23a>
 8009ac2:	68e0      	ldr	r0, [r4, #12]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	bfb8      	it	lt
 8009aca:	4618      	movlt	r0, r3
 8009acc:	e7a4      	b.n	8009a18 <_printf_i+0x168>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d09b      	beq.n	8009a14 <_printf_i+0x164>
 8009adc:	3501      	adds	r5, #1
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	9903      	ldr	r1, [sp, #12]
 8009ae2:	1a5b      	subs	r3, r3, r1
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	dcf2      	bgt.n	8009ace <_printf_i+0x21e>
 8009ae8:	e7eb      	b.n	8009ac2 <_printf_i+0x212>
 8009aea:	2500      	movs	r5, #0
 8009aec:	f104 0619 	add.w	r6, r4, #25
 8009af0:	e7f5      	b.n	8009ade <_printf_i+0x22e>
 8009af2:	bf00      	nop
 8009af4:	0800c0d6 	.word	0x0800c0d6
 8009af8:	0800c0e7 	.word	0x0800c0e7

08009afc <siprintf>:
 8009afc:	b40e      	push	{r1, r2, r3}
 8009afe:	b500      	push	{lr}
 8009b00:	b09c      	sub	sp, #112	; 0x70
 8009b02:	ab1d      	add	r3, sp, #116	; 0x74
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	9006      	str	r0, [sp, #24]
 8009b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b0c:	4809      	ldr	r0, [pc, #36]	; (8009b34 <siprintf+0x38>)
 8009b0e:	9107      	str	r1, [sp, #28]
 8009b10:	9104      	str	r1, [sp, #16]
 8009b12:	4909      	ldr	r1, [pc, #36]	; (8009b38 <siprintf+0x3c>)
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	9105      	str	r1, [sp, #20]
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	a902      	add	r1, sp, #8
 8009b20:	f001 fb78 	bl	800b214 <_svfiprintf_r>
 8009b24:	9b02      	ldr	r3, [sp, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	b01c      	add	sp, #112	; 0x70
 8009b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b30:	b003      	add	sp, #12
 8009b32:	4770      	bx	lr
 8009b34:	20000168 	.word	0x20000168
 8009b38:	ffff0208 	.word	0xffff0208

08009b3c <quorem>:
 8009b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	6903      	ldr	r3, [r0, #16]
 8009b42:	690c      	ldr	r4, [r1, #16]
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	4607      	mov	r7, r0
 8009b48:	f2c0 8081 	blt.w	8009c4e <quorem+0x112>
 8009b4c:	3c01      	subs	r4, #1
 8009b4e:	f101 0814 	add.w	r8, r1, #20
 8009b52:	f100 0514 	add.w	r5, r0, #20
 8009b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b64:	3301      	adds	r3, #1
 8009b66:	429a      	cmp	r2, r3
 8009b68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b74:	d331      	bcc.n	8009bda <quorem+0x9e>
 8009b76:	f04f 0e00 	mov.w	lr, #0
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	46ac      	mov	ip, r5
 8009b7e:	46f2      	mov	sl, lr
 8009b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b84:	b293      	uxth	r3, r2
 8009b86:	fb06 e303 	mla	r3, r6, r3, lr
 8009b8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	ebaa 0303 	sub.w	r3, sl, r3
 8009b94:	f8dc a000 	ldr.w	sl, [ip]
 8009b98:	0c12      	lsrs	r2, r2, #16
 8009b9a:	fa13 f38a 	uxtah	r3, r3, sl
 8009b9e:	fb06 e202 	mla	r2, r6, r2, lr
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	9b00      	ldr	r3, [sp, #0]
 8009ba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009baa:	b292      	uxth	r2, r2
 8009bac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bb8:	4581      	cmp	r9, r0
 8009bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bbe:	f84c 3b04 	str.w	r3, [ip], #4
 8009bc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bc6:	d2db      	bcs.n	8009b80 <quorem+0x44>
 8009bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bcc:	b92b      	cbnz	r3, 8009bda <quorem+0x9e>
 8009bce:	9b01      	ldr	r3, [sp, #4]
 8009bd0:	3b04      	subs	r3, #4
 8009bd2:	429d      	cmp	r5, r3
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	d32e      	bcc.n	8009c36 <quorem+0xfa>
 8009bd8:	613c      	str	r4, [r7, #16]
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f001 f8c6 	bl	800ad6c <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	db24      	blt.n	8009c2e <quorem+0xf2>
 8009be4:	3601      	adds	r6, #1
 8009be6:	4628      	mov	r0, r5
 8009be8:	f04f 0c00 	mov.w	ip, #0
 8009bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8009bf4:	b293      	uxth	r3, r2
 8009bf6:	ebac 0303 	sub.w	r3, ip, r3
 8009bfa:	0c12      	lsrs	r2, r2, #16
 8009bfc:	fa13 f38e 	uxtah	r3, r3, lr
 8009c00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c0e:	45c1      	cmp	r9, r8
 8009c10:	f840 3b04 	str.w	r3, [r0], #4
 8009c14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c18:	d2e8      	bcs.n	8009bec <quorem+0xb0>
 8009c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c22:	b922      	cbnz	r2, 8009c2e <quorem+0xf2>
 8009c24:	3b04      	subs	r3, #4
 8009c26:	429d      	cmp	r5, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	d30a      	bcc.n	8009c42 <quorem+0x106>
 8009c2c:	613c      	str	r4, [r7, #16]
 8009c2e:	4630      	mov	r0, r6
 8009c30:	b003      	add	sp, #12
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c36:	6812      	ldr	r2, [r2, #0]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d1cc      	bne.n	8009bd8 <quorem+0x9c>
 8009c3e:	3c01      	subs	r4, #1
 8009c40:	e7c7      	b.n	8009bd2 <quorem+0x96>
 8009c42:	6812      	ldr	r2, [r2, #0]
 8009c44:	3b04      	subs	r3, #4
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	d1f0      	bne.n	8009c2c <quorem+0xf0>
 8009c4a:	3c01      	subs	r4, #1
 8009c4c:	e7eb      	b.n	8009c26 <quorem+0xea>
 8009c4e:	2000      	movs	r0, #0
 8009c50:	e7ee      	b.n	8009c30 <quorem+0xf4>
 8009c52:	0000      	movs	r0, r0
 8009c54:	0000      	movs	r0, r0
	...

08009c58 <_dtoa_r>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b04 	vpush	{d8-d9}
 8009c60:	ec57 6b10 	vmov	r6, r7, d0
 8009c64:	b093      	sub	sp, #76	; 0x4c
 8009c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c6c:	9106      	str	r1, [sp, #24]
 8009c6e:	ee10 aa10 	vmov	sl, s0
 8009c72:	4604      	mov	r4, r0
 8009c74:	9209      	str	r2, [sp, #36]	; 0x24
 8009c76:	930c      	str	r3, [sp, #48]	; 0x30
 8009c78:	46bb      	mov	fp, r7
 8009c7a:	b975      	cbnz	r5, 8009c9a <_dtoa_r+0x42>
 8009c7c:	2010      	movs	r0, #16
 8009c7e:	f000 fddd 	bl	800a83c <malloc>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6260      	str	r0, [r4, #36]	; 0x24
 8009c86:	b920      	cbnz	r0, 8009c92 <_dtoa_r+0x3a>
 8009c88:	4ba7      	ldr	r3, [pc, #668]	; (8009f28 <_dtoa_r+0x2d0>)
 8009c8a:	21ea      	movs	r1, #234	; 0xea
 8009c8c:	48a7      	ldr	r0, [pc, #668]	; (8009f2c <_dtoa_r+0x2d4>)
 8009c8e:	f001 fbd1 	bl	800b434 <__assert_func>
 8009c92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c96:	6005      	str	r5, [r0, #0]
 8009c98:	60c5      	str	r5, [r0, #12]
 8009c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c9c:	6819      	ldr	r1, [r3, #0]
 8009c9e:	b151      	cbz	r1, 8009cb6 <_dtoa_r+0x5e>
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	604a      	str	r2, [r1, #4]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4093      	lsls	r3, r2
 8009ca8:	608b      	str	r3, [r1, #8]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fe1c 	bl	800a8e8 <_Bfree>
 8009cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	1e3b      	subs	r3, r7, #0
 8009cb8:	bfaa      	itet	ge
 8009cba:	2300      	movge	r3, #0
 8009cbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009cc0:	f8c8 3000 	strge.w	r3, [r8]
 8009cc4:	4b9a      	ldr	r3, [pc, #616]	; (8009f30 <_dtoa_r+0x2d8>)
 8009cc6:	bfbc      	itt	lt
 8009cc8:	2201      	movlt	r2, #1
 8009cca:	f8c8 2000 	strlt.w	r2, [r8]
 8009cce:	ea33 030b 	bics.w	r3, r3, fp
 8009cd2:	d11b      	bne.n	8009d0c <_dtoa_r+0xb4>
 8009cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce0:	4333      	orrs	r3, r6
 8009ce2:	f000 8592 	beq.w	800a80a <_dtoa_r+0xbb2>
 8009ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce8:	b963      	cbnz	r3, 8009d04 <_dtoa_r+0xac>
 8009cea:	4b92      	ldr	r3, [pc, #584]	; (8009f34 <_dtoa_r+0x2dc>)
 8009cec:	e022      	b.n	8009d34 <_dtoa_r+0xdc>
 8009cee:	4b92      	ldr	r3, [pc, #584]	; (8009f38 <_dtoa_r+0x2e0>)
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	9801      	ldr	r0, [sp, #4]
 8009cfa:	b013      	add	sp, #76	; 0x4c
 8009cfc:	ecbd 8b04 	vpop	{d8-d9}
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	4b8b      	ldr	r3, [pc, #556]	; (8009f34 <_dtoa_r+0x2dc>)
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	e7f3      	b.n	8009cf4 <_dtoa_r+0x9c>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	f7f6 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d18:	ec4b ab19 	vmov	d9, sl, fp
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	b158      	cbz	r0, 8009d38 <_dtoa_r+0xe0>
 8009d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d22:	2301      	movs	r3, #1
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 856b 	beq.w	800a804 <_dtoa_r+0xbac>
 8009d2e:	4883      	ldr	r0, [pc, #524]	; (8009f3c <_dtoa_r+0x2e4>)
 8009d30:	6018      	str	r0, [r3, #0]
 8009d32:	1e43      	subs	r3, r0, #1
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	e7df      	b.n	8009cf8 <_dtoa_r+0xa0>
 8009d38:	ec4b ab10 	vmov	d0, sl, fp
 8009d3c:	aa10      	add	r2, sp, #64	; 0x40
 8009d3e:	a911      	add	r1, sp, #68	; 0x44
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 f8b9 	bl	800aeb8 <__d2b>
 8009d46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d4a:	ee08 0a10 	vmov	s16, r0
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	f000 8084 	beq.w	8009e5c <_dtoa_r+0x204>
 8009d54:	ee19 3a90 	vmov	r3, s19
 8009d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d60:	4656      	mov	r6, sl
 8009d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d6e:	4b74      	ldr	r3, [pc, #464]	; (8009f40 <_dtoa_r+0x2e8>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	4630      	mov	r0, r6
 8009d74:	4639      	mov	r1, r7
 8009d76:	f7f6 fa8f 	bl	8000298 <__aeabi_dsub>
 8009d7a:	a365      	add	r3, pc, #404	; (adr r3, 8009f10 <_dtoa_r+0x2b8>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fc42 	bl	8000608 <__aeabi_dmul>
 8009d84:	a364      	add	r3, pc, #400	; (adr r3, 8009f18 <_dtoa_r+0x2c0>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fa87 	bl	800029c <__adddf3>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	4628      	mov	r0, r5
 8009d92:	460f      	mov	r7, r1
 8009d94:	f7f6 fbce 	bl	8000534 <__aeabi_i2d>
 8009d98:	a361      	add	r3, pc, #388	; (adr r3, 8009f20 <_dtoa_r+0x2c8>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fc33 	bl	8000608 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fa77 	bl	800029c <__adddf3>
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	f7f6 fed9 	bl	8000b68 <__aeabi_d2iz>
 8009db6:	2200      	movs	r2, #0
 8009db8:	9000      	str	r0, [sp, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fe94 	bl	8000aec <__aeabi_dcmplt>
 8009dc4:	b150      	cbz	r0, 8009ddc <_dtoa_r+0x184>
 8009dc6:	9800      	ldr	r0, [sp, #0]
 8009dc8:	f7f6 fbb4 	bl	8000534 <__aeabi_i2d>
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	f7f6 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dd4:	b910      	cbnz	r0, 8009ddc <_dtoa_r+0x184>
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2b16      	cmp	r3, #22
 8009de0:	d85a      	bhi.n	8009e98 <_dtoa_r+0x240>
 8009de2:	9a00      	ldr	r2, [sp, #0]
 8009de4:	4b57      	ldr	r3, [pc, #348]	; (8009f44 <_dtoa_r+0x2ec>)
 8009de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	ec51 0b19 	vmov	r0, r1, d9
 8009df2:	f7f6 fe7b 	bl	8000aec <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d050      	beq.n	8009e9c <_dtoa_r+0x244>
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	2300      	movs	r3, #0
 8009e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e06:	1b5d      	subs	r5, r3, r5
 8009e08:	1e6b      	subs	r3, r5, #1
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	bf45      	ittet	mi
 8009e0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e12:	9304      	strmi	r3, [sp, #16]
 8009e14:	2300      	movpl	r3, #0
 8009e16:	2300      	movmi	r3, #0
 8009e18:	bf4c      	ite	mi
 8009e1a:	9305      	strmi	r3, [sp, #20]
 8009e1c:	9304      	strpl	r3, [sp, #16]
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	db3d      	blt.n	8009ea0 <_dtoa_r+0x248>
 8009e24:	9b05      	ldr	r3, [sp, #20]
 8009e26:	9a00      	ldr	r2, [sp, #0]
 8009e28:	920a      	str	r2, [sp, #40]	; 0x28
 8009e2a:	4413      	add	r3, r2
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	9b06      	ldr	r3, [sp, #24]
 8009e34:	2b09      	cmp	r3, #9
 8009e36:	f200 8089 	bhi.w	8009f4c <_dtoa_r+0x2f4>
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	bfc4      	itt	gt
 8009e3e:	3b04      	subgt	r3, #4
 8009e40:	9306      	strgt	r3, [sp, #24]
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	f1a3 0302 	sub.w	r3, r3, #2
 8009e48:	bfcc      	ite	gt
 8009e4a:	2500      	movgt	r5, #0
 8009e4c:	2501      	movle	r5, #1
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	f200 8087 	bhi.w	8009f62 <_dtoa_r+0x30a>
 8009e54:	e8df f003 	tbb	[pc, r3]
 8009e58:	59383a2d 	.word	0x59383a2d
 8009e5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e60:	441d      	add	r5, r3
 8009e62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e66:	2b20      	cmp	r3, #32
 8009e68:	bfc1      	itttt	gt
 8009e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e72:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e7a:	bfda      	itte	le
 8009e7c:	f1c3 0320 	rsble	r3, r3, #32
 8009e80:	fa06 f003 	lslle.w	r0, r6, r3
 8009e84:	4318      	orrgt	r0, r3
 8009e86:	f7f6 fb45 	bl	8000514 <__aeabi_ui2d>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e92:	3d01      	subs	r5, #1
 8009e94:	930e      	str	r3, [sp, #56]	; 0x38
 8009e96:	e76a      	b.n	8009d6e <_dtoa_r+0x116>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7b2      	b.n	8009e02 <_dtoa_r+0x1aa>
 8009e9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e9e:	e7b1      	b.n	8009e04 <_dtoa_r+0x1ac>
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	9a00      	ldr	r2, [sp, #0]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	4253      	negs	r3, r2
 8009eaa:	9307      	str	r3, [sp, #28]
 8009eac:	2300      	movs	r3, #0
 8009eae:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb0:	e7bf      	b.n	8009e32 <_dtoa_r+0x1da>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	9308      	str	r3, [sp, #32]
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	dc55      	bgt.n	8009f68 <_dtoa_r+0x310>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec6:	e00c      	b.n	8009ee2 <_dtoa_r+0x28a>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7f3      	b.n	8009eb4 <_dtoa_r+0x25c>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	9308      	str	r3, [sp, #32]
 8009ed2:	9b00      	ldr	r3, [sp, #0]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	9302      	str	r3, [sp, #8]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	bfb8      	it	lt
 8009ee0:	2301      	movlt	r3, #1
 8009ee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	6042      	str	r2, [r0, #4]
 8009ee8:	2204      	movs	r2, #4
 8009eea:	f102 0614 	add.w	r6, r2, #20
 8009eee:	429e      	cmp	r6, r3
 8009ef0:	6841      	ldr	r1, [r0, #4]
 8009ef2:	d93d      	bls.n	8009f70 <_dtoa_r+0x318>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 fcb7 	bl	800a868 <_Balloc>
 8009efa:	9001      	str	r0, [sp, #4]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d13b      	bne.n	8009f78 <_dtoa_r+0x320>
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <_dtoa_r+0x2f0>)
 8009f02:	4602      	mov	r2, r0
 8009f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f08:	e6c0      	b.n	8009c8c <_dtoa_r+0x34>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e7df      	b.n	8009ece <_dtoa_r+0x276>
 8009f0e:	bf00      	nop
 8009f10:	636f4361 	.word	0x636f4361
 8009f14:	3fd287a7 	.word	0x3fd287a7
 8009f18:	8b60c8b3 	.word	0x8b60c8b3
 8009f1c:	3fc68a28 	.word	0x3fc68a28
 8009f20:	509f79fb 	.word	0x509f79fb
 8009f24:	3fd34413 	.word	0x3fd34413
 8009f28:	0800c105 	.word	0x0800c105
 8009f2c:	0800c11c 	.word	0x0800c11c
 8009f30:	7ff00000 	.word	0x7ff00000
 8009f34:	0800c101 	.word	0x0800c101
 8009f38:	0800c0f8 	.word	0x0800c0f8
 8009f3c:	0800c0d5 	.word	0x0800c0d5
 8009f40:	3ff80000 	.word	0x3ff80000
 8009f44:	0800c210 	.word	0x0800c210
 8009f48:	0800c177 	.word	0x0800c177
 8009f4c:	2501      	movs	r5, #1
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9306      	str	r3, [sp, #24]
 8009f52:	9508      	str	r5, [sp, #32]
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2312      	movs	r3, #18
 8009f60:	e7b0      	b.n	8009ec4 <_dtoa_r+0x26c>
 8009f62:	2301      	movs	r3, #1
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	e7f5      	b.n	8009f54 <_dtoa_r+0x2fc>
 8009f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f6e:	e7b8      	b.n	8009ee2 <_dtoa_r+0x28a>
 8009f70:	3101      	adds	r1, #1
 8009f72:	6041      	str	r1, [r0, #4]
 8009f74:	0052      	lsls	r2, r2, #1
 8009f76:	e7b8      	b.n	8009eea <_dtoa_r+0x292>
 8009f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	2b0e      	cmp	r3, #14
 8009f82:	f200 809d 	bhi.w	800a0c0 <_dtoa_r+0x468>
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	f000 809a 	beq.w	800a0c0 <_dtoa_r+0x468>
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dd32      	ble.n	8009ff8 <_dtoa_r+0x3a0>
 8009f92:	4ab7      	ldr	r2, [pc, #732]	; (800a270 <_dtoa_r+0x618>)
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fa0:	9b00      	ldr	r3, [sp, #0]
 8009fa2:	05d8      	lsls	r0, r3, #23
 8009fa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009fa8:	d516      	bpl.n	8009fd8 <_dtoa_r+0x380>
 8009faa:	4bb2      	ldr	r3, [pc, #712]	; (800a274 <_dtoa_r+0x61c>)
 8009fac:	ec51 0b19 	vmov	r0, r1, d9
 8009fb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fb4:	f7f6 fc52 	bl	800085c <__aeabi_ddiv>
 8009fb8:	f007 070f 	and.w	r7, r7, #15
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	468b      	mov	fp, r1
 8009fc0:	2503      	movs	r5, #3
 8009fc2:	4eac      	ldr	r6, [pc, #688]	; (800a274 <_dtoa_r+0x61c>)
 8009fc4:	b957      	cbnz	r7, 8009fdc <_dtoa_r+0x384>
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	464b      	mov	r3, r9
 8009fca:	4650      	mov	r0, sl
 8009fcc:	4659      	mov	r1, fp
 8009fce:	f7f6 fc45 	bl	800085c <__aeabi_ddiv>
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	e028      	b.n	800a02a <_dtoa_r+0x3d2>
 8009fd8:	2502      	movs	r5, #2
 8009fda:	e7f2      	b.n	8009fc2 <_dtoa_r+0x36a>
 8009fdc:	07f9      	lsls	r1, r7, #31
 8009fde:	d508      	bpl.n	8009ff2 <_dtoa_r+0x39a>
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fe8:	f7f6 fb0e 	bl	8000608 <__aeabi_dmul>
 8009fec:	3501      	adds	r5, #1
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	107f      	asrs	r7, r7, #1
 8009ff4:	3608      	adds	r6, #8
 8009ff6:	e7e5      	b.n	8009fc4 <_dtoa_r+0x36c>
 8009ff8:	f000 809b 	beq.w	800a132 <_dtoa_r+0x4da>
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	4f9d      	ldr	r7, [pc, #628]	; (800a274 <_dtoa_r+0x61c>)
 800a000:	425e      	negs	r6, r3
 800a002:	4b9b      	ldr	r3, [pc, #620]	; (800a270 <_dtoa_r+0x618>)
 800a004:	f006 020f 	and.w	r2, r6, #15
 800a008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	ec51 0b19 	vmov	r0, r1, d9
 800a014:	f7f6 faf8 	bl	8000608 <__aeabi_dmul>
 800a018:	1136      	asrs	r6, r6, #4
 800a01a:	4682      	mov	sl, r0
 800a01c:	468b      	mov	fp, r1
 800a01e:	2300      	movs	r3, #0
 800a020:	2502      	movs	r5, #2
 800a022:	2e00      	cmp	r6, #0
 800a024:	d17a      	bne.n	800a11c <_dtoa_r+0x4c4>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1d3      	bne.n	8009fd2 <_dtoa_r+0x37a>
 800a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8082 	beq.w	800a136 <_dtoa_r+0x4de>
 800a032:	4b91      	ldr	r3, [pc, #580]	; (800a278 <_dtoa_r+0x620>)
 800a034:	2200      	movs	r2, #0
 800a036:	4650      	mov	r0, sl
 800a038:	4659      	mov	r1, fp
 800a03a:	f7f6 fd57 	bl	8000aec <__aeabi_dcmplt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d079      	beq.n	800a136 <_dtoa_r+0x4de>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d076      	beq.n	800a136 <_dtoa_r+0x4de>
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd36      	ble.n	800a0bc <_dtoa_r+0x464>
 800a04e:	9b00      	ldr	r3, [sp, #0]
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	1e5f      	subs	r7, r3, #1
 800a056:	2200      	movs	r2, #0
 800a058:	4b88      	ldr	r3, [pc, #544]	; (800a27c <_dtoa_r+0x624>)
 800a05a:	f7f6 fad5 	bl	8000608 <__aeabi_dmul>
 800a05e:	9e02      	ldr	r6, [sp, #8]
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	3501      	adds	r5, #1
 800a066:	4628      	mov	r0, r5
 800a068:	f7f6 fa64 	bl	8000534 <__aeabi_i2d>
 800a06c:	4652      	mov	r2, sl
 800a06e:	465b      	mov	r3, fp
 800a070:	f7f6 faca 	bl	8000608 <__aeabi_dmul>
 800a074:	4b82      	ldr	r3, [pc, #520]	; (800a280 <_dtoa_r+0x628>)
 800a076:	2200      	movs	r2, #0
 800a078:	f7f6 f910 	bl	800029c <__adddf3>
 800a07c:	46d0      	mov	r8, sl
 800a07e:	46d9      	mov	r9, fp
 800a080:	4682      	mov	sl, r0
 800a082:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a086:	2e00      	cmp	r6, #0
 800a088:	d158      	bne.n	800a13c <_dtoa_r+0x4e4>
 800a08a:	4b7e      	ldr	r3, [pc, #504]	; (800a284 <_dtoa_r+0x62c>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 f901 	bl	8000298 <__aeabi_dsub>
 800a096:	4652      	mov	r2, sl
 800a098:	465b      	mov	r3, fp
 800a09a:	4680      	mov	r8, r0
 800a09c:	4689      	mov	r9, r1
 800a09e:	f7f6 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f040 8295 	bne.w	800a5d2 <_dtoa_r+0x97a>
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	f7f6 fd1b 	bl	8000aec <__aeabi_dcmplt>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f040 8289 	bne.w	800a5ce <_dtoa_r+0x976>
 800a0bc:	ec5b ab19 	vmov	sl, fp, d9
 800a0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f2c0 8148 	blt.w	800a358 <_dtoa_r+0x700>
 800a0c8:	9a00      	ldr	r2, [sp, #0]
 800a0ca:	2a0e      	cmp	r2, #14
 800a0cc:	f300 8144 	bgt.w	800a358 <_dtoa_r+0x700>
 800a0d0:	4b67      	ldr	r3, [pc, #412]	; (800a270 <_dtoa_r+0x618>)
 800a0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f280 80d5 	bge.w	800a28c <_dtoa_r+0x634>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f300 80d1 	bgt.w	800a28c <_dtoa_r+0x634>
 800a0ea:	f040 826f 	bne.w	800a5cc <_dtoa_r+0x974>
 800a0ee:	4b65      	ldr	r3, [pc, #404]	; (800a284 <_dtoa_r+0x62c>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 fa87 	bl	8000608 <__aeabi_dmul>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	f7f6 fd09 	bl	8000b14 <__aeabi_dcmpge>
 800a102:	9e03      	ldr	r6, [sp, #12]
 800a104:	4637      	mov	r7, r6
 800a106:	2800      	cmp	r0, #0
 800a108:	f040 8245 	bne.w	800a596 <_dtoa_r+0x93e>
 800a10c:	9d01      	ldr	r5, [sp, #4]
 800a10e:	2331      	movs	r3, #49	; 0x31
 800a110:	f805 3b01 	strb.w	r3, [r5], #1
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	e240      	b.n	800a59e <_dtoa_r+0x946>
 800a11c:	07f2      	lsls	r2, r6, #31
 800a11e:	d505      	bpl.n	800a12c <_dtoa_r+0x4d4>
 800a120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a124:	f7f6 fa70 	bl	8000608 <__aeabi_dmul>
 800a128:	3501      	adds	r5, #1
 800a12a:	2301      	movs	r3, #1
 800a12c:	1076      	asrs	r6, r6, #1
 800a12e:	3708      	adds	r7, #8
 800a130:	e777      	b.n	800a022 <_dtoa_r+0x3ca>
 800a132:	2502      	movs	r5, #2
 800a134:	e779      	b.n	800a02a <_dtoa_r+0x3d2>
 800a136:	9f00      	ldr	r7, [sp, #0]
 800a138:	9e03      	ldr	r6, [sp, #12]
 800a13a:	e794      	b.n	800a066 <_dtoa_r+0x40e>
 800a13c:	9901      	ldr	r1, [sp, #4]
 800a13e:	4b4c      	ldr	r3, [pc, #304]	; (800a270 <_dtoa_r+0x618>)
 800a140:	4431      	add	r1, r6
 800a142:	910d      	str	r1, [sp, #52]	; 0x34
 800a144:	9908      	ldr	r1, [sp, #32]
 800a146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a14a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a14e:	2900      	cmp	r1, #0
 800a150:	d043      	beq.n	800a1da <_dtoa_r+0x582>
 800a152:	494d      	ldr	r1, [pc, #308]	; (800a288 <_dtoa_r+0x630>)
 800a154:	2000      	movs	r0, #0
 800a156:	f7f6 fb81 	bl	800085c <__aeabi_ddiv>
 800a15a:	4652      	mov	r2, sl
 800a15c:	465b      	mov	r3, fp
 800a15e:	f7f6 f89b 	bl	8000298 <__aeabi_dsub>
 800a162:	9d01      	ldr	r5, [sp, #4]
 800a164:	4682      	mov	sl, r0
 800a166:	468b      	mov	fp, r1
 800a168:	4649      	mov	r1, r9
 800a16a:	4640      	mov	r0, r8
 800a16c:	f7f6 fcfc 	bl	8000b68 <__aeabi_d2iz>
 800a170:	4606      	mov	r6, r0
 800a172:	f7f6 f9df 	bl	8000534 <__aeabi_i2d>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 f88b 	bl	8000298 <__aeabi_dsub>
 800a182:	3630      	adds	r6, #48	; 0x30
 800a184:	f805 6b01 	strb.w	r6, [r5], #1
 800a188:	4652      	mov	r2, sl
 800a18a:	465b      	mov	r3, fp
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	f7f6 fcac 	bl	8000aec <__aeabi_dcmplt>
 800a194:	2800      	cmp	r0, #0
 800a196:	d163      	bne.n	800a260 <_dtoa_r+0x608>
 800a198:	4642      	mov	r2, r8
 800a19a:	464b      	mov	r3, r9
 800a19c:	4936      	ldr	r1, [pc, #216]	; (800a278 <_dtoa_r+0x620>)
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f7f6 f87a 	bl	8000298 <__aeabi_dsub>
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	f7f6 fca0 	bl	8000aec <__aeabi_dcmplt>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f040 80b5 	bne.w	800a31c <_dtoa_r+0x6c4>
 800a1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	d081      	beq.n	800a0bc <_dtoa_r+0x464>
 800a1b8:	4b30      	ldr	r3, [pc, #192]	; (800a27c <_dtoa_r+0x624>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4650      	mov	r0, sl
 800a1be:	4659      	mov	r1, fp
 800a1c0:	f7f6 fa22 	bl	8000608 <__aeabi_dmul>
 800a1c4:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <_dtoa_r+0x624>)
 800a1c6:	4682      	mov	sl, r0
 800a1c8:	468b      	mov	fp, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f7f6 fa1a 	bl	8000608 <__aeabi_dmul>
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	4689      	mov	r9, r1
 800a1d8:	e7c6      	b.n	800a168 <_dtoa_r+0x510>
 800a1da:	4650      	mov	r0, sl
 800a1dc:	4659      	mov	r1, fp
 800a1de:	f7f6 fa13 	bl	8000608 <__aeabi_dmul>
 800a1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e4:	9d01      	ldr	r5, [sp, #4]
 800a1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	468b      	mov	fp, r1
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7f6 fcba 	bl	8000b68 <__aeabi_d2iz>
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	f7f6 f99d 	bl	8000534 <__aeabi_i2d>
 800a1fa:	3630      	adds	r6, #48	; 0x30
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 f848 	bl	8000298 <__aeabi_dsub>
 800a208:	f805 6b01 	strb.w	r6, [r5], #1
 800a20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a20e:	429d      	cmp	r5, r3
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	d124      	bne.n	800a264 <_dtoa_r+0x60c>
 800a21a:	4b1b      	ldr	r3, [pc, #108]	; (800a288 <_dtoa_r+0x630>)
 800a21c:	4650      	mov	r0, sl
 800a21e:	4659      	mov	r1, fp
 800a220:	f7f6 f83c 	bl	800029c <__adddf3>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 800a230:	2800      	cmp	r0, #0
 800a232:	d173      	bne.n	800a31c <_dtoa_r+0x6c4>
 800a234:	4652      	mov	r2, sl
 800a236:	465b      	mov	r3, fp
 800a238:	4913      	ldr	r1, [pc, #76]	; (800a288 <_dtoa_r+0x630>)
 800a23a:	2000      	movs	r0, #0
 800a23c:	f7f6 f82c 	bl	8000298 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 fc50 	bl	8000aec <__aeabi_dcmplt>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f af35 	beq.w	800a0bc <_dtoa_r+0x464>
 800a252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a254:	1e6b      	subs	r3, r5, #1
 800a256:	930f      	str	r3, [sp, #60]	; 0x3c
 800a258:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a25c:	2b30      	cmp	r3, #48	; 0x30
 800a25e:	d0f8      	beq.n	800a252 <_dtoa_r+0x5fa>
 800a260:	9700      	str	r7, [sp, #0]
 800a262:	e049      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_dtoa_r+0x624>)
 800a266:	f7f6 f9cf 	bl	8000608 <__aeabi_dmul>
 800a26a:	4680      	mov	r8, r0
 800a26c:	4689      	mov	r9, r1
 800a26e:	e7bd      	b.n	800a1ec <_dtoa_r+0x594>
 800a270:	0800c210 	.word	0x0800c210
 800a274:	0800c1e8 	.word	0x0800c1e8
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	40240000 	.word	0x40240000
 800a280:	401c0000 	.word	0x401c0000
 800a284:	40140000 	.word	0x40140000
 800a288:	3fe00000 	.word	0x3fe00000
 800a28c:	9d01      	ldr	r5, [sp, #4]
 800a28e:	4656      	mov	r6, sl
 800a290:	465f      	mov	r7, fp
 800a292:	4642      	mov	r2, r8
 800a294:	464b      	mov	r3, r9
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 fadf 	bl	800085c <__aeabi_ddiv>
 800a29e:	f7f6 fc63 	bl	8000b68 <__aeabi_d2iz>
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	f7f6 f946 	bl	8000534 <__aeabi_i2d>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f6 f9ac 	bl	8000608 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a2bc:	f7f5 ffec 	bl	8000298 <__aeabi_dsub>
 800a2c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c4:	9e01      	ldr	r6, [sp, #4]
 800a2c6:	9f03      	ldr	r7, [sp, #12]
 800a2c8:	1bae      	subs	r6, r5, r6
 800a2ca:	42b7      	cmp	r7, r6
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	d135      	bne.n	800a33e <_dtoa_r+0x6e6>
 800a2d2:	f7f5 ffe3 	bl	800029c <__adddf3>
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	464b      	mov	r3, r9
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	f7f6 fc23 	bl	8000b28 <__aeabi_dcmpgt>
 800a2e2:	b9d0      	cbnz	r0, 800a31a <_dtoa_r+0x6c2>
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	464b      	mov	r3, r9
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f0:	b110      	cbz	r0, 800a2f8 <_dtoa_r+0x6a0>
 800a2f2:	f01a 0f01 	tst.w	sl, #1
 800a2f6:	d110      	bne.n	800a31a <_dtoa_r+0x6c2>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	ee18 1a10 	vmov	r1, s16
 800a2fe:	f000 faf3 	bl	800a8e8 <_Bfree>
 800a302:	2300      	movs	r3, #0
 800a304:	9800      	ldr	r0, [sp, #0]
 800a306:	702b      	strb	r3, [r5, #0]
 800a308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a30a:	3001      	adds	r0, #1
 800a30c:	6018      	str	r0, [r3, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f43f acf1 	beq.w	8009cf8 <_dtoa_r+0xa0>
 800a316:	601d      	str	r5, [r3, #0]
 800a318:	e4ee      	b.n	8009cf8 <_dtoa_r+0xa0>
 800a31a:	9f00      	ldr	r7, [sp, #0]
 800a31c:	462b      	mov	r3, r5
 800a31e:	461d      	mov	r5, r3
 800a320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a324:	2a39      	cmp	r2, #57	; 0x39
 800a326:	d106      	bne.n	800a336 <_dtoa_r+0x6de>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d1f7      	bne.n	800a31e <_dtoa_r+0x6c6>
 800a32e:	9901      	ldr	r1, [sp, #4]
 800a330:	2230      	movs	r2, #48	; 0x30
 800a332:	3701      	adds	r7, #1
 800a334:	700a      	strb	r2, [r1, #0]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	3201      	adds	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e790      	b.n	800a260 <_dtoa_r+0x608>
 800a33e:	4ba6      	ldr	r3, [pc, #664]	; (800a5d8 <_dtoa_r+0x980>)
 800a340:	2200      	movs	r2, #0
 800a342:	f7f6 f961 	bl	8000608 <__aeabi_dmul>
 800a346:	2200      	movs	r2, #0
 800a348:	2300      	movs	r3, #0
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	f7f6 fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a352:	2800      	cmp	r0, #0
 800a354:	d09d      	beq.n	800a292 <_dtoa_r+0x63a>
 800a356:	e7cf      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a358:	9a08      	ldr	r2, [sp, #32]
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	f000 80d7 	beq.w	800a50e <_dtoa_r+0x8b6>
 800a360:	9a06      	ldr	r2, [sp, #24]
 800a362:	2a01      	cmp	r2, #1
 800a364:	f300 80ba 	bgt.w	800a4dc <_dtoa_r+0x884>
 800a368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	f000 80b2 	beq.w	800a4d4 <_dtoa_r+0x87c>
 800a370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a374:	9e07      	ldr	r6, [sp, #28]
 800a376:	9d04      	ldr	r5, [sp, #16]
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	441a      	add	r2, r3
 800a37c:	9204      	str	r2, [sp, #16]
 800a37e:	9a05      	ldr	r2, [sp, #20]
 800a380:	2101      	movs	r1, #1
 800a382:	441a      	add	r2, r3
 800a384:	4620      	mov	r0, r4
 800a386:	9205      	str	r2, [sp, #20]
 800a388:	f000 fb66 	bl	800aa58 <__i2b>
 800a38c:	4607      	mov	r7, r0
 800a38e:	2d00      	cmp	r5, #0
 800a390:	dd0c      	ble.n	800a3ac <_dtoa_r+0x754>
 800a392:	9b05      	ldr	r3, [sp, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	dd09      	ble.n	800a3ac <_dtoa_r+0x754>
 800a398:	42ab      	cmp	r3, r5
 800a39a:	9a04      	ldr	r2, [sp, #16]
 800a39c:	bfa8      	it	ge
 800a39e:	462b      	movge	r3, r5
 800a3a0:	1ad2      	subs	r2, r2, r3
 800a3a2:	9204      	str	r2, [sp, #16]
 800a3a4:	9a05      	ldr	r2, [sp, #20]
 800a3a6:	1aed      	subs	r5, r5, r3
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	b31b      	cbz	r3, 800a3f8 <_dtoa_r+0x7a0>
 800a3b0:	9b08      	ldr	r3, [sp, #32]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80af 	beq.w	800a516 <_dtoa_r+0x8be>
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	dd13      	ble.n	800a3e4 <_dtoa_r+0x78c>
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4632      	mov	r2, r6
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fc09 	bl	800abd8 <__pow5mult>
 800a3c6:	ee18 2a10 	vmov	r2, s16
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fb58 	bl	800aa84 <__multiply>
 800a3d4:	ee18 1a10 	vmov	r1, s16
 800a3d8:	4680      	mov	r8, r0
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fa84 	bl	800a8e8 <_Bfree>
 800a3e0:	ee08 8a10 	vmov	s16, r8
 800a3e4:	9b07      	ldr	r3, [sp, #28]
 800a3e6:	1b9a      	subs	r2, r3, r6
 800a3e8:	d006      	beq.n	800a3f8 <_dtoa_r+0x7a0>
 800a3ea:	ee18 1a10 	vmov	r1, s16
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 fbf2 	bl	800abd8 <__pow5mult>
 800a3f4:	ee08 0a10 	vmov	s16, r0
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fb2c 	bl	800aa58 <__i2b>
 800a400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	4606      	mov	r6, r0
 800a406:	f340 8088 	ble.w	800a51a <_dtoa_r+0x8c2>
 800a40a:	461a      	mov	r2, r3
 800a40c:	4601      	mov	r1, r0
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fbe2 	bl	800abd8 <__pow5mult>
 800a414:	9b06      	ldr	r3, [sp, #24]
 800a416:	2b01      	cmp	r3, #1
 800a418:	4606      	mov	r6, r0
 800a41a:	f340 8081 	ble.w	800a520 <_dtoa_r+0x8c8>
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	6933      	ldr	r3, [r6, #16]
 800a424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a428:	6918      	ldr	r0, [r3, #16]
 800a42a:	f000 fac5 	bl	800a9b8 <__hi0bits>
 800a42e:	f1c0 0020 	rsb	r0, r0, #32
 800a432:	9b05      	ldr	r3, [sp, #20]
 800a434:	4418      	add	r0, r3
 800a436:	f010 001f 	ands.w	r0, r0, #31
 800a43a:	f000 8092 	beq.w	800a562 <_dtoa_r+0x90a>
 800a43e:	f1c0 0320 	rsb	r3, r0, #32
 800a442:	2b04      	cmp	r3, #4
 800a444:	f340 808a 	ble.w	800a55c <_dtoa_r+0x904>
 800a448:	f1c0 001c 	rsb	r0, r0, #28
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	4403      	add	r3, r0
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	4403      	add	r3, r0
 800a456:	4405      	add	r5, r0
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd07      	ble.n	800a470 <_dtoa_r+0x818>
 800a460:	ee18 1a10 	vmov	r1, s16
 800a464:	461a      	mov	r2, r3
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fc10 	bl	800ac8c <__lshift>
 800a46c:	ee08 0a10 	vmov	s16, r0
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	2b00      	cmp	r3, #0
 800a474:	dd05      	ble.n	800a482 <_dtoa_r+0x82a>
 800a476:	4631      	mov	r1, r6
 800a478:	461a      	mov	r2, r3
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fc06 	bl	800ac8c <__lshift>
 800a480:	4606      	mov	r6, r0
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d06e      	beq.n	800a566 <_dtoa_r+0x90e>
 800a488:	ee18 0a10 	vmov	r0, s16
 800a48c:	4631      	mov	r1, r6
 800a48e:	f000 fc6d 	bl	800ad6c <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	da67      	bge.n	800a566 <_dtoa_r+0x90e>
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	3b01      	subs	r3, #1
 800a49a:	ee18 1a10 	vmov	r1, s16
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	220a      	movs	r2, #10
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fa41 	bl	800a92c <__multadd>
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	ee08 0a10 	vmov	s16, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 81b1 	beq.w	800a818 <_dtoa_r+0xbc0>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	220a      	movs	r2, #10
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 fa35 	bl	800a92c <__multadd>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	f300 808e 	bgt.w	800a5e8 <_dtoa_r+0x990>
 800a4cc:	9b06      	ldr	r3, [sp, #24]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	dc51      	bgt.n	800a576 <_dtoa_r+0x91e>
 800a4d2:	e089      	b.n	800a5e8 <_dtoa_r+0x990>
 800a4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4da:	e74b      	b.n	800a374 <_dtoa_r+0x71c>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1e5e      	subs	r6, r3, #1
 800a4e0:	9b07      	ldr	r3, [sp, #28]
 800a4e2:	42b3      	cmp	r3, r6
 800a4e4:	bfbf      	itttt	lt
 800a4e6:	9b07      	ldrlt	r3, [sp, #28]
 800a4e8:	9607      	strlt	r6, [sp, #28]
 800a4ea:	1af2      	sublt	r2, r6, r3
 800a4ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4ee:	bfb6      	itet	lt
 800a4f0:	189b      	addlt	r3, r3, r2
 800a4f2:	1b9e      	subge	r6, r3, r6
 800a4f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	bfb8      	it	lt
 800a4fa:	2600      	movlt	r6, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfb7      	itett	lt
 800a500:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a504:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a508:	1a9d      	sublt	r5, r3, r2
 800a50a:	2300      	movlt	r3, #0
 800a50c:	e734      	b.n	800a378 <_dtoa_r+0x720>
 800a50e:	9e07      	ldr	r6, [sp, #28]
 800a510:	9d04      	ldr	r5, [sp, #16]
 800a512:	9f08      	ldr	r7, [sp, #32]
 800a514:	e73b      	b.n	800a38e <_dtoa_r+0x736>
 800a516:	9a07      	ldr	r2, [sp, #28]
 800a518:	e767      	b.n	800a3ea <_dtoa_r+0x792>
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	dc18      	bgt.n	800a552 <_dtoa_r+0x8fa>
 800a520:	f1ba 0f00 	cmp.w	sl, #0
 800a524:	d115      	bne.n	800a552 <_dtoa_r+0x8fa>
 800a526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a52a:	b993      	cbnz	r3, 800a552 <_dtoa_r+0x8fa>
 800a52c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a530:	0d1b      	lsrs	r3, r3, #20
 800a532:	051b      	lsls	r3, r3, #20
 800a534:	b183      	cbz	r3, 800a558 <_dtoa_r+0x900>
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	3301      	adds	r3, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	9b05      	ldr	r3, [sp, #20]
 800a53e:	3301      	adds	r3, #1
 800a540:	9305      	str	r3, [sp, #20]
 800a542:	f04f 0801 	mov.w	r8, #1
 800a546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f47f af6a 	bne.w	800a422 <_dtoa_r+0x7ca>
 800a54e:	2001      	movs	r0, #1
 800a550:	e76f      	b.n	800a432 <_dtoa_r+0x7da>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	e7f6      	b.n	800a546 <_dtoa_r+0x8ee>
 800a558:	4698      	mov	r8, r3
 800a55a:	e7f4      	b.n	800a546 <_dtoa_r+0x8ee>
 800a55c:	f43f af7d 	beq.w	800a45a <_dtoa_r+0x802>
 800a560:	4618      	mov	r0, r3
 800a562:	301c      	adds	r0, #28
 800a564:	e772      	b.n	800a44c <_dtoa_r+0x7f4>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc37      	bgt.n	800a5dc <_dtoa_r+0x984>
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	dd34      	ble.n	800a5dc <_dtoa_r+0x984>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	9302      	str	r3, [sp, #8]
 800a576:	9b02      	ldr	r3, [sp, #8]
 800a578:	b96b      	cbnz	r3, 800a596 <_dtoa_r+0x93e>
 800a57a:	4631      	mov	r1, r6
 800a57c:	2205      	movs	r2, #5
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 f9d4 	bl	800a92c <__multadd>
 800a584:	4601      	mov	r1, r0
 800a586:	4606      	mov	r6, r0
 800a588:	ee18 0a10 	vmov	r0, s16
 800a58c:	f000 fbee 	bl	800ad6c <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	f73f adbb 	bgt.w	800a10c <_dtoa_r+0x4b4>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	9d01      	ldr	r5, [sp, #4]
 800a59a:	43db      	mvns	r3, r3
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 f99f 	bl	800a8e8 <_Bfree>
 800a5aa:	2f00      	cmp	r7, #0
 800a5ac:	f43f aea4 	beq.w	800a2f8 <_dtoa_r+0x6a0>
 800a5b0:	f1b8 0f00 	cmp.w	r8, #0
 800a5b4:	d005      	beq.n	800a5c2 <_dtoa_r+0x96a>
 800a5b6:	45b8      	cmp	r8, r7
 800a5b8:	d003      	beq.n	800a5c2 <_dtoa_r+0x96a>
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 f993 	bl	800a8e8 <_Bfree>
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 f98f 	bl	800a8e8 <_Bfree>
 800a5ca:	e695      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	4637      	mov	r7, r6
 800a5d0:	e7e1      	b.n	800a596 <_dtoa_r+0x93e>
 800a5d2:	9700      	str	r7, [sp, #0]
 800a5d4:	4637      	mov	r7, r6
 800a5d6:	e599      	b.n	800a10c <_dtoa_r+0x4b4>
 800a5d8:	40240000 	.word	0x40240000
 800a5dc:	9b08      	ldr	r3, [sp, #32]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80ca 	beq.w	800a778 <_dtoa_r+0xb20>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	2d00      	cmp	r5, #0
 800a5ea:	dd05      	ble.n	800a5f8 <_dtoa_r+0x9a0>
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 fb4b 	bl	800ac8c <__lshift>
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	f1b8 0f00 	cmp.w	r8, #0
 800a5fc:	d05b      	beq.n	800a6b6 <_dtoa_r+0xa5e>
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	4620      	mov	r0, r4
 800a602:	f000 f931 	bl	800a868 <_Balloc>
 800a606:	4605      	mov	r5, r0
 800a608:	b928      	cbnz	r0, 800a616 <_dtoa_r+0x9be>
 800a60a:	4b87      	ldr	r3, [pc, #540]	; (800a828 <_dtoa_r+0xbd0>)
 800a60c:	4602      	mov	r2, r0
 800a60e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a612:	f7ff bb3b 	b.w	8009c8c <_dtoa_r+0x34>
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	3202      	adds	r2, #2
 800a61a:	0092      	lsls	r2, r2, #2
 800a61c:	f107 010c 	add.w	r1, r7, #12
 800a620:	300c      	adds	r0, #12
 800a622:	f000 f913 	bl	800a84c <memcpy>
 800a626:	2201      	movs	r2, #1
 800a628:	4629      	mov	r1, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fb2e 	bl	800ac8c <__lshift>
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	f103 0901 	add.w	r9, r3, #1
 800a636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	f00a 0301 	and.w	r3, sl, #1
 800a642:	46b8      	mov	r8, r7
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	4607      	mov	r7, r0
 800a648:	4631      	mov	r1, r6
 800a64a:	ee18 0a10 	vmov	r0, s16
 800a64e:	f7ff fa75 	bl	8009b3c <quorem>
 800a652:	4641      	mov	r1, r8
 800a654:	9002      	str	r0, [sp, #8]
 800a656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a65a:	ee18 0a10 	vmov	r0, s16
 800a65e:	f000 fb85 	bl	800ad6c <__mcmp>
 800a662:	463a      	mov	r2, r7
 800a664:	9003      	str	r0, [sp, #12]
 800a666:	4631      	mov	r1, r6
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fb9b 	bl	800ada4 <__mdiff>
 800a66e:	68c2      	ldr	r2, [r0, #12]
 800a670:	f109 3bff 	add.w	fp, r9, #4294967295
 800a674:	4605      	mov	r5, r0
 800a676:	bb02      	cbnz	r2, 800a6ba <_dtoa_r+0xa62>
 800a678:	4601      	mov	r1, r0
 800a67a:	ee18 0a10 	vmov	r0, s16
 800a67e:	f000 fb75 	bl	800ad6c <__mcmp>
 800a682:	4602      	mov	r2, r0
 800a684:	4629      	mov	r1, r5
 800a686:	4620      	mov	r0, r4
 800a688:	9207      	str	r2, [sp, #28]
 800a68a:	f000 f92d 	bl	800a8e8 <_Bfree>
 800a68e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a692:	ea43 0102 	orr.w	r1, r3, r2
 800a696:	9b04      	ldr	r3, [sp, #16]
 800a698:	430b      	orrs	r3, r1
 800a69a:	464d      	mov	r5, r9
 800a69c:	d10f      	bne.n	800a6be <_dtoa_r+0xa66>
 800a69e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6a2:	d02a      	beq.n	800a6fa <_dtoa_r+0xaa2>
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd02      	ble.n	800a6b0 <_dtoa_r+0xa58>
 800a6aa:	9b02      	ldr	r3, [sp, #8]
 800a6ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a6b0:	f88b a000 	strb.w	sl, [fp]
 800a6b4:	e775      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	e7ba      	b.n	800a630 <_dtoa_r+0x9d8>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	e7e2      	b.n	800a684 <_dtoa_r+0xa2c>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	db04      	blt.n	800a6ce <_dtoa_r+0xa76>
 800a6c4:	9906      	ldr	r1, [sp, #24]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	9904      	ldr	r1, [sp, #16]
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	d122      	bne.n	800a714 <_dtoa_r+0xabc>
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	ddee      	ble.n	800a6b0 <_dtoa_r+0xa58>
 800a6d2:	ee18 1a10 	vmov	r1, s16
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fad7 	bl	800ac8c <__lshift>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	ee08 0a10 	vmov	s16, r0
 800a6e4:	f000 fb42 	bl	800ad6c <__mcmp>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	dc03      	bgt.n	800a6f4 <_dtoa_r+0xa9c>
 800a6ec:	d1e0      	bne.n	800a6b0 <_dtoa_r+0xa58>
 800a6ee:	f01a 0f01 	tst.w	sl, #1
 800a6f2:	d0dd      	beq.n	800a6b0 <_dtoa_r+0xa58>
 800a6f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6f8:	d1d7      	bne.n	800a6aa <_dtoa_r+0xa52>
 800a6fa:	2339      	movs	r3, #57	; 0x39
 800a6fc:	f88b 3000 	strb.w	r3, [fp]
 800a700:	462b      	mov	r3, r5
 800a702:	461d      	mov	r5, r3
 800a704:	3b01      	subs	r3, #1
 800a706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a70a:	2a39      	cmp	r2, #57	; 0x39
 800a70c:	d071      	beq.n	800a7f2 <_dtoa_r+0xb9a>
 800a70e:	3201      	adds	r2, #1
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	e746      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a714:	2a00      	cmp	r2, #0
 800a716:	dd07      	ble.n	800a728 <_dtoa_r+0xad0>
 800a718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a71c:	d0ed      	beq.n	800a6fa <_dtoa_r+0xaa2>
 800a71e:	f10a 0301 	add.w	r3, sl, #1
 800a722:	f88b 3000 	strb.w	r3, [fp]
 800a726:	e73c      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a728:	9b05      	ldr	r3, [sp, #20]
 800a72a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a72e:	4599      	cmp	r9, r3
 800a730:	d047      	beq.n	800a7c2 <_dtoa_r+0xb6a>
 800a732:	ee18 1a10 	vmov	r1, s16
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 f8f6 	bl	800a92c <__multadd>
 800a740:	45b8      	cmp	r8, r7
 800a742:	ee08 0a10 	vmov	s16, r0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	f04f 020a 	mov.w	r2, #10
 800a74e:	4641      	mov	r1, r8
 800a750:	4620      	mov	r0, r4
 800a752:	d106      	bne.n	800a762 <_dtoa_r+0xb0a>
 800a754:	f000 f8ea 	bl	800a92c <__multadd>
 800a758:	4680      	mov	r8, r0
 800a75a:	4607      	mov	r7, r0
 800a75c:	f109 0901 	add.w	r9, r9, #1
 800a760:	e772      	b.n	800a648 <_dtoa_r+0x9f0>
 800a762:	f000 f8e3 	bl	800a92c <__multadd>
 800a766:	4639      	mov	r1, r7
 800a768:	4680      	mov	r8, r0
 800a76a:	2300      	movs	r3, #0
 800a76c:	220a      	movs	r2, #10
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 f8dc 	bl	800a92c <__multadd>
 800a774:	4607      	mov	r7, r0
 800a776:	e7f1      	b.n	800a75c <_dtoa_r+0xb04>
 800a778:	9b03      	ldr	r3, [sp, #12]
 800a77a:	9302      	str	r3, [sp, #8]
 800a77c:	9d01      	ldr	r5, [sp, #4]
 800a77e:	ee18 0a10 	vmov	r0, s16
 800a782:	4631      	mov	r1, r6
 800a784:	f7ff f9da 	bl	8009b3c <quorem>
 800a788:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	f805 ab01 	strb.w	sl, [r5], #1
 800a792:	1aea      	subs	r2, r5, r3
 800a794:	9b02      	ldr	r3, [sp, #8]
 800a796:	4293      	cmp	r3, r2
 800a798:	dd09      	ble.n	800a7ae <_dtoa_r+0xb56>
 800a79a:	ee18 1a10 	vmov	r1, s16
 800a79e:	2300      	movs	r3, #0
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 f8c2 	bl	800a92c <__multadd>
 800a7a8:	ee08 0a10 	vmov	s16, r0
 800a7ac:	e7e7      	b.n	800a77e <_dtoa_r+0xb26>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfc8      	it	gt
 800a7b4:	461d      	movgt	r5, r3
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	bfd8      	it	le
 800a7ba:	2501      	movle	r5, #1
 800a7bc:	441d      	add	r5, r3
 800a7be:	f04f 0800 	mov.w	r8, #0
 800a7c2:	ee18 1a10 	vmov	r1, s16
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fa5f 	bl	800ac8c <__lshift>
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	ee08 0a10 	vmov	s16, r0
 800a7d4:	f000 faca 	bl	800ad6c <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dc91      	bgt.n	800a700 <_dtoa_r+0xaa8>
 800a7dc:	d102      	bne.n	800a7e4 <_dtoa_r+0xb8c>
 800a7de:	f01a 0f01 	tst.w	sl, #1
 800a7e2:	d18d      	bne.n	800a700 <_dtoa_r+0xaa8>
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	461d      	mov	r5, r3
 800a7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ec:	2a30      	cmp	r2, #48	; 0x30
 800a7ee:	d0fa      	beq.n	800a7e6 <_dtoa_r+0xb8e>
 800a7f0:	e6d7      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a7f2:	9a01      	ldr	r2, [sp, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d184      	bne.n	800a702 <_dtoa_r+0xaaa>
 800a7f8:	9b00      	ldr	r3, [sp, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2331      	movs	r3, #49	; 0x31
 800a800:	7013      	strb	r3, [r2, #0]
 800a802:	e6ce      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a804:	4b09      	ldr	r3, [pc, #36]	; (800a82c <_dtoa_r+0xbd4>)
 800a806:	f7ff ba95 	b.w	8009d34 <_dtoa_r+0xdc>
 800a80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f47f aa6e 	bne.w	8009cee <_dtoa_r+0x96>
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <_dtoa_r+0xbd8>)
 800a814:	f7ff ba8e 	b.w	8009d34 <_dtoa_r+0xdc>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dcae      	bgt.n	800a77c <_dtoa_r+0xb24>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	2b02      	cmp	r3, #2
 800a822:	f73f aea8 	bgt.w	800a576 <_dtoa_r+0x91e>
 800a826:	e7a9      	b.n	800a77c <_dtoa_r+0xb24>
 800a828:	0800c177 	.word	0x0800c177
 800a82c:	0800c0d4 	.word	0x0800c0d4
 800a830:	0800c0f8 	.word	0x0800c0f8

0800a834 <_localeconv_r>:
 800a834:	4800      	ldr	r0, [pc, #0]	; (800a838 <_localeconv_r+0x4>)
 800a836:	4770      	bx	lr
 800a838:	200002bc 	.word	0x200002bc

0800a83c <malloc>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <malloc+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f000 bc17 	b.w	800b074 <_malloc_r>
 800a846:	bf00      	nop
 800a848:	20000168 	.word	0x20000168

0800a84c <memcpy>:
 800a84c:	440a      	add	r2, r1
 800a84e:	4291      	cmp	r1, r2
 800a850:	f100 33ff 	add.w	r3, r0, #4294967295
 800a854:	d100      	bne.n	800a858 <memcpy+0xc>
 800a856:	4770      	bx	lr
 800a858:	b510      	push	{r4, lr}
 800a85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a862:	4291      	cmp	r1, r2
 800a864:	d1f9      	bne.n	800a85a <memcpy+0xe>
 800a866:	bd10      	pop	{r4, pc}

0800a868 <_Balloc>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	b976      	cbnz	r6, 800a890 <_Balloc+0x28>
 800a872:	2010      	movs	r0, #16
 800a874:	f7ff ffe2 	bl	800a83c <malloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	6260      	str	r0, [r4, #36]	; 0x24
 800a87c:	b920      	cbnz	r0, 800a888 <_Balloc+0x20>
 800a87e:	4b18      	ldr	r3, [pc, #96]	; (800a8e0 <_Balloc+0x78>)
 800a880:	4818      	ldr	r0, [pc, #96]	; (800a8e4 <_Balloc+0x7c>)
 800a882:	2166      	movs	r1, #102	; 0x66
 800a884:	f000 fdd6 	bl	800b434 <__assert_func>
 800a888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a88c:	6006      	str	r6, [r0, #0]
 800a88e:	60c6      	str	r6, [r0, #12]
 800a890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a892:	68f3      	ldr	r3, [r6, #12]
 800a894:	b183      	cbz	r3, 800a8b8 <_Balloc+0x50>
 800a896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a89e:	b9b8      	cbnz	r0, 800a8d0 <_Balloc+0x68>
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8a6:	1d72      	adds	r2, r6, #5
 800a8a8:	0092      	lsls	r2, r2, #2
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fb60 	bl	800af70 <_calloc_r>
 800a8b0:	b160      	cbz	r0, 800a8cc <_Balloc+0x64>
 800a8b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8b6:	e00e      	b.n	800a8d6 <_Balloc+0x6e>
 800a8b8:	2221      	movs	r2, #33	; 0x21
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fb57 	bl	800af70 <_calloc_r>
 800a8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c4:	60f0      	str	r0, [r6, #12]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e4      	bne.n	800a896 <_Balloc+0x2e>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	6802      	ldr	r2, [r0, #0]
 800a8d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8dc:	e7f7      	b.n	800a8ce <_Balloc+0x66>
 800a8de:	bf00      	nop
 800a8e0:	0800c105 	.word	0x0800c105
 800a8e4:	0800c188 	.word	0x0800c188

0800a8e8 <_Bfree>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	b976      	cbnz	r6, 800a910 <_Bfree+0x28>
 800a8f2:	2010      	movs	r0, #16
 800a8f4:	f7ff ffa2 	bl	800a83c <malloc>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6268      	str	r0, [r5, #36]	; 0x24
 800a8fc:	b920      	cbnz	r0, 800a908 <_Bfree+0x20>
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <_Bfree+0x3c>)
 800a900:	4809      	ldr	r0, [pc, #36]	; (800a928 <_Bfree+0x40>)
 800a902:	218a      	movs	r1, #138	; 0x8a
 800a904:	f000 fd96 	bl	800b434 <__assert_func>
 800a908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a90c:	6006      	str	r6, [r0, #0]
 800a90e:	60c6      	str	r6, [r0, #12]
 800a910:	b13c      	cbz	r4, 800a922 <_Bfree+0x3a>
 800a912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a914:	6862      	ldr	r2, [r4, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a91c:	6021      	str	r1, [r4, #0]
 800a91e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	0800c105 	.word	0x0800c105
 800a928:	0800c188 	.word	0x0800c188

0800a92c <__multadd>:
 800a92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a930:	690d      	ldr	r5, [r1, #16]
 800a932:	4607      	mov	r7, r0
 800a934:	460c      	mov	r4, r1
 800a936:	461e      	mov	r6, r3
 800a938:	f101 0c14 	add.w	ip, r1, #20
 800a93c:	2000      	movs	r0, #0
 800a93e:	f8dc 3000 	ldr.w	r3, [ip]
 800a942:	b299      	uxth	r1, r3
 800a944:	fb02 6101 	mla	r1, r2, r1, r6
 800a948:	0c1e      	lsrs	r6, r3, #16
 800a94a:	0c0b      	lsrs	r3, r1, #16
 800a94c:	fb02 3306 	mla	r3, r2, r6, r3
 800a950:	b289      	uxth	r1, r1
 800a952:	3001      	adds	r0, #1
 800a954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a958:	4285      	cmp	r5, r0
 800a95a:	f84c 1b04 	str.w	r1, [ip], #4
 800a95e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a962:	dcec      	bgt.n	800a93e <__multadd+0x12>
 800a964:	b30e      	cbz	r6, 800a9aa <__multadd+0x7e>
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dc19      	bgt.n	800a9a0 <__multadd+0x74>
 800a96c:	6861      	ldr	r1, [r4, #4]
 800a96e:	4638      	mov	r0, r7
 800a970:	3101      	adds	r1, #1
 800a972:	f7ff ff79 	bl	800a868 <_Balloc>
 800a976:	4680      	mov	r8, r0
 800a978:	b928      	cbnz	r0, 800a986 <__multadd+0x5a>
 800a97a:	4602      	mov	r2, r0
 800a97c:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <__multadd+0x84>)
 800a97e:	480d      	ldr	r0, [pc, #52]	; (800a9b4 <__multadd+0x88>)
 800a980:	21b5      	movs	r1, #181	; 0xb5
 800a982:	f000 fd57 	bl	800b434 <__assert_func>
 800a986:	6922      	ldr	r2, [r4, #16]
 800a988:	3202      	adds	r2, #2
 800a98a:	f104 010c 	add.w	r1, r4, #12
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	300c      	adds	r0, #12
 800a992:	f7ff ff5b 	bl	800a84c <memcpy>
 800a996:	4621      	mov	r1, r4
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff ffa5 	bl	800a8e8 <_Bfree>
 800a99e:	4644      	mov	r4, r8
 800a9a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	615e      	str	r6, [r3, #20]
 800a9a8:	6125      	str	r5, [r4, #16]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b0:	0800c177 	.word	0x0800c177
 800a9b4:	0800c188 	.word	0x0800c188

0800a9b8 <__hi0bits>:
 800a9b8:	0c03      	lsrs	r3, r0, #16
 800a9ba:	041b      	lsls	r3, r3, #16
 800a9bc:	b9d3      	cbnz	r3, 800a9f4 <__hi0bits+0x3c>
 800a9be:	0400      	lsls	r0, r0, #16
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9c6:	bf04      	itt	eq
 800a9c8:	0200      	lsleq	r0, r0, #8
 800a9ca:	3308      	addeq	r3, #8
 800a9cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9d0:	bf04      	itt	eq
 800a9d2:	0100      	lsleq	r0, r0, #4
 800a9d4:	3304      	addeq	r3, #4
 800a9d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9da:	bf04      	itt	eq
 800a9dc:	0080      	lsleq	r0, r0, #2
 800a9de:	3302      	addeq	r3, #2
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	db05      	blt.n	800a9f0 <__hi0bits+0x38>
 800a9e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9e8:	f103 0301 	add.w	r3, r3, #1
 800a9ec:	bf08      	it	eq
 800a9ee:	2320      	moveq	r3, #32
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	4770      	bx	lr
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e7e4      	b.n	800a9c2 <__hi0bits+0xa>

0800a9f8 <__lo0bits>:
 800a9f8:	6803      	ldr	r3, [r0, #0]
 800a9fa:	f013 0207 	ands.w	r2, r3, #7
 800a9fe:	4601      	mov	r1, r0
 800aa00:	d00b      	beq.n	800aa1a <__lo0bits+0x22>
 800aa02:	07da      	lsls	r2, r3, #31
 800aa04:	d423      	bmi.n	800aa4e <__lo0bits+0x56>
 800aa06:	0798      	lsls	r0, r3, #30
 800aa08:	bf49      	itett	mi
 800aa0a:	085b      	lsrmi	r3, r3, #1
 800aa0c:	089b      	lsrpl	r3, r3, #2
 800aa0e:	2001      	movmi	r0, #1
 800aa10:	600b      	strmi	r3, [r1, #0]
 800aa12:	bf5c      	itt	pl
 800aa14:	600b      	strpl	r3, [r1, #0]
 800aa16:	2002      	movpl	r0, #2
 800aa18:	4770      	bx	lr
 800aa1a:	b298      	uxth	r0, r3
 800aa1c:	b9a8      	cbnz	r0, 800aa4a <__lo0bits+0x52>
 800aa1e:	0c1b      	lsrs	r3, r3, #16
 800aa20:	2010      	movs	r0, #16
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	b90a      	cbnz	r2, 800aa2a <__lo0bits+0x32>
 800aa26:	3008      	adds	r0, #8
 800aa28:	0a1b      	lsrs	r3, r3, #8
 800aa2a:	071a      	lsls	r2, r3, #28
 800aa2c:	bf04      	itt	eq
 800aa2e:	091b      	lsreq	r3, r3, #4
 800aa30:	3004      	addeq	r0, #4
 800aa32:	079a      	lsls	r2, r3, #30
 800aa34:	bf04      	itt	eq
 800aa36:	089b      	lsreq	r3, r3, #2
 800aa38:	3002      	addeq	r0, #2
 800aa3a:	07da      	lsls	r2, r3, #31
 800aa3c:	d403      	bmi.n	800aa46 <__lo0bits+0x4e>
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	f100 0001 	add.w	r0, r0, #1
 800aa44:	d005      	beq.n	800aa52 <__lo0bits+0x5a>
 800aa46:	600b      	str	r3, [r1, #0]
 800aa48:	4770      	bx	lr
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	e7e9      	b.n	800aa22 <__lo0bits+0x2a>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	4770      	bx	lr
 800aa52:	2020      	movs	r0, #32
 800aa54:	4770      	bx	lr
	...

0800aa58 <__i2b>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	f7ff ff03 	bl	800a868 <_Balloc>
 800aa62:	4602      	mov	r2, r0
 800aa64:	b928      	cbnz	r0, 800aa72 <__i2b+0x1a>
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <__i2b+0x24>)
 800aa68:	4805      	ldr	r0, [pc, #20]	; (800aa80 <__i2b+0x28>)
 800aa6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa6e:	f000 fce1 	bl	800b434 <__assert_func>
 800aa72:	2301      	movs	r3, #1
 800aa74:	6144      	str	r4, [r0, #20]
 800aa76:	6103      	str	r3, [r0, #16]
 800aa78:	bd10      	pop	{r4, pc}
 800aa7a:	bf00      	nop
 800aa7c:	0800c177 	.word	0x0800c177
 800aa80:	0800c188 	.word	0x0800c188

0800aa84 <__multiply>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	4691      	mov	r9, r2
 800aa8a:	690a      	ldr	r2, [r1, #16]
 800aa8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	bfb8      	it	lt
 800aa94:	460b      	movlt	r3, r1
 800aa96:	460c      	mov	r4, r1
 800aa98:	bfbc      	itt	lt
 800aa9a:	464c      	movlt	r4, r9
 800aa9c:	4699      	movlt	r9, r3
 800aa9e:	6927      	ldr	r7, [r4, #16]
 800aaa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aaa4:	68a3      	ldr	r3, [r4, #8]
 800aaa6:	6861      	ldr	r1, [r4, #4]
 800aaa8:	eb07 060a 	add.w	r6, r7, sl
 800aaac:	42b3      	cmp	r3, r6
 800aaae:	b085      	sub	sp, #20
 800aab0:	bfb8      	it	lt
 800aab2:	3101      	addlt	r1, #1
 800aab4:	f7ff fed8 	bl	800a868 <_Balloc>
 800aab8:	b930      	cbnz	r0, 800aac8 <__multiply+0x44>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b44      	ldr	r3, [pc, #272]	; (800abd0 <__multiply+0x14c>)
 800aabe:	4845      	ldr	r0, [pc, #276]	; (800abd4 <__multiply+0x150>)
 800aac0:	f240 115d 	movw	r1, #349	; 0x15d
 800aac4:	f000 fcb6 	bl	800b434 <__assert_func>
 800aac8:	f100 0514 	add.w	r5, r0, #20
 800aacc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aad0:	462b      	mov	r3, r5
 800aad2:	2200      	movs	r2, #0
 800aad4:	4543      	cmp	r3, r8
 800aad6:	d321      	bcc.n	800ab1c <__multiply+0x98>
 800aad8:	f104 0314 	add.w	r3, r4, #20
 800aadc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aae0:	f109 0314 	add.w	r3, r9, #20
 800aae4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aae8:	9202      	str	r2, [sp, #8]
 800aaea:	1b3a      	subs	r2, r7, r4
 800aaec:	3a15      	subs	r2, #21
 800aaee:	f022 0203 	bic.w	r2, r2, #3
 800aaf2:	3204      	adds	r2, #4
 800aaf4:	f104 0115 	add.w	r1, r4, #21
 800aaf8:	428f      	cmp	r7, r1
 800aafa:	bf38      	it	cc
 800aafc:	2204      	movcc	r2, #4
 800aafe:	9201      	str	r2, [sp, #4]
 800ab00:	9a02      	ldr	r2, [sp, #8]
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d80c      	bhi.n	800ab22 <__multiply+0x9e>
 800ab08:	2e00      	cmp	r6, #0
 800ab0a:	dd03      	ble.n	800ab14 <__multiply+0x90>
 800ab0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d05a      	beq.n	800abca <__multiply+0x146>
 800ab14:	6106      	str	r6, [r0, #16]
 800ab16:	b005      	add	sp, #20
 800ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1c:	f843 2b04 	str.w	r2, [r3], #4
 800ab20:	e7d8      	b.n	800aad4 <__multiply+0x50>
 800ab22:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab26:	f1ba 0f00 	cmp.w	sl, #0
 800ab2a:	d024      	beq.n	800ab76 <__multiply+0xf2>
 800ab2c:	f104 0e14 	add.w	lr, r4, #20
 800ab30:	46a9      	mov	r9, r5
 800ab32:	f04f 0c00 	mov.w	ip, #0
 800ab36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab3a:	f8d9 1000 	ldr.w	r1, [r9]
 800ab3e:	fa1f fb82 	uxth.w	fp, r2
 800ab42:	b289      	uxth	r1, r1
 800ab44:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab4c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab50:	4461      	add	r1, ip
 800ab52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab56:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab5e:	b289      	uxth	r1, r1
 800ab60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab64:	4577      	cmp	r7, lr
 800ab66:	f849 1b04 	str.w	r1, [r9], #4
 800ab6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab6e:	d8e2      	bhi.n	800ab36 <__multiply+0xb2>
 800ab70:	9a01      	ldr	r2, [sp, #4]
 800ab72:	f845 c002 	str.w	ip, [r5, r2]
 800ab76:	9a03      	ldr	r2, [sp, #12]
 800ab78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d020      	beq.n	800abc6 <__multiply+0x142>
 800ab84:	6829      	ldr	r1, [r5, #0]
 800ab86:	f104 0c14 	add.w	ip, r4, #20
 800ab8a:	46ae      	mov	lr, r5
 800ab8c:	f04f 0a00 	mov.w	sl, #0
 800ab90:	f8bc b000 	ldrh.w	fp, [ip]
 800ab94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab98:	fb09 220b 	mla	r2, r9, fp, r2
 800ab9c:	4492      	add	sl, r2
 800ab9e:	b289      	uxth	r1, r1
 800aba0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aba4:	f84e 1b04 	str.w	r1, [lr], #4
 800aba8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800abac:	f8be 1000 	ldrh.w	r1, [lr]
 800abb0:	0c12      	lsrs	r2, r2, #16
 800abb2:	fb09 1102 	mla	r1, r9, r2, r1
 800abb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abba:	4567      	cmp	r7, ip
 800abbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abc0:	d8e6      	bhi.n	800ab90 <__multiply+0x10c>
 800abc2:	9a01      	ldr	r2, [sp, #4]
 800abc4:	50a9      	str	r1, [r5, r2]
 800abc6:	3504      	adds	r5, #4
 800abc8:	e79a      	b.n	800ab00 <__multiply+0x7c>
 800abca:	3e01      	subs	r6, #1
 800abcc:	e79c      	b.n	800ab08 <__multiply+0x84>
 800abce:	bf00      	nop
 800abd0:	0800c177 	.word	0x0800c177
 800abd4:	0800c188 	.word	0x0800c188

0800abd8 <__pow5mult>:
 800abd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abdc:	4615      	mov	r5, r2
 800abde:	f012 0203 	ands.w	r2, r2, #3
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	d007      	beq.n	800abf8 <__pow5mult+0x20>
 800abe8:	4c25      	ldr	r4, [pc, #148]	; (800ac80 <__pow5mult+0xa8>)
 800abea:	3a01      	subs	r2, #1
 800abec:	2300      	movs	r3, #0
 800abee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abf2:	f7ff fe9b 	bl	800a92c <__multadd>
 800abf6:	4607      	mov	r7, r0
 800abf8:	10ad      	asrs	r5, r5, #2
 800abfa:	d03d      	beq.n	800ac78 <__pow5mult+0xa0>
 800abfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abfe:	b97c      	cbnz	r4, 800ac20 <__pow5mult+0x48>
 800ac00:	2010      	movs	r0, #16
 800ac02:	f7ff fe1b 	bl	800a83c <malloc>
 800ac06:	4602      	mov	r2, r0
 800ac08:	6270      	str	r0, [r6, #36]	; 0x24
 800ac0a:	b928      	cbnz	r0, 800ac18 <__pow5mult+0x40>
 800ac0c:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <__pow5mult+0xac>)
 800ac0e:	481e      	ldr	r0, [pc, #120]	; (800ac88 <__pow5mult+0xb0>)
 800ac10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac14:	f000 fc0e 	bl	800b434 <__assert_func>
 800ac18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac1c:	6004      	str	r4, [r0, #0]
 800ac1e:	60c4      	str	r4, [r0, #12]
 800ac20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac28:	b94c      	cbnz	r4, 800ac3e <__pow5mult+0x66>
 800ac2a:	f240 2171 	movw	r1, #625	; 0x271
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7ff ff12 	bl	800aa58 <__i2b>
 800ac34:	2300      	movs	r3, #0
 800ac36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	6003      	str	r3, [r0, #0]
 800ac3e:	f04f 0900 	mov.w	r9, #0
 800ac42:	07eb      	lsls	r3, r5, #31
 800ac44:	d50a      	bpl.n	800ac5c <__pow5mult+0x84>
 800ac46:	4639      	mov	r1, r7
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ff1a 	bl	800aa84 <__multiply>
 800ac50:	4639      	mov	r1, r7
 800ac52:	4680      	mov	r8, r0
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7ff fe47 	bl	800a8e8 <_Bfree>
 800ac5a:	4647      	mov	r7, r8
 800ac5c:	106d      	asrs	r5, r5, #1
 800ac5e:	d00b      	beq.n	800ac78 <__pow5mult+0xa0>
 800ac60:	6820      	ldr	r0, [r4, #0]
 800ac62:	b938      	cbnz	r0, 800ac74 <__pow5mult+0x9c>
 800ac64:	4622      	mov	r2, r4
 800ac66:	4621      	mov	r1, r4
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f7ff ff0b 	bl	800aa84 <__multiply>
 800ac6e:	6020      	str	r0, [r4, #0]
 800ac70:	f8c0 9000 	str.w	r9, [r0]
 800ac74:	4604      	mov	r4, r0
 800ac76:	e7e4      	b.n	800ac42 <__pow5mult+0x6a>
 800ac78:	4638      	mov	r0, r7
 800ac7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800c2d8 	.word	0x0800c2d8
 800ac84:	0800c105 	.word	0x0800c105
 800ac88:	0800c188 	.word	0x0800c188

0800ac8c <__lshift>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	460c      	mov	r4, r1
 800ac92:	6849      	ldr	r1, [r1, #4]
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac9a:	68a3      	ldr	r3, [r4, #8]
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	4691      	mov	r9, r2
 800aca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aca4:	f108 0601 	add.w	r6, r8, #1
 800aca8:	42b3      	cmp	r3, r6
 800acaa:	db0b      	blt.n	800acc4 <__lshift+0x38>
 800acac:	4638      	mov	r0, r7
 800acae:	f7ff fddb 	bl	800a868 <_Balloc>
 800acb2:	4605      	mov	r5, r0
 800acb4:	b948      	cbnz	r0, 800acca <__lshift+0x3e>
 800acb6:	4602      	mov	r2, r0
 800acb8:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <__lshift+0xd8>)
 800acba:	482b      	ldr	r0, [pc, #172]	; (800ad68 <__lshift+0xdc>)
 800acbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acc0:	f000 fbb8 	bl	800b434 <__assert_func>
 800acc4:	3101      	adds	r1, #1
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	e7ee      	b.n	800aca8 <__lshift+0x1c>
 800acca:	2300      	movs	r3, #0
 800accc:	f100 0114 	add.w	r1, r0, #20
 800acd0:	f100 0210 	add.w	r2, r0, #16
 800acd4:	4618      	mov	r0, r3
 800acd6:	4553      	cmp	r3, sl
 800acd8:	db37      	blt.n	800ad4a <__lshift+0xbe>
 800acda:	6920      	ldr	r0, [r4, #16]
 800acdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ace0:	f104 0314 	add.w	r3, r4, #20
 800ace4:	f019 091f 	ands.w	r9, r9, #31
 800ace8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acf0:	d02f      	beq.n	800ad52 <__lshift+0xc6>
 800acf2:	f1c9 0e20 	rsb	lr, r9, #32
 800acf6:	468a      	mov	sl, r1
 800acf8:	f04f 0c00 	mov.w	ip, #0
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	fa02 f209 	lsl.w	r2, r2, r9
 800ad02:	ea42 020c 	orr.w	r2, r2, ip
 800ad06:	f84a 2b04 	str.w	r2, [sl], #4
 800ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0e:	4298      	cmp	r0, r3
 800ad10:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad14:	d8f2      	bhi.n	800acfc <__lshift+0x70>
 800ad16:	1b03      	subs	r3, r0, r4
 800ad18:	3b15      	subs	r3, #21
 800ad1a:	f023 0303 	bic.w	r3, r3, #3
 800ad1e:	3304      	adds	r3, #4
 800ad20:	f104 0215 	add.w	r2, r4, #21
 800ad24:	4290      	cmp	r0, r2
 800ad26:	bf38      	it	cc
 800ad28:	2304      	movcc	r3, #4
 800ad2a:	f841 c003 	str.w	ip, [r1, r3]
 800ad2e:	f1bc 0f00 	cmp.w	ip, #0
 800ad32:	d001      	beq.n	800ad38 <__lshift+0xac>
 800ad34:	f108 0602 	add.w	r6, r8, #2
 800ad38:	3e01      	subs	r6, #1
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	612e      	str	r6, [r5, #16]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	f7ff fdd2 	bl	800a8e8 <_Bfree>
 800ad44:	4628      	mov	r0, r5
 800ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad4e:	3301      	adds	r3, #1
 800ad50:	e7c1      	b.n	800acd6 <__lshift+0x4a>
 800ad52:	3904      	subs	r1, #4
 800ad54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad5c:	4298      	cmp	r0, r3
 800ad5e:	d8f9      	bhi.n	800ad54 <__lshift+0xc8>
 800ad60:	e7ea      	b.n	800ad38 <__lshift+0xac>
 800ad62:	bf00      	nop
 800ad64:	0800c177 	.word	0x0800c177
 800ad68:	0800c188 	.word	0x0800c188

0800ad6c <__mcmp>:
 800ad6c:	b530      	push	{r4, r5, lr}
 800ad6e:	6902      	ldr	r2, [r0, #16]
 800ad70:	690c      	ldr	r4, [r1, #16]
 800ad72:	1b12      	subs	r2, r2, r4
 800ad74:	d10e      	bne.n	800ad94 <__mcmp+0x28>
 800ad76:	f100 0314 	add.w	r3, r0, #20
 800ad7a:	3114      	adds	r1, #20
 800ad7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad8c:	42a5      	cmp	r5, r4
 800ad8e:	d003      	beq.n	800ad98 <__mcmp+0x2c>
 800ad90:	d305      	bcc.n	800ad9e <__mcmp+0x32>
 800ad92:	2201      	movs	r2, #1
 800ad94:	4610      	mov	r0, r2
 800ad96:	bd30      	pop	{r4, r5, pc}
 800ad98:	4283      	cmp	r3, r0
 800ad9a:	d3f3      	bcc.n	800ad84 <__mcmp+0x18>
 800ad9c:	e7fa      	b.n	800ad94 <__mcmp+0x28>
 800ad9e:	f04f 32ff 	mov.w	r2, #4294967295
 800ada2:	e7f7      	b.n	800ad94 <__mcmp+0x28>

0800ada4 <__mdiff>:
 800ada4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	4606      	mov	r6, r0
 800adac:	4611      	mov	r1, r2
 800adae:	4620      	mov	r0, r4
 800adb0:	4690      	mov	r8, r2
 800adb2:	f7ff ffdb 	bl	800ad6c <__mcmp>
 800adb6:	1e05      	subs	r5, r0, #0
 800adb8:	d110      	bne.n	800addc <__mdiff+0x38>
 800adba:	4629      	mov	r1, r5
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff fd53 	bl	800a868 <_Balloc>
 800adc2:	b930      	cbnz	r0, 800add2 <__mdiff+0x2e>
 800adc4:	4b3a      	ldr	r3, [pc, #232]	; (800aeb0 <__mdiff+0x10c>)
 800adc6:	4602      	mov	r2, r0
 800adc8:	f240 2132 	movw	r1, #562	; 0x232
 800adcc:	4839      	ldr	r0, [pc, #228]	; (800aeb4 <__mdiff+0x110>)
 800adce:	f000 fb31 	bl	800b434 <__assert_func>
 800add2:	2301      	movs	r3, #1
 800add4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800add8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	bfa4      	itt	ge
 800adde:	4643      	movge	r3, r8
 800ade0:	46a0      	movge	r8, r4
 800ade2:	4630      	mov	r0, r6
 800ade4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ade8:	bfa6      	itte	ge
 800adea:	461c      	movge	r4, r3
 800adec:	2500      	movge	r5, #0
 800adee:	2501      	movlt	r5, #1
 800adf0:	f7ff fd3a 	bl	800a868 <_Balloc>
 800adf4:	b920      	cbnz	r0, 800ae00 <__mdiff+0x5c>
 800adf6:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <__mdiff+0x10c>)
 800adf8:	4602      	mov	r2, r0
 800adfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adfe:	e7e5      	b.n	800adcc <__mdiff+0x28>
 800ae00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae04:	6926      	ldr	r6, [r4, #16]
 800ae06:	60c5      	str	r5, [r0, #12]
 800ae08:	f104 0914 	add.w	r9, r4, #20
 800ae0c:	f108 0514 	add.w	r5, r8, #20
 800ae10:	f100 0e14 	add.w	lr, r0, #20
 800ae14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae1c:	f108 0210 	add.w	r2, r8, #16
 800ae20:	46f2      	mov	sl, lr
 800ae22:	2100      	movs	r1, #0
 800ae24:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae2c:	fa1f f883 	uxth.w	r8, r3
 800ae30:	fa11 f18b 	uxtah	r1, r1, fp
 800ae34:	0c1b      	lsrs	r3, r3, #16
 800ae36:	eba1 0808 	sub.w	r8, r1, r8
 800ae3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae42:	fa1f f888 	uxth.w	r8, r8
 800ae46:	1419      	asrs	r1, r3, #16
 800ae48:	454e      	cmp	r6, r9
 800ae4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae4e:	f84a 3b04 	str.w	r3, [sl], #4
 800ae52:	d8e7      	bhi.n	800ae24 <__mdiff+0x80>
 800ae54:	1b33      	subs	r3, r6, r4
 800ae56:	3b15      	subs	r3, #21
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	3415      	adds	r4, #21
 800ae60:	42a6      	cmp	r6, r4
 800ae62:	bf38      	it	cc
 800ae64:	2304      	movcc	r3, #4
 800ae66:	441d      	add	r5, r3
 800ae68:	4473      	add	r3, lr
 800ae6a:	469e      	mov	lr, r3
 800ae6c:	462e      	mov	r6, r5
 800ae6e:	4566      	cmp	r6, ip
 800ae70:	d30e      	bcc.n	800ae90 <__mdiff+0xec>
 800ae72:	f10c 0203 	add.w	r2, ip, #3
 800ae76:	1b52      	subs	r2, r2, r5
 800ae78:	f022 0203 	bic.w	r2, r2, #3
 800ae7c:	3d03      	subs	r5, #3
 800ae7e:	45ac      	cmp	ip, r5
 800ae80:	bf38      	it	cc
 800ae82:	2200      	movcc	r2, #0
 800ae84:	441a      	add	r2, r3
 800ae86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae8a:	b17b      	cbz	r3, 800aeac <__mdiff+0x108>
 800ae8c:	6107      	str	r7, [r0, #16]
 800ae8e:	e7a3      	b.n	800add8 <__mdiff+0x34>
 800ae90:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae94:	fa11 f288 	uxtah	r2, r1, r8
 800ae98:	1414      	asrs	r4, r2, #16
 800ae9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aea4:	f84e 2b04 	str.w	r2, [lr], #4
 800aea8:	1421      	asrs	r1, r4, #16
 800aeaa:	e7e0      	b.n	800ae6e <__mdiff+0xca>
 800aeac:	3f01      	subs	r7, #1
 800aeae:	e7ea      	b.n	800ae86 <__mdiff+0xe2>
 800aeb0:	0800c177 	.word	0x0800c177
 800aeb4:	0800c188 	.word	0x0800c188

0800aeb8 <__d2b>:
 800aeb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	4689      	mov	r9, r1
 800aebe:	2101      	movs	r1, #1
 800aec0:	ec57 6b10 	vmov	r6, r7, d0
 800aec4:	4690      	mov	r8, r2
 800aec6:	f7ff fccf 	bl	800a868 <_Balloc>
 800aeca:	4604      	mov	r4, r0
 800aecc:	b930      	cbnz	r0, 800aedc <__d2b+0x24>
 800aece:	4602      	mov	r2, r0
 800aed0:	4b25      	ldr	r3, [pc, #148]	; (800af68 <__d2b+0xb0>)
 800aed2:	4826      	ldr	r0, [pc, #152]	; (800af6c <__d2b+0xb4>)
 800aed4:	f240 310a 	movw	r1, #778	; 0x30a
 800aed8:	f000 faac 	bl	800b434 <__assert_func>
 800aedc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aee4:	bb35      	cbnz	r5, 800af34 <__d2b+0x7c>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	d028      	beq.n	800af3e <__d2b+0x86>
 800aeec:	4668      	mov	r0, sp
 800aeee:	9600      	str	r6, [sp, #0]
 800aef0:	f7ff fd82 	bl	800a9f8 <__lo0bits>
 800aef4:	9900      	ldr	r1, [sp, #0]
 800aef6:	b300      	cbz	r0, 800af3a <__d2b+0x82>
 800aef8:	9a01      	ldr	r2, [sp, #4]
 800aefa:	f1c0 0320 	rsb	r3, r0, #32
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	430b      	orrs	r3, r1
 800af04:	40c2      	lsrs	r2, r0
 800af06:	6163      	str	r3, [r4, #20]
 800af08:	9201      	str	r2, [sp, #4]
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	61a3      	str	r3, [r4, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf14      	ite	ne
 800af12:	2202      	movne	r2, #2
 800af14:	2201      	moveq	r2, #1
 800af16:	6122      	str	r2, [r4, #16]
 800af18:	b1d5      	cbz	r5, 800af50 <__d2b+0x98>
 800af1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af1e:	4405      	add	r5, r0
 800af20:	f8c9 5000 	str.w	r5, [r9]
 800af24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af28:	f8c8 0000 	str.w	r0, [r8]
 800af2c:	4620      	mov	r0, r4
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af38:	e7d5      	b.n	800aee6 <__d2b+0x2e>
 800af3a:	6161      	str	r1, [r4, #20]
 800af3c:	e7e5      	b.n	800af0a <__d2b+0x52>
 800af3e:	a801      	add	r0, sp, #4
 800af40:	f7ff fd5a 	bl	800a9f8 <__lo0bits>
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	6163      	str	r3, [r4, #20]
 800af48:	2201      	movs	r2, #1
 800af4a:	6122      	str	r2, [r4, #16]
 800af4c:	3020      	adds	r0, #32
 800af4e:	e7e3      	b.n	800af18 <__d2b+0x60>
 800af50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af58:	f8c9 0000 	str.w	r0, [r9]
 800af5c:	6918      	ldr	r0, [r3, #16]
 800af5e:	f7ff fd2b 	bl	800a9b8 <__hi0bits>
 800af62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af66:	e7df      	b.n	800af28 <__d2b+0x70>
 800af68:	0800c177 	.word	0x0800c177
 800af6c:	0800c188 	.word	0x0800c188

0800af70 <_calloc_r>:
 800af70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af72:	fba1 2402 	umull	r2, r4, r1, r2
 800af76:	b94c      	cbnz	r4, 800af8c <_calloc_r+0x1c>
 800af78:	4611      	mov	r1, r2
 800af7a:	9201      	str	r2, [sp, #4]
 800af7c:	f000 f87a 	bl	800b074 <_malloc_r>
 800af80:	9a01      	ldr	r2, [sp, #4]
 800af82:	4605      	mov	r5, r0
 800af84:	b930      	cbnz	r0, 800af94 <_calloc_r+0x24>
 800af86:	4628      	mov	r0, r5
 800af88:	b003      	add	sp, #12
 800af8a:	bd30      	pop	{r4, r5, pc}
 800af8c:	220c      	movs	r2, #12
 800af8e:	6002      	str	r2, [r0, #0]
 800af90:	2500      	movs	r5, #0
 800af92:	e7f8      	b.n	800af86 <_calloc_r+0x16>
 800af94:	4621      	mov	r1, r4
 800af96:	f7fe f93f 	bl	8009218 <memset>
 800af9a:	e7f4      	b.n	800af86 <_calloc_r+0x16>

0800af9c <_free_r>:
 800af9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af9e:	2900      	cmp	r1, #0
 800afa0:	d044      	beq.n	800b02c <_free_r+0x90>
 800afa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa6:	9001      	str	r0, [sp, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f1a1 0404 	sub.w	r4, r1, #4
 800afae:	bfb8      	it	lt
 800afb0:	18e4      	addlt	r4, r4, r3
 800afb2:	f000 fa9b 	bl	800b4ec <__malloc_lock>
 800afb6:	4a1e      	ldr	r2, [pc, #120]	; (800b030 <_free_r+0x94>)
 800afb8:	9801      	ldr	r0, [sp, #4]
 800afba:	6813      	ldr	r3, [r2, #0]
 800afbc:	b933      	cbnz	r3, 800afcc <_free_r+0x30>
 800afbe:	6063      	str	r3, [r4, #4]
 800afc0:	6014      	str	r4, [r2, #0]
 800afc2:	b003      	add	sp, #12
 800afc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afc8:	f000 ba96 	b.w	800b4f8 <__malloc_unlock>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d908      	bls.n	800afe2 <_free_r+0x46>
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	428b      	cmp	r3, r1
 800afd6:	bf01      	itttt	eq
 800afd8:	6819      	ldreq	r1, [r3, #0]
 800afda:	685b      	ldreq	r3, [r3, #4]
 800afdc:	1949      	addeq	r1, r1, r5
 800afde:	6021      	streq	r1, [r4, #0]
 800afe0:	e7ed      	b.n	800afbe <_free_r+0x22>
 800afe2:	461a      	mov	r2, r3
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	b10b      	cbz	r3, 800afec <_free_r+0x50>
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d9fa      	bls.n	800afe2 <_free_r+0x46>
 800afec:	6811      	ldr	r1, [r2, #0]
 800afee:	1855      	adds	r5, r2, r1
 800aff0:	42a5      	cmp	r5, r4
 800aff2:	d10b      	bne.n	800b00c <_free_r+0x70>
 800aff4:	6824      	ldr	r4, [r4, #0]
 800aff6:	4421      	add	r1, r4
 800aff8:	1854      	adds	r4, r2, r1
 800affa:	42a3      	cmp	r3, r4
 800affc:	6011      	str	r1, [r2, #0]
 800affe:	d1e0      	bne.n	800afc2 <_free_r+0x26>
 800b000:	681c      	ldr	r4, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	6053      	str	r3, [r2, #4]
 800b006:	4421      	add	r1, r4
 800b008:	6011      	str	r1, [r2, #0]
 800b00a:	e7da      	b.n	800afc2 <_free_r+0x26>
 800b00c:	d902      	bls.n	800b014 <_free_r+0x78>
 800b00e:	230c      	movs	r3, #12
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	e7d6      	b.n	800afc2 <_free_r+0x26>
 800b014:	6825      	ldr	r5, [r4, #0]
 800b016:	1961      	adds	r1, r4, r5
 800b018:	428b      	cmp	r3, r1
 800b01a:	bf04      	itt	eq
 800b01c:	6819      	ldreq	r1, [r3, #0]
 800b01e:	685b      	ldreq	r3, [r3, #4]
 800b020:	6063      	str	r3, [r4, #4]
 800b022:	bf04      	itt	eq
 800b024:	1949      	addeq	r1, r1, r5
 800b026:	6021      	streq	r1, [r4, #0]
 800b028:	6054      	str	r4, [r2, #4]
 800b02a:	e7ca      	b.n	800afc2 <_free_r+0x26>
 800b02c:	b003      	add	sp, #12
 800b02e:	bd30      	pop	{r4, r5, pc}
 800b030:	20001fec 	.word	0x20001fec

0800b034 <sbrk_aligned>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	4e0e      	ldr	r6, [pc, #56]	; (800b070 <sbrk_aligned+0x3c>)
 800b038:	460c      	mov	r4, r1
 800b03a:	6831      	ldr	r1, [r6, #0]
 800b03c:	4605      	mov	r5, r0
 800b03e:	b911      	cbnz	r1, 800b046 <sbrk_aligned+0x12>
 800b040:	f000 f9e8 	bl	800b414 <_sbrk_r>
 800b044:	6030      	str	r0, [r6, #0]
 800b046:	4621      	mov	r1, r4
 800b048:	4628      	mov	r0, r5
 800b04a:	f000 f9e3 	bl	800b414 <_sbrk_r>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	d00a      	beq.n	800b068 <sbrk_aligned+0x34>
 800b052:	1cc4      	adds	r4, r0, #3
 800b054:	f024 0403 	bic.w	r4, r4, #3
 800b058:	42a0      	cmp	r0, r4
 800b05a:	d007      	beq.n	800b06c <sbrk_aligned+0x38>
 800b05c:	1a21      	subs	r1, r4, r0
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 f9d8 	bl	800b414 <_sbrk_r>
 800b064:	3001      	adds	r0, #1
 800b066:	d101      	bne.n	800b06c <sbrk_aligned+0x38>
 800b068:	f04f 34ff 	mov.w	r4, #4294967295
 800b06c:	4620      	mov	r0, r4
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	20001ff0 	.word	0x20001ff0

0800b074 <_malloc_r>:
 800b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	1ccd      	adds	r5, r1, #3
 800b07a:	f025 0503 	bic.w	r5, r5, #3
 800b07e:	3508      	adds	r5, #8
 800b080:	2d0c      	cmp	r5, #12
 800b082:	bf38      	it	cc
 800b084:	250c      	movcc	r5, #12
 800b086:	2d00      	cmp	r5, #0
 800b088:	4607      	mov	r7, r0
 800b08a:	db01      	blt.n	800b090 <_malloc_r+0x1c>
 800b08c:	42a9      	cmp	r1, r5
 800b08e:	d905      	bls.n	800b09c <_malloc_r+0x28>
 800b090:	230c      	movs	r3, #12
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	2600      	movs	r6, #0
 800b096:	4630      	mov	r0, r6
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	4e2e      	ldr	r6, [pc, #184]	; (800b158 <_malloc_r+0xe4>)
 800b09e:	f000 fa25 	bl	800b4ec <__malloc_lock>
 800b0a2:	6833      	ldr	r3, [r6, #0]
 800b0a4:	461c      	mov	r4, r3
 800b0a6:	bb34      	cbnz	r4, 800b0f6 <_malloc_r+0x82>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f7ff ffc2 	bl	800b034 <sbrk_aligned>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	d14d      	bne.n	800b152 <_malloc_r+0xde>
 800b0b6:	6834      	ldr	r4, [r6, #0]
 800b0b8:	4626      	mov	r6, r4
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	d140      	bne.n	800b140 <_malloc_r+0xcc>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	eb04 0803 	add.w	r8, r4, r3
 800b0c8:	f000 f9a4 	bl	800b414 <_sbrk_r>
 800b0cc:	4580      	cmp	r8, r0
 800b0ce:	d13a      	bne.n	800b146 <_malloc_r+0xd2>
 800b0d0:	6821      	ldr	r1, [r4, #0]
 800b0d2:	3503      	adds	r5, #3
 800b0d4:	1a6d      	subs	r5, r5, r1
 800b0d6:	f025 0503 	bic.w	r5, r5, #3
 800b0da:	3508      	adds	r5, #8
 800b0dc:	2d0c      	cmp	r5, #12
 800b0de:	bf38      	it	cc
 800b0e0:	250c      	movcc	r5, #12
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f7ff ffa5 	bl	800b034 <sbrk_aligned>
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	d02b      	beq.n	800b146 <_malloc_r+0xd2>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	442b      	add	r3, r5
 800b0f2:	6023      	str	r3, [r4, #0]
 800b0f4:	e00e      	b.n	800b114 <_malloc_r+0xa0>
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	1b52      	subs	r2, r2, r5
 800b0fa:	d41e      	bmi.n	800b13a <_malloc_r+0xc6>
 800b0fc:	2a0b      	cmp	r2, #11
 800b0fe:	d916      	bls.n	800b12e <_malloc_r+0xba>
 800b100:	1961      	adds	r1, r4, r5
 800b102:	42a3      	cmp	r3, r4
 800b104:	6025      	str	r5, [r4, #0]
 800b106:	bf18      	it	ne
 800b108:	6059      	strne	r1, [r3, #4]
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	bf08      	it	eq
 800b10e:	6031      	streq	r1, [r6, #0]
 800b110:	5162      	str	r2, [r4, r5]
 800b112:	604b      	str	r3, [r1, #4]
 800b114:	4638      	mov	r0, r7
 800b116:	f104 060b 	add.w	r6, r4, #11
 800b11a:	f000 f9ed 	bl	800b4f8 <__malloc_unlock>
 800b11e:	f026 0607 	bic.w	r6, r6, #7
 800b122:	1d23      	adds	r3, r4, #4
 800b124:	1af2      	subs	r2, r6, r3
 800b126:	d0b6      	beq.n	800b096 <_malloc_r+0x22>
 800b128:	1b9b      	subs	r3, r3, r6
 800b12a:	50a3      	str	r3, [r4, r2]
 800b12c:	e7b3      	b.n	800b096 <_malloc_r+0x22>
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	42a3      	cmp	r3, r4
 800b132:	bf0c      	ite	eq
 800b134:	6032      	streq	r2, [r6, #0]
 800b136:	605a      	strne	r2, [r3, #4]
 800b138:	e7ec      	b.n	800b114 <_malloc_r+0xa0>
 800b13a:	4623      	mov	r3, r4
 800b13c:	6864      	ldr	r4, [r4, #4]
 800b13e:	e7b2      	b.n	800b0a6 <_malloc_r+0x32>
 800b140:	4634      	mov	r4, r6
 800b142:	6876      	ldr	r6, [r6, #4]
 800b144:	e7b9      	b.n	800b0ba <_malloc_r+0x46>
 800b146:	230c      	movs	r3, #12
 800b148:	603b      	str	r3, [r7, #0]
 800b14a:	4638      	mov	r0, r7
 800b14c:	f000 f9d4 	bl	800b4f8 <__malloc_unlock>
 800b150:	e7a1      	b.n	800b096 <_malloc_r+0x22>
 800b152:	6025      	str	r5, [r4, #0]
 800b154:	e7de      	b.n	800b114 <_malloc_r+0xa0>
 800b156:	bf00      	nop
 800b158:	20001fec 	.word	0x20001fec

0800b15c <__ssputs_r>:
 800b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	688e      	ldr	r6, [r1, #8]
 800b162:	429e      	cmp	r6, r3
 800b164:	4682      	mov	sl, r0
 800b166:	460c      	mov	r4, r1
 800b168:	4690      	mov	r8, r2
 800b16a:	461f      	mov	r7, r3
 800b16c:	d838      	bhi.n	800b1e0 <__ssputs_r+0x84>
 800b16e:	898a      	ldrh	r2, [r1, #12]
 800b170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b174:	d032      	beq.n	800b1dc <__ssputs_r+0x80>
 800b176:	6825      	ldr	r5, [r4, #0]
 800b178:	6909      	ldr	r1, [r1, #16]
 800b17a:	eba5 0901 	sub.w	r9, r5, r1
 800b17e:	6965      	ldr	r5, [r4, #20]
 800b180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b188:	3301      	adds	r3, #1
 800b18a:	444b      	add	r3, r9
 800b18c:	106d      	asrs	r5, r5, #1
 800b18e:	429d      	cmp	r5, r3
 800b190:	bf38      	it	cc
 800b192:	461d      	movcc	r5, r3
 800b194:	0553      	lsls	r3, r2, #21
 800b196:	d531      	bpl.n	800b1fc <__ssputs_r+0xa0>
 800b198:	4629      	mov	r1, r5
 800b19a:	f7ff ff6b 	bl	800b074 <_malloc_r>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	b950      	cbnz	r0, 800b1b8 <__ssputs_r+0x5c>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	f8ca 3000 	str.w	r3, [sl]
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b8:	6921      	ldr	r1, [r4, #16]
 800b1ba:	464a      	mov	r2, r9
 800b1bc:	f7ff fb46 	bl	800a84c <memcpy>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	6126      	str	r6, [r4, #16]
 800b1ce:	6165      	str	r5, [r4, #20]
 800b1d0:	444e      	add	r6, r9
 800b1d2:	eba5 0509 	sub.w	r5, r5, r9
 800b1d6:	6026      	str	r6, [r4, #0]
 800b1d8:	60a5      	str	r5, [r4, #8]
 800b1da:	463e      	mov	r6, r7
 800b1dc:	42be      	cmp	r6, r7
 800b1de:	d900      	bls.n	800b1e2 <__ssputs_r+0x86>
 800b1e0:	463e      	mov	r6, r7
 800b1e2:	6820      	ldr	r0, [r4, #0]
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4641      	mov	r1, r8
 800b1e8:	f000 f966 	bl	800b4b8 <memmove>
 800b1ec:	68a3      	ldr	r3, [r4, #8]
 800b1ee:	1b9b      	subs	r3, r3, r6
 800b1f0:	60a3      	str	r3, [r4, #8]
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	4433      	add	r3, r6
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e7db      	b.n	800b1b4 <__ssputs_r+0x58>
 800b1fc:	462a      	mov	r2, r5
 800b1fe:	f000 f981 	bl	800b504 <_realloc_r>
 800b202:	4606      	mov	r6, r0
 800b204:	2800      	cmp	r0, #0
 800b206:	d1e1      	bne.n	800b1cc <__ssputs_r+0x70>
 800b208:	6921      	ldr	r1, [r4, #16]
 800b20a:	4650      	mov	r0, sl
 800b20c:	f7ff fec6 	bl	800af9c <_free_r>
 800b210:	e7c7      	b.n	800b1a2 <__ssputs_r+0x46>
	...

0800b214 <_svfiprintf_r>:
 800b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	4698      	mov	r8, r3
 800b21a:	898b      	ldrh	r3, [r1, #12]
 800b21c:	061b      	lsls	r3, r3, #24
 800b21e:	b09d      	sub	sp, #116	; 0x74
 800b220:	4607      	mov	r7, r0
 800b222:	460d      	mov	r5, r1
 800b224:	4614      	mov	r4, r2
 800b226:	d50e      	bpl.n	800b246 <_svfiprintf_r+0x32>
 800b228:	690b      	ldr	r3, [r1, #16]
 800b22a:	b963      	cbnz	r3, 800b246 <_svfiprintf_r+0x32>
 800b22c:	2140      	movs	r1, #64	; 0x40
 800b22e:	f7ff ff21 	bl	800b074 <_malloc_r>
 800b232:	6028      	str	r0, [r5, #0]
 800b234:	6128      	str	r0, [r5, #16]
 800b236:	b920      	cbnz	r0, 800b242 <_svfiprintf_r+0x2e>
 800b238:	230c      	movs	r3, #12
 800b23a:	603b      	str	r3, [r7, #0]
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	e0d1      	b.n	800b3e6 <_svfiprintf_r+0x1d2>
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	616b      	str	r3, [r5, #20]
 800b246:	2300      	movs	r3, #0
 800b248:	9309      	str	r3, [sp, #36]	; 0x24
 800b24a:	2320      	movs	r3, #32
 800b24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b250:	f8cd 800c 	str.w	r8, [sp, #12]
 800b254:	2330      	movs	r3, #48	; 0x30
 800b256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b400 <_svfiprintf_r+0x1ec>
 800b25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b25e:	f04f 0901 	mov.w	r9, #1
 800b262:	4623      	mov	r3, r4
 800b264:	469a      	mov	sl, r3
 800b266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b26a:	b10a      	cbz	r2, 800b270 <_svfiprintf_r+0x5c>
 800b26c:	2a25      	cmp	r2, #37	; 0x25
 800b26e:	d1f9      	bne.n	800b264 <_svfiprintf_r+0x50>
 800b270:	ebba 0b04 	subs.w	fp, sl, r4
 800b274:	d00b      	beq.n	800b28e <_svfiprintf_r+0x7a>
 800b276:	465b      	mov	r3, fp
 800b278:	4622      	mov	r2, r4
 800b27a:	4629      	mov	r1, r5
 800b27c:	4638      	mov	r0, r7
 800b27e:	f7ff ff6d 	bl	800b15c <__ssputs_r>
 800b282:	3001      	adds	r0, #1
 800b284:	f000 80aa 	beq.w	800b3dc <_svfiprintf_r+0x1c8>
 800b288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b28a:	445a      	add	r2, fp
 800b28c:	9209      	str	r2, [sp, #36]	; 0x24
 800b28e:	f89a 3000 	ldrb.w	r3, [sl]
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 80a2 	beq.w	800b3dc <_svfiprintf_r+0x1c8>
 800b298:	2300      	movs	r3, #0
 800b29a:	f04f 32ff 	mov.w	r2, #4294967295
 800b29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a2:	f10a 0a01 	add.w	sl, sl, #1
 800b2a6:	9304      	str	r3, [sp, #16]
 800b2a8:	9307      	str	r3, [sp, #28]
 800b2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b0:	4654      	mov	r4, sl
 800b2b2:	2205      	movs	r2, #5
 800b2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b8:	4851      	ldr	r0, [pc, #324]	; (800b400 <_svfiprintf_r+0x1ec>)
 800b2ba:	f7f4 ff99 	bl	80001f0 <memchr>
 800b2be:	9a04      	ldr	r2, [sp, #16]
 800b2c0:	b9d8      	cbnz	r0, 800b2fa <_svfiprintf_r+0xe6>
 800b2c2:	06d0      	lsls	r0, r2, #27
 800b2c4:	bf44      	itt	mi
 800b2c6:	2320      	movmi	r3, #32
 800b2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2cc:	0711      	lsls	r1, r2, #28
 800b2ce:	bf44      	itt	mi
 800b2d0:	232b      	movmi	r3, #43	; 0x2b
 800b2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2da:	2b2a      	cmp	r3, #42	; 0x2a
 800b2dc:	d015      	beq.n	800b30a <_svfiprintf_r+0xf6>
 800b2de:	9a07      	ldr	r2, [sp, #28]
 800b2e0:	4654      	mov	r4, sl
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f04f 0c0a 	mov.w	ip, #10
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ee:	3b30      	subs	r3, #48	; 0x30
 800b2f0:	2b09      	cmp	r3, #9
 800b2f2:	d94e      	bls.n	800b392 <_svfiprintf_r+0x17e>
 800b2f4:	b1b0      	cbz	r0, 800b324 <_svfiprintf_r+0x110>
 800b2f6:	9207      	str	r2, [sp, #28]
 800b2f8:	e014      	b.n	800b324 <_svfiprintf_r+0x110>
 800b2fa:	eba0 0308 	sub.w	r3, r0, r8
 800b2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b302:	4313      	orrs	r3, r2
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	46a2      	mov	sl, r4
 800b308:	e7d2      	b.n	800b2b0 <_svfiprintf_r+0x9c>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	1d19      	adds	r1, r3, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	9103      	str	r1, [sp, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfbb      	ittet	lt
 800b316:	425b      	neglt	r3, r3
 800b318:	f042 0202 	orrlt.w	r2, r2, #2
 800b31c:	9307      	strge	r3, [sp, #28]
 800b31e:	9307      	strlt	r3, [sp, #28]
 800b320:	bfb8      	it	lt
 800b322:	9204      	strlt	r2, [sp, #16]
 800b324:	7823      	ldrb	r3, [r4, #0]
 800b326:	2b2e      	cmp	r3, #46	; 0x2e
 800b328:	d10c      	bne.n	800b344 <_svfiprintf_r+0x130>
 800b32a:	7863      	ldrb	r3, [r4, #1]
 800b32c:	2b2a      	cmp	r3, #42	; 0x2a
 800b32e:	d135      	bne.n	800b39c <_svfiprintf_r+0x188>
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	1d1a      	adds	r2, r3, #4
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	9203      	str	r2, [sp, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bfb8      	it	lt
 800b33c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b340:	3402      	adds	r4, #2
 800b342:	9305      	str	r3, [sp, #20]
 800b344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b410 <_svfiprintf_r+0x1fc>
 800b348:	7821      	ldrb	r1, [r4, #0]
 800b34a:	2203      	movs	r2, #3
 800b34c:	4650      	mov	r0, sl
 800b34e:	f7f4 ff4f 	bl	80001f0 <memchr>
 800b352:	b140      	cbz	r0, 800b366 <_svfiprintf_r+0x152>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	eba0 000a 	sub.w	r0, r0, sl
 800b35a:	fa03 f000 	lsl.w	r0, r3, r0
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	4303      	orrs	r3, r0
 800b362:	3401      	adds	r4, #1
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36a:	4826      	ldr	r0, [pc, #152]	; (800b404 <_svfiprintf_r+0x1f0>)
 800b36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b370:	2206      	movs	r2, #6
 800b372:	f7f4 ff3d 	bl	80001f0 <memchr>
 800b376:	2800      	cmp	r0, #0
 800b378:	d038      	beq.n	800b3ec <_svfiprintf_r+0x1d8>
 800b37a:	4b23      	ldr	r3, [pc, #140]	; (800b408 <_svfiprintf_r+0x1f4>)
 800b37c:	bb1b      	cbnz	r3, 800b3c6 <_svfiprintf_r+0x1b2>
 800b37e:	9b03      	ldr	r3, [sp, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	f023 0307 	bic.w	r3, r3, #7
 800b386:	3308      	adds	r3, #8
 800b388:	9303      	str	r3, [sp, #12]
 800b38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38c:	4433      	add	r3, r6
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	e767      	b.n	800b262 <_svfiprintf_r+0x4e>
 800b392:	fb0c 3202 	mla	r2, ip, r2, r3
 800b396:	460c      	mov	r4, r1
 800b398:	2001      	movs	r0, #1
 800b39a:	e7a5      	b.n	800b2e8 <_svfiprintf_r+0xd4>
 800b39c:	2300      	movs	r3, #0
 800b39e:	3401      	adds	r4, #1
 800b3a0:	9305      	str	r3, [sp, #20]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	f04f 0c0a 	mov.w	ip, #10
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ae:	3a30      	subs	r2, #48	; 0x30
 800b3b0:	2a09      	cmp	r2, #9
 800b3b2:	d903      	bls.n	800b3bc <_svfiprintf_r+0x1a8>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d0c5      	beq.n	800b344 <_svfiprintf_r+0x130>
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	e7c3      	b.n	800b344 <_svfiprintf_r+0x130>
 800b3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e7f0      	b.n	800b3a8 <_svfiprintf_r+0x194>
 800b3c6:	ab03      	add	r3, sp, #12
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <_svfiprintf_r+0x1f8>)
 800b3ce:	a904      	add	r1, sp, #16
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	f7fd ffc9 	bl	8009368 <_printf_float>
 800b3d6:	1c42      	adds	r2, r0, #1
 800b3d8:	4606      	mov	r6, r0
 800b3da:	d1d6      	bne.n	800b38a <_svfiprintf_r+0x176>
 800b3dc:	89ab      	ldrh	r3, [r5, #12]
 800b3de:	065b      	lsls	r3, r3, #25
 800b3e0:	f53f af2c 	bmi.w	800b23c <_svfiprintf_r+0x28>
 800b3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e6:	b01d      	add	sp, #116	; 0x74
 800b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ec:	ab03      	add	r3, sp, #12
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <_svfiprintf_r+0x1f8>)
 800b3f4:	a904      	add	r1, sp, #16
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	f7fe fa5a 	bl	80098b0 <_printf_i>
 800b3fc:	e7eb      	b.n	800b3d6 <_svfiprintf_r+0x1c2>
 800b3fe:	bf00      	nop
 800b400:	0800c2e4 	.word	0x0800c2e4
 800b404:	0800c2ee 	.word	0x0800c2ee
 800b408:	08009369 	.word	0x08009369
 800b40c:	0800b15d 	.word	0x0800b15d
 800b410:	0800c2ea 	.word	0x0800c2ea

0800b414 <_sbrk_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d06      	ldr	r5, [pc, #24]	; (800b430 <_sbrk_r+0x1c>)
 800b418:	2300      	movs	r3, #0
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	f7f6 f8a2 	bl	8001568 <_sbrk>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_sbrk_r+0x1a>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_sbrk_r+0x1a>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	20001ff4 	.word	0x20001ff4

0800b434 <__assert_func>:
 800b434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b436:	4614      	mov	r4, r2
 800b438:	461a      	mov	r2, r3
 800b43a:	4b09      	ldr	r3, [pc, #36]	; (800b460 <__assert_func+0x2c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4605      	mov	r5, r0
 800b440:	68d8      	ldr	r0, [r3, #12]
 800b442:	b14c      	cbz	r4, 800b458 <__assert_func+0x24>
 800b444:	4b07      	ldr	r3, [pc, #28]	; (800b464 <__assert_func+0x30>)
 800b446:	9100      	str	r1, [sp, #0]
 800b448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b44c:	4906      	ldr	r1, [pc, #24]	; (800b468 <__assert_func+0x34>)
 800b44e:	462b      	mov	r3, r5
 800b450:	f000 f80e 	bl	800b470 <fiprintf>
 800b454:	f000 faac 	bl	800b9b0 <abort>
 800b458:	4b04      	ldr	r3, [pc, #16]	; (800b46c <__assert_func+0x38>)
 800b45a:	461c      	mov	r4, r3
 800b45c:	e7f3      	b.n	800b446 <__assert_func+0x12>
 800b45e:	bf00      	nop
 800b460:	20000168 	.word	0x20000168
 800b464:	0800c2f5 	.word	0x0800c2f5
 800b468:	0800c302 	.word	0x0800c302
 800b46c:	0800c330 	.word	0x0800c330

0800b470 <fiprintf>:
 800b470:	b40e      	push	{r1, r2, r3}
 800b472:	b503      	push	{r0, r1, lr}
 800b474:	4601      	mov	r1, r0
 800b476:	ab03      	add	r3, sp, #12
 800b478:	4805      	ldr	r0, [pc, #20]	; (800b490 <fiprintf+0x20>)
 800b47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47e:	6800      	ldr	r0, [r0, #0]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	f000 f897 	bl	800b5b4 <_vfiprintf_r>
 800b486:	b002      	add	sp, #8
 800b488:	f85d eb04 	ldr.w	lr, [sp], #4
 800b48c:	b003      	add	sp, #12
 800b48e:	4770      	bx	lr
 800b490:	20000168 	.word	0x20000168

0800b494 <__ascii_mbtowc>:
 800b494:	b082      	sub	sp, #8
 800b496:	b901      	cbnz	r1, 800b49a <__ascii_mbtowc+0x6>
 800b498:	a901      	add	r1, sp, #4
 800b49a:	b142      	cbz	r2, 800b4ae <__ascii_mbtowc+0x1a>
 800b49c:	b14b      	cbz	r3, 800b4b2 <__ascii_mbtowc+0x1e>
 800b49e:	7813      	ldrb	r3, [r2, #0]
 800b4a0:	600b      	str	r3, [r1, #0]
 800b4a2:	7812      	ldrb	r2, [r2, #0]
 800b4a4:	1e10      	subs	r0, r2, #0
 800b4a6:	bf18      	it	ne
 800b4a8:	2001      	movne	r0, #1
 800b4aa:	b002      	add	sp, #8
 800b4ac:	4770      	bx	lr
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	e7fb      	b.n	800b4aa <__ascii_mbtowc+0x16>
 800b4b2:	f06f 0001 	mvn.w	r0, #1
 800b4b6:	e7f8      	b.n	800b4aa <__ascii_mbtowc+0x16>

0800b4b8 <memmove>:
 800b4b8:	4288      	cmp	r0, r1
 800b4ba:	b510      	push	{r4, lr}
 800b4bc:	eb01 0402 	add.w	r4, r1, r2
 800b4c0:	d902      	bls.n	800b4c8 <memmove+0x10>
 800b4c2:	4284      	cmp	r4, r0
 800b4c4:	4623      	mov	r3, r4
 800b4c6:	d807      	bhi.n	800b4d8 <memmove+0x20>
 800b4c8:	1e43      	subs	r3, r0, #1
 800b4ca:	42a1      	cmp	r1, r4
 800b4cc:	d008      	beq.n	800b4e0 <memmove+0x28>
 800b4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4d6:	e7f8      	b.n	800b4ca <memmove+0x12>
 800b4d8:	4402      	add	r2, r0
 800b4da:	4601      	mov	r1, r0
 800b4dc:	428a      	cmp	r2, r1
 800b4de:	d100      	bne.n	800b4e2 <memmove+0x2a>
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ea:	e7f7      	b.n	800b4dc <memmove+0x24>

0800b4ec <__malloc_lock>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__malloc_lock+0x8>)
 800b4ee:	f000 bc1f 	b.w	800bd30 <__retarget_lock_acquire_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	20001ff8 	.word	0x20001ff8

0800b4f8 <__malloc_unlock>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	; (800b500 <__malloc_unlock+0x8>)
 800b4fa:	f000 bc1a 	b.w	800bd32 <__retarget_lock_release_recursive>
 800b4fe:	bf00      	nop
 800b500:	20001ff8 	.word	0x20001ff8

0800b504 <_realloc_r>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	4680      	mov	r8, r0
 800b50a:	4614      	mov	r4, r2
 800b50c:	460e      	mov	r6, r1
 800b50e:	b921      	cbnz	r1, 800b51a <_realloc_r+0x16>
 800b510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b514:	4611      	mov	r1, r2
 800b516:	f7ff bdad 	b.w	800b074 <_malloc_r>
 800b51a:	b92a      	cbnz	r2, 800b528 <_realloc_r+0x24>
 800b51c:	f7ff fd3e 	bl	800af9c <_free_r>
 800b520:	4625      	mov	r5, r4
 800b522:	4628      	mov	r0, r5
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	f000 fc6a 	bl	800be00 <_malloc_usable_size_r>
 800b52c:	4284      	cmp	r4, r0
 800b52e:	4607      	mov	r7, r0
 800b530:	d802      	bhi.n	800b538 <_realloc_r+0x34>
 800b532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b536:	d812      	bhi.n	800b55e <_realloc_r+0x5a>
 800b538:	4621      	mov	r1, r4
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7ff fd9a 	bl	800b074 <_malloc_r>
 800b540:	4605      	mov	r5, r0
 800b542:	2800      	cmp	r0, #0
 800b544:	d0ed      	beq.n	800b522 <_realloc_r+0x1e>
 800b546:	42bc      	cmp	r4, r7
 800b548:	4622      	mov	r2, r4
 800b54a:	4631      	mov	r1, r6
 800b54c:	bf28      	it	cs
 800b54e:	463a      	movcs	r2, r7
 800b550:	f7ff f97c 	bl	800a84c <memcpy>
 800b554:	4631      	mov	r1, r6
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff fd20 	bl	800af9c <_free_r>
 800b55c:	e7e1      	b.n	800b522 <_realloc_r+0x1e>
 800b55e:	4635      	mov	r5, r6
 800b560:	e7df      	b.n	800b522 <_realloc_r+0x1e>

0800b562 <__sfputc_r>:
 800b562:	6893      	ldr	r3, [r2, #8]
 800b564:	3b01      	subs	r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	b410      	push	{r4}
 800b56a:	6093      	str	r3, [r2, #8]
 800b56c:	da08      	bge.n	800b580 <__sfputc_r+0x1e>
 800b56e:	6994      	ldr	r4, [r2, #24]
 800b570:	42a3      	cmp	r3, r4
 800b572:	db01      	blt.n	800b578 <__sfputc_r+0x16>
 800b574:	290a      	cmp	r1, #10
 800b576:	d103      	bne.n	800b580 <__sfputc_r+0x1e>
 800b578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b57c:	f000 b94a 	b.w	800b814 <__swbuf_r>
 800b580:	6813      	ldr	r3, [r2, #0]
 800b582:	1c58      	adds	r0, r3, #1
 800b584:	6010      	str	r0, [r2, #0]
 800b586:	7019      	strb	r1, [r3, #0]
 800b588:	4608      	mov	r0, r1
 800b58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <__sfputs_r>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	4614      	mov	r4, r2
 800b598:	18d5      	adds	r5, r2, r3
 800b59a:	42ac      	cmp	r4, r5
 800b59c:	d101      	bne.n	800b5a2 <__sfputs_r+0x12>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e007      	b.n	800b5b2 <__sfputs_r+0x22>
 800b5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff ffda 	bl	800b562 <__sfputc_r>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	d1f3      	bne.n	800b59a <__sfputs_r+0xa>
 800b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5b4 <_vfiprintf_r>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	460d      	mov	r5, r1
 800b5ba:	b09d      	sub	sp, #116	; 0x74
 800b5bc:	4614      	mov	r4, r2
 800b5be:	4698      	mov	r8, r3
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	b118      	cbz	r0, 800b5cc <_vfiprintf_r+0x18>
 800b5c4:	6983      	ldr	r3, [r0, #24]
 800b5c6:	b90b      	cbnz	r3, 800b5cc <_vfiprintf_r+0x18>
 800b5c8:	f000 fb14 	bl	800bbf4 <__sinit>
 800b5cc:	4b89      	ldr	r3, [pc, #548]	; (800b7f4 <_vfiprintf_r+0x240>)
 800b5ce:	429d      	cmp	r5, r3
 800b5d0:	d11b      	bne.n	800b60a <_vfiprintf_r+0x56>
 800b5d2:	6875      	ldr	r5, [r6, #4]
 800b5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5d6:	07d9      	lsls	r1, r3, #31
 800b5d8:	d405      	bmi.n	800b5e6 <_vfiprintf_r+0x32>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_vfiprintf_r+0x32>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e2:	f000 fba5 	bl	800bd30 <__retarget_lock_acquire_recursive>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	071b      	lsls	r3, r3, #28
 800b5ea:	d501      	bpl.n	800b5f0 <_vfiprintf_r+0x3c>
 800b5ec:	692b      	ldr	r3, [r5, #16]
 800b5ee:	b9eb      	cbnz	r3, 800b62c <_vfiprintf_r+0x78>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f000 f96e 	bl	800b8d4 <__swsetup_r>
 800b5f8:	b1c0      	cbz	r0, 800b62c <_vfiprintf_r+0x78>
 800b5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5fc:	07dc      	lsls	r4, r3, #31
 800b5fe:	d50e      	bpl.n	800b61e <_vfiprintf_r+0x6a>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	b01d      	add	sp, #116	; 0x74
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60a:	4b7b      	ldr	r3, [pc, #492]	; (800b7f8 <_vfiprintf_r+0x244>)
 800b60c:	429d      	cmp	r5, r3
 800b60e:	d101      	bne.n	800b614 <_vfiprintf_r+0x60>
 800b610:	68b5      	ldr	r5, [r6, #8]
 800b612:	e7df      	b.n	800b5d4 <_vfiprintf_r+0x20>
 800b614:	4b79      	ldr	r3, [pc, #484]	; (800b7fc <_vfiprintf_r+0x248>)
 800b616:	429d      	cmp	r5, r3
 800b618:	bf08      	it	eq
 800b61a:	68f5      	ldreq	r5, [r6, #12]
 800b61c:	e7da      	b.n	800b5d4 <_vfiprintf_r+0x20>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	0598      	lsls	r0, r3, #22
 800b622:	d4ed      	bmi.n	800b600 <_vfiprintf_r+0x4c>
 800b624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b626:	f000 fb84 	bl	800bd32 <__retarget_lock_release_recursive>
 800b62a:	e7e9      	b.n	800b600 <_vfiprintf_r+0x4c>
 800b62c:	2300      	movs	r3, #0
 800b62e:	9309      	str	r3, [sp, #36]	; 0x24
 800b630:	2320      	movs	r3, #32
 800b632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b636:	f8cd 800c 	str.w	r8, [sp, #12]
 800b63a:	2330      	movs	r3, #48	; 0x30
 800b63c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b800 <_vfiprintf_r+0x24c>
 800b640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b644:	f04f 0901 	mov.w	r9, #1
 800b648:	4623      	mov	r3, r4
 800b64a:	469a      	mov	sl, r3
 800b64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b650:	b10a      	cbz	r2, 800b656 <_vfiprintf_r+0xa2>
 800b652:	2a25      	cmp	r2, #37	; 0x25
 800b654:	d1f9      	bne.n	800b64a <_vfiprintf_r+0x96>
 800b656:	ebba 0b04 	subs.w	fp, sl, r4
 800b65a:	d00b      	beq.n	800b674 <_vfiprintf_r+0xc0>
 800b65c:	465b      	mov	r3, fp
 800b65e:	4622      	mov	r2, r4
 800b660:	4629      	mov	r1, r5
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ff94 	bl	800b590 <__sfputs_r>
 800b668:	3001      	adds	r0, #1
 800b66a:	f000 80aa 	beq.w	800b7c2 <_vfiprintf_r+0x20e>
 800b66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b670:	445a      	add	r2, fp
 800b672:	9209      	str	r2, [sp, #36]	; 0x24
 800b674:	f89a 3000 	ldrb.w	r3, [sl]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80a2 	beq.w	800b7c2 <_vfiprintf_r+0x20e>
 800b67e:	2300      	movs	r3, #0
 800b680:	f04f 32ff 	mov.w	r2, #4294967295
 800b684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b688:	f10a 0a01 	add.w	sl, sl, #1
 800b68c:	9304      	str	r3, [sp, #16]
 800b68e:	9307      	str	r3, [sp, #28]
 800b690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b694:	931a      	str	r3, [sp, #104]	; 0x68
 800b696:	4654      	mov	r4, sl
 800b698:	2205      	movs	r2, #5
 800b69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69e:	4858      	ldr	r0, [pc, #352]	; (800b800 <_vfiprintf_r+0x24c>)
 800b6a0:	f7f4 fda6 	bl	80001f0 <memchr>
 800b6a4:	9a04      	ldr	r2, [sp, #16]
 800b6a6:	b9d8      	cbnz	r0, 800b6e0 <_vfiprintf_r+0x12c>
 800b6a8:	06d1      	lsls	r1, r2, #27
 800b6aa:	bf44      	itt	mi
 800b6ac:	2320      	movmi	r3, #32
 800b6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b2:	0713      	lsls	r3, r2, #28
 800b6b4:	bf44      	itt	mi
 800b6b6:	232b      	movmi	r3, #43	; 0x2b
 800b6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c2:	d015      	beq.n	800b6f0 <_vfiprintf_r+0x13c>
 800b6c4:	9a07      	ldr	r2, [sp, #28]
 800b6c6:	4654      	mov	r4, sl
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f04f 0c0a 	mov.w	ip, #10
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6d4:	3b30      	subs	r3, #48	; 0x30
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	d94e      	bls.n	800b778 <_vfiprintf_r+0x1c4>
 800b6da:	b1b0      	cbz	r0, 800b70a <_vfiprintf_r+0x156>
 800b6dc:	9207      	str	r2, [sp, #28]
 800b6de:	e014      	b.n	800b70a <_vfiprintf_r+0x156>
 800b6e0:	eba0 0308 	sub.w	r3, r0, r8
 800b6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	46a2      	mov	sl, r4
 800b6ee:	e7d2      	b.n	800b696 <_vfiprintf_r+0xe2>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	1d19      	adds	r1, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	9103      	str	r1, [sp, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	bfbb      	ittet	lt
 800b6fc:	425b      	neglt	r3, r3
 800b6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b702:	9307      	strge	r3, [sp, #28]
 800b704:	9307      	strlt	r3, [sp, #28]
 800b706:	bfb8      	it	lt
 800b708:	9204      	strlt	r2, [sp, #16]
 800b70a:	7823      	ldrb	r3, [r4, #0]
 800b70c:	2b2e      	cmp	r3, #46	; 0x2e
 800b70e:	d10c      	bne.n	800b72a <_vfiprintf_r+0x176>
 800b710:	7863      	ldrb	r3, [r4, #1]
 800b712:	2b2a      	cmp	r3, #42	; 0x2a
 800b714:	d135      	bne.n	800b782 <_vfiprintf_r+0x1ce>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	1d1a      	adds	r2, r3, #4
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	9203      	str	r2, [sp, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bfb8      	it	lt
 800b722:	f04f 33ff 	movlt.w	r3, #4294967295
 800b726:	3402      	adds	r4, #2
 800b728:	9305      	str	r3, [sp, #20]
 800b72a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b810 <_vfiprintf_r+0x25c>
 800b72e:	7821      	ldrb	r1, [r4, #0]
 800b730:	2203      	movs	r2, #3
 800b732:	4650      	mov	r0, sl
 800b734:	f7f4 fd5c 	bl	80001f0 <memchr>
 800b738:	b140      	cbz	r0, 800b74c <_vfiprintf_r+0x198>
 800b73a:	2340      	movs	r3, #64	; 0x40
 800b73c:	eba0 000a 	sub.w	r0, r0, sl
 800b740:	fa03 f000 	lsl.w	r0, r3, r0
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	4303      	orrs	r3, r0
 800b748:	3401      	adds	r4, #1
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b750:	482c      	ldr	r0, [pc, #176]	; (800b804 <_vfiprintf_r+0x250>)
 800b752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b756:	2206      	movs	r2, #6
 800b758:	f7f4 fd4a 	bl	80001f0 <memchr>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d03f      	beq.n	800b7e0 <_vfiprintf_r+0x22c>
 800b760:	4b29      	ldr	r3, [pc, #164]	; (800b808 <_vfiprintf_r+0x254>)
 800b762:	bb1b      	cbnz	r3, 800b7ac <_vfiprintf_r+0x1f8>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	3307      	adds	r3, #7
 800b768:	f023 0307 	bic.w	r3, r3, #7
 800b76c:	3308      	adds	r3, #8
 800b76e:	9303      	str	r3, [sp, #12]
 800b770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b772:	443b      	add	r3, r7
 800b774:	9309      	str	r3, [sp, #36]	; 0x24
 800b776:	e767      	b.n	800b648 <_vfiprintf_r+0x94>
 800b778:	fb0c 3202 	mla	r2, ip, r2, r3
 800b77c:	460c      	mov	r4, r1
 800b77e:	2001      	movs	r0, #1
 800b780:	e7a5      	b.n	800b6ce <_vfiprintf_r+0x11a>
 800b782:	2300      	movs	r3, #0
 800b784:	3401      	adds	r4, #1
 800b786:	9305      	str	r3, [sp, #20]
 800b788:	4619      	mov	r1, r3
 800b78a:	f04f 0c0a 	mov.w	ip, #10
 800b78e:	4620      	mov	r0, r4
 800b790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b794:	3a30      	subs	r2, #48	; 0x30
 800b796:	2a09      	cmp	r2, #9
 800b798:	d903      	bls.n	800b7a2 <_vfiprintf_r+0x1ee>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0c5      	beq.n	800b72a <_vfiprintf_r+0x176>
 800b79e:	9105      	str	r1, [sp, #20]
 800b7a0:	e7c3      	b.n	800b72a <_vfiprintf_r+0x176>
 800b7a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e7f0      	b.n	800b78e <_vfiprintf_r+0x1da>
 800b7ac:	ab03      	add	r3, sp, #12
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	4b16      	ldr	r3, [pc, #88]	; (800b80c <_vfiprintf_r+0x258>)
 800b7b4:	a904      	add	r1, sp, #16
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fd fdd6 	bl	8009368 <_printf_float>
 800b7bc:	4607      	mov	r7, r0
 800b7be:	1c78      	adds	r0, r7, #1
 800b7c0:	d1d6      	bne.n	800b770 <_vfiprintf_r+0x1bc>
 800b7c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c4:	07d9      	lsls	r1, r3, #31
 800b7c6:	d405      	bmi.n	800b7d4 <_vfiprintf_r+0x220>
 800b7c8:	89ab      	ldrh	r3, [r5, #12]
 800b7ca:	059a      	lsls	r2, r3, #22
 800b7cc:	d402      	bmi.n	800b7d4 <_vfiprintf_r+0x220>
 800b7ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7d0:	f000 faaf 	bl	800bd32 <__retarget_lock_release_recursive>
 800b7d4:	89ab      	ldrh	r3, [r5, #12]
 800b7d6:	065b      	lsls	r3, r3, #25
 800b7d8:	f53f af12 	bmi.w	800b600 <_vfiprintf_r+0x4c>
 800b7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7de:	e711      	b.n	800b604 <_vfiprintf_r+0x50>
 800b7e0:	ab03      	add	r3, sp, #12
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	462a      	mov	r2, r5
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <_vfiprintf_r+0x258>)
 800b7e8:	a904      	add	r1, sp, #16
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7fe f860 	bl	80098b0 <_printf_i>
 800b7f0:	e7e4      	b.n	800b7bc <_vfiprintf_r+0x208>
 800b7f2:	bf00      	nop
 800b7f4:	0800c45c 	.word	0x0800c45c
 800b7f8:	0800c47c 	.word	0x0800c47c
 800b7fc:	0800c43c 	.word	0x0800c43c
 800b800:	0800c2e4 	.word	0x0800c2e4
 800b804:	0800c2ee 	.word	0x0800c2ee
 800b808:	08009369 	.word	0x08009369
 800b80c:	0800b591 	.word	0x0800b591
 800b810:	0800c2ea 	.word	0x0800c2ea

0800b814 <__swbuf_r>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	460e      	mov	r6, r1
 800b818:	4614      	mov	r4, r2
 800b81a:	4605      	mov	r5, r0
 800b81c:	b118      	cbz	r0, 800b826 <__swbuf_r+0x12>
 800b81e:	6983      	ldr	r3, [r0, #24]
 800b820:	b90b      	cbnz	r3, 800b826 <__swbuf_r+0x12>
 800b822:	f000 f9e7 	bl	800bbf4 <__sinit>
 800b826:	4b21      	ldr	r3, [pc, #132]	; (800b8ac <__swbuf_r+0x98>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	d12b      	bne.n	800b884 <__swbuf_r+0x70>
 800b82c:	686c      	ldr	r4, [r5, #4]
 800b82e:	69a3      	ldr	r3, [r4, #24]
 800b830:	60a3      	str	r3, [r4, #8]
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	071a      	lsls	r2, r3, #28
 800b836:	d52f      	bpl.n	800b898 <__swbuf_r+0x84>
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b36b      	cbz	r3, 800b898 <__swbuf_r+0x84>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	1ac0      	subs	r0, r0, r3
 800b842:	6963      	ldr	r3, [r4, #20]
 800b844:	b2f6      	uxtb	r6, r6
 800b846:	4283      	cmp	r3, r0
 800b848:	4637      	mov	r7, r6
 800b84a:	dc04      	bgt.n	800b856 <__swbuf_r+0x42>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 f93c 	bl	800bacc <_fflush_r>
 800b854:	bb30      	cbnz	r0, 800b8a4 <__swbuf_r+0x90>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	3b01      	subs	r3, #1
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	6022      	str	r2, [r4, #0]
 800b862:	701e      	strb	r6, [r3, #0]
 800b864:	6963      	ldr	r3, [r4, #20]
 800b866:	3001      	adds	r0, #1
 800b868:	4283      	cmp	r3, r0
 800b86a:	d004      	beq.n	800b876 <__swbuf_r+0x62>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	07db      	lsls	r3, r3, #31
 800b870:	d506      	bpl.n	800b880 <__swbuf_r+0x6c>
 800b872:	2e0a      	cmp	r6, #10
 800b874:	d104      	bne.n	800b880 <__swbuf_r+0x6c>
 800b876:	4621      	mov	r1, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 f927 	bl	800bacc <_fflush_r>
 800b87e:	b988      	cbnz	r0, 800b8a4 <__swbuf_r+0x90>
 800b880:	4638      	mov	r0, r7
 800b882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b884:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <__swbuf_r+0x9c>)
 800b886:	429c      	cmp	r4, r3
 800b888:	d101      	bne.n	800b88e <__swbuf_r+0x7a>
 800b88a:	68ac      	ldr	r4, [r5, #8]
 800b88c:	e7cf      	b.n	800b82e <__swbuf_r+0x1a>
 800b88e:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <__swbuf_r+0xa0>)
 800b890:	429c      	cmp	r4, r3
 800b892:	bf08      	it	eq
 800b894:	68ec      	ldreq	r4, [r5, #12]
 800b896:	e7ca      	b.n	800b82e <__swbuf_r+0x1a>
 800b898:	4621      	mov	r1, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 f81a 	bl	800b8d4 <__swsetup_r>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d0cb      	beq.n	800b83c <__swbuf_r+0x28>
 800b8a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b8a8:	e7ea      	b.n	800b880 <__swbuf_r+0x6c>
 800b8aa:	bf00      	nop
 800b8ac:	0800c45c 	.word	0x0800c45c
 800b8b0:	0800c47c 	.word	0x0800c47c
 800b8b4:	0800c43c 	.word	0x0800c43c

0800b8b8 <__ascii_wctomb>:
 800b8b8:	b149      	cbz	r1, 800b8ce <__ascii_wctomb+0x16>
 800b8ba:	2aff      	cmp	r2, #255	; 0xff
 800b8bc:	bf85      	ittet	hi
 800b8be:	238a      	movhi	r3, #138	; 0x8a
 800b8c0:	6003      	strhi	r3, [r0, #0]
 800b8c2:	700a      	strbls	r2, [r1, #0]
 800b8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8c8:	bf98      	it	ls
 800b8ca:	2001      	movls	r0, #1
 800b8cc:	4770      	bx	lr
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4770      	bx	lr
	...

0800b8d4 <__swsetup_r>:
 800b8d4:	4b32      	ldr	r3, [pc, #200]	; (800b9a0 <__swsetup_r+0xcc>)
 800b8d6:	b570      	push	{r4, r5, r6, lr}
 800b8d8:	681d      	ldr	r5, [r3, #0]
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	b125      	cbz	r5, 800b8ea <__swsetup_r+0x16>
 800b8e0:	69ab      	ldr	r3, [r5, #24]
 800b8e2:	b913      	cbnz	r3, 800b8ea <__swsetup_r+0x16>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f000 f985 	bl	800bbf4 <__sinit>
 800b8ea:	4b2e      	ldr	r3, [pc, #184]	; (800b9a4 <__swsetup_r+0xd0>)
 800b8ec:	429c      	cmp	r4, r3
 800b8ee:	d10f      	bne.n	800b910 <__swsetup_r+0x3c>
 800b8f0:	686c      	ldr	r4, [r5, #4]
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8f8:	0719      	lsls	r1, r3, #28
 800b8fa:	d42c      	bmi.n	800b956 <__swsetup_r+0x82>
 800b8fc:	06dd      	lsls	r5, r3, #27
 800b8fe:	d411      	bmi.n	800b924 <__swsetup_r+0x50>
 800b900:	2309      	movs	r3, #9
 800b902:	6033      	str	r3, [r6, #0]
 800b904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	e03e      	b.n	800b98e <__swsetup_r+0xba>
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <__swsetup_r+0xd4>)
 800b912:	429c      	cmp	r4, r3
 800b914:	d101      	bne.n	800b91a <__swsetup_r+0x46>
 800b916:	68ac      	ldr	r4, [r5, #8]
 800b918:	e7eb      	b.n	800b8f2 <__swsetup_r+0x1e>
 800b91a:	4b24      	ldr	r3, [pc, #144]	; (800b9ac <__swsetup_r+0xd8>)
 800b91c:	429c      	cmp	r4, r3
 800b91e:	bf08      	it	eq
 800b920:	68ec      	ldreq	r4, [r5, #12]
 800b922:	e7e6      	b.n	800b8f2 <__swsetup_r+0x1e>
 800b924:	0758      	lsls	r0, r3, #29
 800b926:	d512      	bpl.n	800b94e <__swsetup_r+0x7a>
 800b928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92a:	b141      	cbz	r1, 800b93e <__swsetup_r+0x6a>
 800b92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b930:	4299      	cmp	r1, r3
 800b932:	d002      	beq.n	800b93a <__swsetup_r+0x66>
 800b934:	4630      	mov	r0, r6
 800b936:	f7ff fb31 	bl	800af9c <_free_r>
 800b93a:	2300      	movs	r3, #0
 800b93c:	6363      	str	r3, [r4, #52]	; 0x34
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	2300      	movs	r3, #0
 800b948:	6063      	str	r3, [r4, #4]
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	f043 0308 	orr.w	r3, r3, #8
 800b954:	81a3      	strh	r3, [r4, #12]
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	b94b      	cbnz	r3, 800b96e <__swsetup_r+0x9a>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b964:	d003      	beq.n	800b96e <__swsetup_r+0x9a>
 800b966:	4621      	mov	r1, r4
 800b968:	4630      	mov	r0, r6
 800b96a:	f000 fa09 	bl	800bd80 <__smakebuf_r>
 800b96e:	89a0      	ldrh	r0, [r4, #12]
 800b970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b974:	f010 0301 	ands.w	r3, r0, #1
 800b978:	d00a      	beq.n	800b990 <__swsetup_r+0xbc>
 800b97a:	2300      	movs	r3, #0
 800b97c:	60a3      	str	r3, [r4, #8]
 800b97e:	6963      	ldr	r3, [r4, #20]
 800b980:	425b      	negs	r3, r3
 800b982:	61a3      	str	r3, [r4, #24]
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	b943      	cbnz	r3, 800b99a <__swsetup_r+0xc6>
 800b988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b98c:	d1ba      	bne.n	800b904 <__swsetup_r+0x30>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	0781      	lsls	r1, r0, #30
 800b992:	bf58      	it	pl
 800b994:	6963      	ldrpl	r3, [r4, #20]
 800b996:	60a3      	str	r3, [r4, #8]
 800b998:	e7f4      	b.n	800b984 <__swsetup_r+0xb0>
 800b99a:	2000      	movs	r0, #0
 800b99c:	e7f7      	b.n	800b98e <__swsetup_r+0xba>
 800b99e:	bf00      	nop
 800b9a0:	20000168 	.word	0x20000168
 800b9a4:	0800c45c 	.word	0x0800c45c
 800b9a8:	0800c47c 	.word	0x0800c47c
 800b9ac:	0800c43c 	.word	0x0800c43c

0800b9b0 <abort>:
 800b9b0:	b508      	push	{r3, lr}
 800b9b2:	2006      	movs	r0, #6
 800b9b4:	f000 fa54 	bl	800be60 <raise>
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f7f5 fd5d 	bl	8001478 <_exit>
	...

0800b9c0 <__sflush_r>:
 800b9c0:	898a      	ldrh	r2, [r1, #12]
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	0710      	lsls	r0, r2, #28
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	d458      	bmi.n	800ba80 <__sflush_r+0xc0>
 800b9ce:	684b      	ldr	r3, [r1, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc05      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dc02      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d0f9      	beq.n	800b9da <__sflush_r+0x1a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9ec:	682f      	ldr	r7, [r5, #0]
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	d032      	beq.n	800ba58 <__sflush_r+0x98>
 800b9f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	075a      	lsls	r2, r3, #29
 800b9f8:	d505      	bpl.n	800ba06 <__sflush_r+0x46>
 800b9fa:	6863      	ldr	r3, [r4, #4]
 800b9fc:	1ac0      	subs	r0, r0, r3
 800b9fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba00:	b10b      	cbz	r3, 800ba06 <__sflush_r+0x46>
 800ba02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba04:	1ac0      	subs	r0, r0, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	4602      	mov	r2, r0
 800ba0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0c:	6a21      	ldr	r1, [r4, #32]
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b0      	blx	r6
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	d106      	bne.n	800ba26 <__sflush_r+0x66>
 800ba18:	6829      	ldr	r1, [r5, #0]
 800ba1a:	291d      	cmp	r1, #29
 800ba1c:	d82c      	bhi.n	800ba78 <__sflush_r+0xb8>
 800ba1e:	4a2a      	ldr	r2, [pc, #168]	; (800bac8 <__sflush_r+0x108>)
 800ba20:	40ca      	lsrs	r2, r1
 800ba22:	07d6      	lsls	r6, r2, #31
 800ba24:	d528      	bpl.n	800ba78 <__sflush_r+0xb8>
 800ba26:	2200      	movs	r2, #0
 800ba28:	6062      	str	r2, [r4, #4]
 800ba2a:	04d9      	lsls	r1, r3, #19
 800ba2c:	6922      	ldr	r2, [r4, #16]
 800ba2e:	6022      	str	r2, [r4, #0]
 800ba30:	d504      	bpl.n	800ba3c <__sflush_r+0x7c>
 800ba32:	1c42      	adds	r2, r0, #1
 800ba34:	d101      	bne.n	800ba3a <__sflush_r+0x7a>
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	b903      	cbnz	r3, 800ba3c <__sflush_r+0x7c>
 800ba3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba3e:	602f      	str	r7, [r5, #0]
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d0ca      	beq.n	800b9da <__sflush_r+0x1a>
 800ba44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d002      	beq.n	800ba52 <__sflush_r+0x92>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f7ff faa5 	bl	800af9c <_free_r>
 800ba52:	2000      	movs	r0, #0
 800ba54:	6360      	str	r0, [r4, #52]	; 0x34
 800ba56:	e7c1      	b.n	800b9dc <__sflush_r+0x1c>
 800ba58:	6a21      	ldr	r1, [r4, #32]
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b0      	blx	r6
 800ba60:	1c41      	adds	r1, r0, #1
 800ba62:	d1c7      	bne.n	800b9f4 <__sflush_r+0x34>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0c4      	beq.n	800b9f4 <__sflush_r+0x34>
 800ba6a:	2b1d      	cmp	r3, #29
 800ba6c:	d001      	beq.n	800ba72 <__sflush_r+0xb2>
 800ba6e:	2b16      	cmp	r3, #22
 800ba70:	d101      	bne.n	800ba76 <__sflush_r+0xb6>
 800ba72:	602f      	str	r7, [r5, #0]
 800ba74:	e7b1      	b.n	800b9da <__sflush_r+0x1a>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7ad      	b.n	800b9dc <__sflush_r+0x1c>
 800ba80:	690f      	ldr	r7, [r1, #16]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d0a9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba86:	0793      	lsls	r3, r2, #30
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	bf08      	it	eq
 800ba8c:	694b      	ldreq	r3, [r1, #20]
 800ba8e:	600f      	str	r7, [r1, #0]
 800ba90:	bf18      	it	ne
 800ba92:	2300      	movne	r3, #0
 800ba94:	eba6 0807 	sub.w	r8, r6, r7
 800ba98:	608b      	str	r3, [r1, #8]
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	dd9c      	ble.n	800b9da <__sflush_r+0x1a>
 800baa0:	6a21      	ldr	r1, [r4, #32]
 800baa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baa4:	4643      	mov	r3, r8
 800baa6:	463a      	mov	r2, r7
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b0      	blx	r6
 800baac:	2800      	cmp	r0, #0
 800baae:	dc06      	bgt.n	800babe <__sflush_r+0xfe>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	e78e      	b.n	800b9dc <__sflush_r+0x1c>
 800babe:	4407      	add	r7, r0
 800bac0:	eba8 0800 	sub.w	r8, r8, r0
 800bac4:	e7e9      	b.n	800ba9a <__sflush_r+0xda>
 800bac6:	bf00      	nop
 800bac8:	20400001 	.word	0x20400001

0800bacc <_fflush_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	4605      	mov	r5, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b913      	cbnz	r3, 800badc <_fflush_r+0x10>
 800bad6:	2500      	movs	r5, #0
 800bad8:	4628      	mov	r0, r5
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	b118      	cbz	r0, 800bae6 <_fflush_r+0x1a>
 800bade:	6983      	ldr	r3, [r0, #24]
 800bae0:	b90b      	cbnz	r3, 800bae6 <_fflush_r+0x1a>
 800bae2:	f000 f887 	bl	800bbf4 <__sinit>
 800bae6:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <_fflush_r+0x6c>)
 800bae8:	429c      	cmp	r4, r3
 800baea:	d11b      	bne.n	800bb24 <_fflush_r+0x58>
 800baec:	686c      	ldr	r4, [r5, #4]
 800baee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0ef      	beq.n	800bad6 <_fflush_r+0xa>
 800baf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baf8:	07d0      	lsls	r0, r2, #31
 800bafa:	d404      	bmi.n	800bb06 <_fflush_r+0x3a>
 800bafc:	0599      	lsls	r1, r3, #22
 800bafe:	d402      	bmi.n	800bb06 <_fflush_r+0x3a>
 800bb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb02:	f000 f915 	bl	800bd30 <__retarget_lock_acquire_recursive>
 800bb06:	4628      	mov	r0, r5
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f7ff ff59 	bl	800b9c0 <__sflush_r>
 800bb0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb10:	07da      	lsls	r2, r3, #31
 800bb12:	4605      	mov	r5, r0
 800bb14:	d4e0      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	059b      	lsls	r3, r3, #22
 800bb1a:	d4dd      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1e:	f000 f908 	bl	800bd32 <__retarget_lock_release_recursive>
 800bb22:	e7d9      	b.n	800bad8 <_fflush_r+0xc>
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <_fflush_r+0x70>)
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d101      	bne.n	800bb2e <_fflush_r+0x62>
 800bb2a:	68ac      	ldr	r4, [r5, #8]
 800bb2c:	e7df      	b.n	800baee <_fflush_r+0x22>
 800bb2e:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <_fflush_r+0x74>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	bf08      	it	eq
 800bb34:	68ec      	ldreq	r4, [r5, #12]
 800bb36:	e7da      	b.n	800baee <_fflush_r+0x22>
 800bb38:	0800c45c 	.word	0x0800c45c
 800bb3c:	0800c47c 	.word	0x0800c47c
 800bb40:	0800c43c 	.word	0x0800c43c

0800bb44 <std>:
 800bb44:	2300      	movs	r3, #0
 800bb46:	b510      	push	{r4, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb52:	6083      	str	r3, [r0, #8]
 800bb54:	8181      	strh	r1, [r0, #12]
 800bb56:	6643      	str	r3, [r0, #100]	; 0x64
 800bb58:	81c2      	strh	r2, [r0, #14]
 800bb5a:	6183      	str	r3, [r0, #24]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	2208      	movs	r2, #8
 800bb60:	305c      	adds	r0, #92	; 0x5c
 800bb62:	f7fd fb59 	bl	8009218 <memset>
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <std+0x38>)
 800bb68:	6263      	str	r3, [r4, #36]	; 0x24
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <std+0x3c>)
 800bb6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <std+0x40>)
 800bb70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <std+0x44>)
 800bb74:	6224      	str	r4, [r4, #32]
 800bb76:	6323      	str	r3, [r4, #48]	; 0x30
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800be99 	.word	0x0800be99
 800bb80:	0800bebb 	.word	0x0800bebb
 800bb84:	0800bef3 	.word	0x0800bef3
 800bb88:	0800bf17 	.word	0x0800bf17

0800bb8c <_cleanup_r>:
 800bb8c:	4901      	ldr	r1, [pc, #4]	; (800bb94 <_cleanup_r+0x8>)
 800bb8e:	f000 b8af 	b.w	800bcf0 <_fwalk_reent>
 800bb92:	bf00      	nop
 800bb94:	0800bacd 	.word	0x0800bacd

0800bb98 <__sfmoreglue>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	2268      	movs	r2, #104	; 0x68
 800bb9c:	1e4d      	subs	r5, r1, #1
 800bb9e:	4355      	muls	r5, r2
 800bba0:	460e      	mov	r6, r1
 800bba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bba6:	f7ff fa65 	bl	800b074 <_malloc_r>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	b140      	cbz	r0, 800bbc0 <__sfmoreglue+0x28>
 800bbae:	2100      	movs	r1, #0
 800bbb0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbb4:	300c      	adds	r0, #12
 800bbb6:	60a0      	str	r0, [r4, #8]
 800bbb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbbc:	f7fd fb2c 	bl	8009218 <memset>
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}

0800bbc4 <__sfp_lock_acquire>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sfp_lock_acquire+0x8>)
 800bbc6:	f000 b8b3 	b.w	800bd30 <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	20001ff9 	.word	0x20001ff9

0800bbd0 <__sfp_lock_release>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__sfp_lock_release+0x8>)
 800bbd2:	f000 b8ae 	b.w	800bd32 <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	20001ff9 	.word	0x20001ff9

0800bbdc <__sinit_lock_acquire>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__sinit_lock_acquire+0x8>)
 800bbde:	f000 b8a7 	b.w	800bd30 <__retarget_lock_acquire_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	20001ffa 	.word	0x20001ffa

0800bbe8 <__sinit_lock_release>:
 800bbe8:	4801      	ldr	r0, [pc, #4]	; (800bbf0 <__sinit_lock_release+0x8>)
 800bbea:	f000 b8a2 	b.w	800bd32 <__retarget_lock_release_recursive>
 800bbee:	bf00      	nop
 800bbf0:	20001ffa 	.word	0x20001ffa

0800bbf4 <__sinit>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	f7ff fff0 	bl	800bbdc <__sinit_lock_acquire>
 800bbfc:	69a3      	ldr	r3, [r4, #24]
 800bbfe:	b11b      	cbz	r3, 800bc08 <__sinit+0x14>
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f7ff bff0 	b.w	800bbe8 <__sinit_lock_release>
 800bc08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <__sinit+0x68>)
 800bc10:	4a13      	ldr	r2, [pc, #76]	; (800bc60 <__sinit+0x6c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	bf04      	itt	eq
 800bc1a:	2301      	moveq	r3, #1
 800bc1c:	61a3      	streq	r3, [r4, #24]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f820 	bl	800bc64 <__sfp>
 800bc24:	6060      	str	r0, [r4, #4]
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f81c 	bl	800bc64 <__sfp>
 800bc2c:	60a0      	str	r0, [r4, #8]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f818 	bl	800bc64 <__sfp>
 800bc34:	2200      	movs	r2, #0
 800bc36:	60e0      	str	r0, [r4, #12]
 800bc38:	2104      	movs	r1, #4
 800bc3a:	6860      	ldr	r0, [r4, #4]
 800bc3c:	f7ff ff82 	bl	800bb44 <std>
 800bc40:	68a0      	ldr	r0, [r4, #8]
 800bc42:	2201      	movs	r2, #1
 800bc44:	2109      	movs	r1, #9
 800bc46:	f7ff ff7d 	bl	800bb44 <std>
 800bc4a:	68e0      	ldr	r0, [r4, #12]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	2112      	movs	r1, #18
 800bc50:	f7ff ff78 	bl	800bb44 <std>
 800bc54:	2301      	movs	r3, #1
 800bc56:	61a3      	str	r3, [r4, #24]
 800bc58:	e7d2      	b.n	800bc00 <__sinit+0xc>
 800bc5a:	bf00      	nop
 800bc5c:	0800c0c0 	.word	0x0800c0c0
 800bc60:	0800bb8d 	.word	0x0800bb8d

0800bc64 <__sfp>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	4607      	mov	r7, r0
 800bc68:	f7ff ffac 	bl	800bbc4 <__sfp_lock_acquire>
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <__sfp+0x84>)
 800bc6e:	681e      	ldr	r6, [r3, #0]
 800bc70:	69b3      	ldr	r3, [r6, #24]
 800bc72:	b913      	cbnz	r3, 800bc7a <__sfp+0x16>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7ff ffbd 	bl	800bbf4 <__sinit>
 800bc7a:	3648      	adds	r6, #72	; 0x48
 800bc7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	d503      	bpl.n	800bc8c <__sfp+0x28>
 800bc84:	6833      	ldr	r3, [r6, #0]
 800bc86:	b30b      	cbz	r3, 800bccc <__sfp+0x68>
 800bc88:	6836      	ldr	r6, [r6, #0]
 800bc8a:	e7f7      	b.n	800bc7c <__sfp+0x18>
 800bc8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc90:	b9d5      	cbnz	r5, 800bcc8 <__sfp+0x64>
 800bc92:	4b16      	ldr	r3, [pc, #88]	; (800bcec <__sfp+0x88>)
 800bc94:	60e3      	str	r3, [r4, #12]
 800bc96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bc9c:	f000 f847 	bl	800bd2e <__retarget_lock_init_recursive>
 800bca0:	f7ff ff96 	bl	800bbd0 <__sfp_lock_release>
 800bca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcac:	6025      	str	r5, [r4, #0]
 800bcae:	61a5      	str	r5, [r4, #24]
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcb8:	f7fd faae 	bl	8009218 <memset>
 800bcbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc8:	3468      	adds	r4, #104	; 0x68
 800bcca:	e7d9      	b.n	800bc80 <__sfp+0x1c>
 800bccc:	2104      	movs	r1, #4
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ff62 	bl	800bb98 <__sfmoreglue>
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1d5      	bne.n	800bc88 <__sfp+0x24>
 800bcdc:	f7ff ff78 	bl	800bbd0 <__sfp_lock_release>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	e7ee      	b.n	800bcc4 <__sfp+0x60>
 800bce6:	bf00      	nop
 800bce8:	0800c0c0 	.word	0x0800c0c0
 800bcec:	ffff0001 	.word	0xffff0001

0800bcf0 <_fwalk_reent>:
 800bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	4688      	mov	r8, r1
 800bcf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcfc:	2700      	movs	r7, #0
 800bcfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd02:	f1b9 0901 	subs.w	r9, r9, #1
 800bd06:	d505      	bpl.n	800bd14 <_fwalk_reent+0x24>
 800bd08:	6824      	ldr	r4, [r4, #0]
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	d1f7      	bne.n	800bcfe <_fwalk_reent+0xe>
 800bd0e:	4638      	mov	r0, r7
 800bd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd14:	89ab      	ldrh	r3, [r5, #12]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d907      	bls.n	800bd2a <_fwalk_reent+0x3a>
 800bd1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	d003      	beq.n	800bd2a <_fwalk_reent+0x3a>
 800bd22:	4629      	mov	r1, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	47c0      	blx	r8
 800bd28:	4307      	orrs	r7, r0
 800bd2a:	3568      	adds	r5, #104	; 0x68
 800bd2c:	e7e9      	b.n	800bd02 <_fwalk_reent+0x12>

0800bd2e <__retarget_lock_init_recursive>:
 800bd2e:	4770      	bx	lr

0800bd30 <__retarget_lock_acquire_recursive>:
 800bd30:	4770      	bx	lr

0800bd32 <__retarget_lock_release_recursive>:
 800bd32:	4770      	bx	lr

0800bd34 <__swhatbuf_r>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	460e      	mov	r6, r1
 800bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	b096      	sub	sp, #88	; 0x58
 800bd40:	4614      	mov	r4, r2
 800bd42:	461d      	mov	r5, r3
 800bd44:	da08      	bge.n	800bd58 <__swhatbuf_r+0x24>
 800bd46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	602a      	str	r2, [r5, #0]
 800bd4e:	061a      	lsls	r2, r3, #24
 800bd50:	d410      	bmi.n	800bd74 <__swhatbuf_r+0x40>
 800bd52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd56:	e00e      	b.n	800bd76 <__swhatbuf_r+0x42>
 800bd58:	466a      	mov	r2, sp
 800bd5a:	f000 f903 	bl	800bf64 <_fstat_r>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	dbf1      	blt.n	800bd46 <__swhatbuf_r+0x12>
 800bd62:	9a01      	ldr	r2, [sp, #4]
 800bd64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd6c:	425a      	negs	r2, r3
 800bd6e:	415a      	adcs	r2, r3
 800bd70:	602a      	str	r2, [r5, #0]
 800bd72:	e7ee      	b.n	800bd52 <__swhatbuf_r+0x1e>
 800bd74:	2340      	movs	r3, #64	; 0x40
 800bd76:	2000      	movs	r0, #0
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	b016      	add	sp, #88	; 0x58
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd80 <__smakebuf_r>:
 800bd80:	898b      	ldrh	r3, [r1, #12]
 800bd82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd84:	079d      	lsls	r5, r3, #30
 800bd86:	4606      	mov	r6, r0
 800bd88:	460c      	mov	r4, r1
 800bd8a:	d507      	bpl.n	800bd9c <__smakebuf_r+0x1c>
 800bd8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	2301      	movs	r3, #1
 800bd96:	6163      	str	r3, [r4, #20]
 800bd98:	b002      	add	sp, #8
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	ab01      	add	r3, sp, #4
 800bd9e:	466a      	mov	r2, sp
 800bda0:	f7ff ffc8 	bl	800bd34 <__swhatbuf_r>
 800bda4:	9900      	ldr	r1, [sp, #0]
 800bda6:	4605      	mov	r5, r0
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f7ff f963 	bl	800b074 <_malloc_r>
 800bdae:	b948      	cbnz	r0, 800bdc4 <__smakebuf_r+0x44>
 800bdb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb4:	059a      	lsls	r2, r3, #22
 800bdb6:	d4ef      	bmi.n	800bd98 <__smakebuf_r+0x18>
 800bdb8:	f023 0303 	bic.w	r3, r3, #3
 800bdbc:	f043 0302 	orr.w	r3, r3, #2
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	e7e3      	b.n	800bd8c <__smakebuf_r+0xc>
 800bdc4:	4b0d      	ldr	r3, [pc, #52]	; (800bdfc <__smakebuf_r+0x7c>)
 800bdc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	6020      	str	r0, [r4, #0]
 800bdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	9b00      	ldr	r3, [sp, #0]
 800bdd4:	6163      	str	r3, [r4, #20]
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	6120      	str	r0, [r4, #16]
 800bdda:	b15b      	cbz	r3, 800bdf4 <__smakebuf_r+0x74>
 800bddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 f8d1 	bl	800bf88 <_isatty_r>
 800bde6:	b128      	cbz	r0, 800bdf4 <__smakebuf_r+0x74>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f023 0303 	bic.w	r3, r3, #3
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	81a3      	strh	r3, [r4, #12]
 800bdf4:	89a0      	ldrh	r0, [r4, #12]
 800bdf6:	4305      	orrs	r5, r0
 800bdf8:	81a5      	strh	r5, [r4, #12]
 800bdfa:	e7cd      	b.n	800bd98 <__smakebuf_r+0x18>
 800bdfc:	0800bb8d 	.word	0x0800bb8d

0800be00 <_malloc_usable_size_r>:
 800be00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be04:	1f18      	subs	r0, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	bfbc      	itt	lt
 800be0a:	580b      	ldrlt	r3, [r1, r0]
 800be0c:	18c0      	addlt	r0, r0, r3
 800be0e:	4770      	bx	lr

0800be10 <_raise_r>:
 800be10:	291f      	cmp	r1, #31
 800be12:	b538      	push	{r3, r4, r5, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	d904      	bls.n	800be24 <_raise_r+0x14>
 800be1a:	2316      	movs	r3, #22
 800be1c:	6003      	str	r3, [r0, #0]
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be26:	b112      	cbz	r2, 800be2e <_raise_r+0x1e>
 800be28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be2c:	b94b      	cbnz	r3, 800be42 <_raise_r+0x32>
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f830 	bl	800be94 <_getpid_r>
 800be34:	462a      	mov	r2, r5
 800be36:	4601      	mov	r1, r0
 800be38:	4620      	mov	r0, r4
 800be3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be3e:	f000 b817 	b.w	800be70 <_kill_r>
 800be42:	2b01      	cmp	r3, #1
 800be44:	d00a      	beq.n	800be5c <_raise_r+0x4c>
 800be46:	1c59      	adds	r1, r3, #1
 800be48:	d103      	bne.n	800be52 <_raise_r+0x42>
 800be4a:	2316      	movs	r3, #22
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	2001      	movs	r0, #1
 800be50:	e7e7      	b.n	800be22 <_raise_r+0x12>
 800be52:	2400      	movs	r4, #0
 800be54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be58:	4628      	mov	r0, r5
 800be5a:	4798      	blx	r3
 800be5c:	2000      	movs	r0, #0
 800be5e:	e7e0      	b.n	800be22 <_raise_r+0x12>

0800be60 <raise>:
 800be60:	4b02      	ldr	r3, [pc, #8]	; (800be6c <raise+0xc>)
 800be62:	4601      	mov	r1, r0
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	f7ff bfd3 	b.w	800be10 <_raise_r>
 800be6a:	bf00      	nop
 800be6c:	20000168 	.word	0x20000168

0800be70 <_kill_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	; (800be90 <_kill_r+0x20>)
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	4611      	mov	r1, r2
 800be7c:	602b      	str	r3, [r5, #0]
 800be7e:	f7f5 faeb 	bl	8001458 <_kill>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	d102      	bne.n	800be8c <_kill_r+0x1c>
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	b103      	cbz	r3, 800be8c <_kill_r+0x1c>
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	bf00      	nop
 800be90:	20001ff4 	.word	0x20001ff4

0800be94 <_getpid_r>:
 800be94:	f7f5 bad8 	b.w	8001448 <_getpid>

0800be98 <__sread>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	460c      	mov	r4, r1
 800be9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea0:	f000 f894 	bl	800bfcc <_read_r>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	bfab      	itete	ge
 800bea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beaa:	89a3      	ldrhlt	r3, [r4, #12]
 800beac:	181b      	addge	r3, r3, r0
 800beae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800beb2:	bfac      	ite	ge
 800beb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800beb6:	81a3      	strhlt	r3, [r4, #12]
 800beb8:	bd10      	pop	{r4, pc}

0800beba <__swrite>:
 800beba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebe:	461f      	mov	r7, r3
 800bec0:	898b      	ldrh	r3, [r1, #12]
 800bec2:	05db      	lsls	r3, r3, #23
 800bec4:	4605      	mov	r5, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	4616      	mov	r6, r2
 800beca:	d505      	bpl.n	800bed8 <__swrite+0x1e>
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	2302      	movs	r3, #2
 800bed2:	2200      	movs	r2, #0
 800bed4:	f000 f868 	bl	800bfa8 <_lseek_r>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	4632      	mov	r2, r6
 800bee6:	463b      	mov	r3, r7
 800bee8:	4628      	mov	r0, r5
 800beea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beee:	f000 b817 	b.w	800bf20 <_write_r>

0800bef2 <__sseek>:
 800bef2:	b510      	push	{r4, lr}
 800bef4:	460c      	mov	r4, r1
 800bef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befa:	f000 f855 	bl	800bfa8 <_lseek_r>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	bf15      	itete	ne
 800bf04:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf0e:	81a3      	strheq	r3, [r4, #12]
 800bf10:	bf18      	it	ne
 800bf12:	81a3      	strhne	r3, [r4, #12]
 800bf14:	bd10      	pop	{r4, pc}

0800bf16 <__sclose>:
 800bf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1a:	f000 b813 	b.w	800bf44 <_close_r>
	...

0800bf20 <_write_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	; (800bf40 <_write_r+0x20>)
 800bf24:	4604      	mov	r4, r0
 800bf26:	4608      	mov	r0, r1
 800bf28:	4611      	mov	r1, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	602a      	str	r2, [r5, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f7f5 fac9 	bl	80014c6 <_write>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_write_r+0x1e>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_write_r+0x1e>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	20001ff4 	.word	0x20001ff4

0800bf44 <_close_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d06      	ldr	r5, [pc, #24]	; (800bf60 <_close_r+0x1c>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f5 fad5 	bl	80014fe <_close>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_close_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_close_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	20001ff4 	.word	0x20001ff4

0800bf64 <_fstat_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	; (800bf84 <_fstat_r+0x20>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f5 fad0 	bl	8001516 <_fstat>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d102      	bne.n	800bf80 <_fstat_r+0x1c>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	b103      	cbz	r3, 800bf80 <_fstat_r+0x1c>
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
 800bf82:	bf00      	nop
 800bf84:	20001ff4 	.word	0x20001ff4

0800bf88 <_isatty_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d06      	ldr	r5, [pc, #24]	; (800bfa4 <_isatty_r+0x1c>)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	f7f5 facf 	bl	8001536 <_isatty>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_isatty_r+0x1a>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_isatty_r+0x1a>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20001ff4 	.word	0x20001ff4

0800bfa8 <_lseek_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	; (800bfc8 <_lseek_r+0x20>)
 800bfac:	4604      	mov	r4, r0
 800bfae:	4608      	mov	r0, r1
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	602a      	str	r2, [r5, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f7f5 fac8 	bl	800154c <_lseek>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_lseek_r+0x1e>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_lseek_r+0x1e>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	20001ff4 	.word	0x20001ff4

0800bfcc <_read_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	; (800bfec <_read_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f5 fa56 	bl	800148c <_read>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_read_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_read_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	20001ff4 	.word	0x20001ff4

0800bff0 <_init>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	bf00      	nop
 800bff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff6:	bc08      	pop	{r3}
 800bff8:	469e      	mov	lr, r3
 800bffa:	4770      	bx	lr

0800bffc <_fini>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	bf00      	nop
 800c000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c002:	bc08      	pop	{r3}
 800c004:	469e      	mov	lr, r3
 800c006:	4770      	bx	lr

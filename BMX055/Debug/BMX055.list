
BMX055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d68  08008d68  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d70  08008d70  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08008d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  200001c4  08008f3c  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e58  08008f3c  00021e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b91  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa7  00000000  00000000  00031d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00035b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019387  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139da  00000000  00000000  0004fc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aaa1  00000000  00000000  000635f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000ee0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c8c 	.word	0x08008c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	08008c8c 	.word	0x08008c8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t debug = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
	uint8_t size = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	76fb      	strb	r3, [r7, #27]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fa67 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f86f 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f903 	bl	80007a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059e:	f000 f8d3 	bl	8000748 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f007 f9c3 	bl	800792c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

//  SearchDevice(&hi2c1);


  if(BMX055_Init(&hi2c1) != 0 ){
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <main+0xe0>)
 80005a8:	f007 f81e 	bl	80075e8 <BMX055_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d000      	beq.n	80005b4 <main+0x30>
	  while(1);
 80005b2:	e7fe      	b.n	80005b2 <main+0x2e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f000 fac7 	bl	8000b48 <HAL_Delay>
//	  debug= 0;

	  int16_t rawAcc[3];
	  int16_t rawGyro[3];
	  int16_t rawMag[3];
	  readAccelData(rawAcc, &hi2c1);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4929      	ldr	r1, [pc, #164]	; (8000664 <main+0xe0>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f007 f8ed 	bl	80077a0 <readAccelData>
	  size = sprintf((char *)buffer, "Acc: %d %d %d ", (int)rawAcc[0], (int)rawAcc[1], (int)rawAcc[2]);
 80005c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	460b      	mov	r3, r1
 80005da:	4923      	ldr	r1, [pc, #140]	; (8000668 <main+0xe4>)
 80005dc:	4823      	ldr	r0, [pc, #140]	; (800066c <main+0xe8>)
 80005de:	f007 fee7 	bl	80083b0 <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	76fb      	strb	r3, [r7, #27]
	  CDC_Transmit_FS(buffer, size);
 80005e6:	7efb      	ldrb	r3, [r7, #27]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <main+0xe8>)
 80005ee:	f007 fa5b 	bl	8007aa8 <CDC_Transmit_FS>

	  readGyroData(rawGyro, &hi2c1);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	491b      	ldr	r1, [pc, #108]	; (8000664 <main+0xe0>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 f91a 	bl	8007832 <readGyroData>
	  size = sprintf((char *)buffer, " Gyro %d %d %d ",rawGyro[0], rawGyro[1], rawGyro[2]);
 80005fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000602:	461a      	mov	r2, r3
 8000604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000608:	4619      	mov	r1, r3
 800060a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	460b      	mov	r3, r1
 8000612:	4917      	ldr	r1, [pc, #92]	; (8000670 <main+0xec>)
 8000614:	4815      	ldr	r0, [pc, #84]	; (800066c <main+0xe8>)
 8000616:	f007 fecb 	bl	80083b0 <siprintf>
 800061a:	4603      	mov	r3, r0
 800061c:	76fb      	strb	r3, [r7, #27]
	  CDC_Transmit_FS(buffer, size);
 800061e:	7efb      	ldrb	r3, [r7, #27]
 8000620:	b29b      	uxth	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0xe8>)
 8000626:	f007 fa3f 	bl	8007aa8 <CDC_Transmit_FS>

	  readMagData(rawMag, &hi2c1);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	490d      	ldr	r1, [pc, #52]	; (8000664 <main+0xe0>)
 800062e:	4618      	mov	r0, r3
 8000630:	f007 f942 	bl	80078b8 <readMagData>
	  size = sprintf((char *)buffer, " Mag %d %d %d\n\r",rawMag[0], rawMag[1], rawMag[2]);
 8000634:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000638:	461a      	mov	r2, r3
 800063a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063e:	4619      	mov	r1, r3
 8000640:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	460b      	mov	r3, r1
 8000648:	490a      	ldr	r1, [pc, #40]	; (8000674 <main+0xf0>)
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0xe8>)
 800064c:	f007 feb0 	bl	80083b0 <siprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	76fb      	strb	r3, [r7, #27]
	  CDC_Transmit_FS(buffer, size);
 8000654:	7efb      	ldrb	r3, [r7, #27]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <main+0xe8>)
 800065c:	f007 fa24 	bl	8007aa8 <CDC_Transmit_FS>
  {
 8000660:	e7a8      	b.n	80005b4 <main+0x30>
 8000662:	bf00      	nop
 8000664:	200001e0 	.word	0x200001e0
 8000668:	08008ca4 	.word	0x08008ca4
 800066c:	20000000 	.word	0x20000000
 8000670:	08008cb4 	.word	0x08008cb4
 8000674:	08008cc4 	.word	0x08008cc4

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fe8a 	bl	80083a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <SystemClock_Config+0xc8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a26      	ldr	r2, [pc, #152]	; (8000740 <SystemClock_Config+0xc8>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <SystemClock_Config+0xc8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <SystemClock_Config+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a20      	ldr	r2, [pc, #128]	; (8000744 <SystemClock_Config+0xcc>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <SystemClock_Config+0xcc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006e8:	2319      	movs	r3, #25
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ec:	23c0      	movs	r3, #192	; 0xc0
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 ff19 	bl	8003534 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f890 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f003 f97b 	bl	8003a24 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000734:	f000 f87a 	bl	800082c <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	; 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 fc99 	bl	80010bc <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f84c 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001e0 	.word	0x200001e0
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_GPIO_Init+0x84>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_GPIO_Init+0x84>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_GPIO_Init+0x84>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x84>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0x84>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_GPIO_Init+0x84>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_GPIO_Init+0x84>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_GPIO_Init+0x84>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <MX_GPIO_Init+0x84>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_GPIO_Init+0x84>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_I2C_MspInit+0x84>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12b      	bne.n	8000902 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008c6:	23c0      	movs	r3, #192	; 0xc0
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ca:	2312      	movs	r3, #18
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d6:	2304      	movs	r3, #4
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <HAL_I2C_MspInit+0x8c>)
 80008e2:	f000 fa67 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40005400 	.word	0x40005400
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f8d0 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <OTG_FS_IRQHandler+0x10>)
 8000972:	f001 fcb2 	bl	80022da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000171c 	.word	0x2000171c

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f007 fccc 	bl	800834c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20020000 	.word	0x20020000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000234 	.word	0x20000234
 80009e8:	20001e58 	.word	0x20001e58

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f007 fc8b 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fd9f 	bl	8000584 <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8000a54:	08008d78 	.word	0x08008d78
  ldr r2, =_sbss
 8000a58:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8000a5c:	20001e58 	.word	0x20001e58

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f94f 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fece 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f967 	bl	8000d9a <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f92f 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000064 	.word	0x20000064
 8000b00:	2000006c 	.word	0x2000006c
 8000b04:	20000068 	.word	0x20000068

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000006c 	.word	0x2000006c
 8000b2c:	20000238 	.word	0x20000238

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000238 	.word	0x20000238

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000006c 	.word	0x2000006c

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff3e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff31 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e159      	b.n	8001084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8148 	bne.w	800107e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d017      	beq.n	8000ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a2 	beq.w	800107e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a56      	ldr	r2, [pc, #344]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f56:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x202>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2f4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fe>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1fa>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x2fc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1f6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1f2>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f aea2 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40013c00 	.word	0x40013c00

080010bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e12b      	b.n	8001326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fbd0 	bl	8000888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2224      	movs	r2, #36	; 0x24
 80010ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800110e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800111e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001120:	f002 fe38 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8001124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a81      	ldr	r2, [pc, #516]	; (8001330 <HAL_I2C_Init+0x274>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d807      	bhi.n	8001140 <HAL_I2C_Init+0x84>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a80      	ldr	r2, [pc, #512]	; (8001334 <HAL_I2C_Init+0x278>)
 8001134:	4293      	cmp	r3, r2
 8001136:	bf94      	ite	ls
 8001138:	2301      	movls	r3, #1
 800113a:	2300      	movhi	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	e006      	b.n	800114e <HAL_I2C_Init+0x92>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a7d      	ldr	r2, [pc, #500]	; (8001338 <HAL_I2C_Init+0x27c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	bf94      	ite	ls
 8001148:	2301      	movls	r3, #1
 800114a:	2300      	movhi	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0e7      	b.n	8001326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a78      	ldr	r2, [pc, #480]	; (800133c <HAL_I2C_Init+0x280>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a6a      	ldr	r2, [pc, #424]	; (8001330 <HAL_I2C_Init+0x274>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d802      	bhi.n	8001190 <HAL_I2C_Init+0xd4>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3301      	adds	r3, #1
 800118e:	e009      	b.n	80011a4 <HAL_I2C_Init+0xe8>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	4a69      	ldr	r2, [pc, #420]	; (8001340 <HAL_I2C_Init+0x284>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	3301      	adds	r3, #1
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	495c      	ldr	r1, [pc, #368]	; (8001330 <HAL_I2C_Init+0x274>)
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d819      	bhi.n	80011f8 <HAL_I2C_Init+0x13c>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1e59      	subs	r1, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d2:	1c59      	adds	r1, r3, #1
 80011d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011d8:	400b      	ands	r3, r1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_I2C_Init+0x138>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1e59      	subs	r1, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f2:	e051      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e04f      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_I2C_Init+0x168>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	440b      	add	r3, r1
 800120e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e012      	b.n	800124a <HAL_I2C_Init+0x18e>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	0099      	lsls	r1, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Init+0x196>
 800124e:	2301      	movs	r3, #1
 8001250:	e022      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10e      	bne.n	8001278 <HAL_I2C_Init+0x1bc>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1e58      	subs	r0, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	440b      	add	r3, r1
 8001268:	fbb0 f3f3 	udiv	r3, r0, r3
 800126c:	3301      	adds	r3, #1
 800126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001276:	e00f      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	4313      	orrs	r3, r2
 800129e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6911      	ldr	r1, [r2, #16]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	430b      	orrs	r3, r1
 80012da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	000186a0 	.word	0x000186a0
 8001334:	001e847f 	.word	0x001e847f
 8001338:	003d08ff 	.word	0x003d08ff
 800133c:	431bde83 	.word	0x431bde83
 8001340:	10624dd3 	.word	0x10624dd3

08001344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800135e:	f7ff fbe7 	bl	8000b30 <HAL_GetTick>
 8001362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b20      	cmp	r3, #32
 800136e:	f040 80d9 	bne.w	8001524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2319      	movs	r3, #25
 8001378:	2201      	movs	r2, #1
 800137a:	496d      	ldr	r1, [pc, #436]	; (8001530 <HAL_I2C_Mem_Write+0x1ec>)
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fc7f 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001388:	2302      	movs	r3, #2
 800138a:	e0cc      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_I2C_Mem_Write+0x56>
 8001396:	2302      	movs	r3, #2
 8001398:	e0c5      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d007      	beq.n	80013c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2221      	movs	r2, #33	; 0x21
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_I2C_Mem_Write+0x1f0>)
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001402:	88f8      	ldrh	r0, [r7, #6]
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	8979      	ldrh	r1, [r7, #10]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4603      	mov	r3, r0
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fab6 	bl	8001984 <I2C_RequestMemoryWrite>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d052      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e081      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fd00 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b04      	cmp	r3, #4
 8001438:	d107      	bne.n	800144a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06b      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d11b      	bne.n	80014c4 <HAL_I2C_Mem_Write+0x180>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d017      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1aa      	bne.n	8001422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fcec 	bl	8001eae <I2C_WaitOnBTFFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d107      	bne.n	80014f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e016      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001524:	2302      	movs	r3, #2
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00100002 	.word	0x00100002
 8001534:	ffff0000 	.word	0xffff0000

08001538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001552:	f7ff faed 	bl	8000b30 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b20      	cmp	r3, #32
 8001562:	f040 8208 	bne.w	8001976 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2319      	movs	r3, #25
 800156c:	2201      	movs	r2, #1
 800156e:	497b      	ldr	r1, [pc, #492]	; (800175c <HAL_I2C_Mem_Read+0x224>)
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fb85 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800157c:	2302      	movs	r3, #2
 800157e:	e1fb      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_I2C_Mem_Read+0x56>
 800158a:	2302      	movs	r3, #2
 800158c:	e1f4      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d007      	beq.n	80015b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2222      	movs	r2, #34	; 0x22
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <HAL_I2C_Mem_Read+0x228>)
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f6:	88f8      	ldrh	r0, [r7, #6]
 80015f8:	893a      	ldrh	r2, [r7, #8]
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4603      	mov	r3, r0
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fa52 	bl	8001ab0 <I2C_RequestMemoryRead>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1b0      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	2b00      	cmp	r3, #0
 800161c:	d113      	bne.n	8001646 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e184      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11b      	bne.n	8001686 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e164      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168a:	2b02      	cmp	r3, #2
 800168c:	d11b      	bne.n	80016c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	e144      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016dc:	e138      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	f200 80f1 	bhi.w	80018ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d123      	bne.n	8001738 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fc1b 	bl	8001f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e139      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001736:	e10b      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	2b02      	cmp	r3, #2
 800173e:	d14e      	bne.n	80017de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	2200      	movs	r2, #0
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <HAL_I2C_Mem_Read+0x22c>)
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fa98 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e10e      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
 800175a:	bf00      	nop
 800175c:	00100002 	.word	0x00100002
 8001760:	ffff0000 	.word	0xffff0000
 8001764:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017dc:	e0b8      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e4:	2200      	movs	r2, #0
 80017e6:	4966      	ldr	r1, [pc, #408]	; (8001980 <HAL_I2C_Mem_Read+0x448>)
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fa49 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0bf      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	2200      	movs	r2, #0
 8001842:	494f      	ldr	r1, [pc, #316]	; (8001980 <HAL_I2C_Mem_Read+0x448>)
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fa1b 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e091      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018c8:	e042      	b.n	8001950 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fb2e 	bl	8001f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e04c      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d118      	bne.n	8001950 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f aec2 	bne.w	80016de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001976:	2302      	movs	r3, #2
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	00010004 	.word	0x00010004

08001984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	817b      	strh	r3, [r7, #10]
 8001996:	460b      	mov	r3, r1
 8001998:	813b      	strh	r3, [r7, #8]
 800199a:	4613      	mov	r3, r2
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f960 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d4:	d103      	bne.n	80019de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e05f      	b.n	8001aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019e2:	897b      	ldrh	r3, [r7, #10]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	6a3a      	ldr	r2, [r7, #32]
 80019f6:	492d      	ldr	r1, [pc, #180]	; (8001aac <I2C_RequestMemoryWrite+0x128>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f998 	bl	8001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e04c      	b.n	8001aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fa02 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d107      	bne.n	8001a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e02b      	b.n	8001aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	e021      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a5c:	893b      	ldrh	r3, [r7, #8]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f9dc 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d107      	bne.n	8001a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e005      	b.n	8001aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a96:	893b      	ldrh	r3, [r7, #8]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	00010002 	.word	0x00010002

08001ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f8c2 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b10:	d103      	bne.n	8001b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0aa      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	4952      	ldr	r1, [pc, #328]	; (8001c7c <I2C_RequestMemoryRead+0x1cc>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f8fa 	bl	8001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e097      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	6a39      	ldr	r1, [r7, #32]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f964 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00d      	beq.n	8001b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d107      	bne.n	8001b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e076      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	e021      	b.n	8001bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b98:	893b      	ldrh	r3, [r7, #8]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba8:	6a39      	ldr	r1, [r7, #32]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f93e 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d107      	bne.n	8001bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e050      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd2:	893b      	ldrh	r3, [r7, #8]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	6a39      	ldr	r1, [r7, #32]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f923 	bl	8001e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00d      	beq.n	8001c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d107      	bne.n	8001c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e035      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f82b 	bl	8001c80 <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3e:	d103      	bne.n	8001c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e013      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c4c:	897b      	ldrh	r3, [r7, #10]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	4906      	ldr	r1, [pc, #24]	; (8001c7c <I2C_RequestMemoryRead+0x1cc>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f863 	bl	8001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	00010002 	.word	0x00010002

08001c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c90:	e025      	b.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d021      	beq.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7fe ff49 	bl	8000b30 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d302      	bcc.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d116      	bne.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f043 0220 	orr.w	r2, r3, #32
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e023      	b.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10d      	bne.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	e00c      	b.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d0b6      	beq.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d3c:	e051      	b.n	8001de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4c:	d123      	bne.n	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e046      	b.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d021      	beq.n	8001de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9e:	f7fe fec7 	bl	8000b30 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d302      	bcc.n	8001db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d116      	bne.n	8001de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e020      	b.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10c      	bne.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4013      	ands	r3, r2
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	e00b      	b.n	8001e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d18d      	bne.n	8001d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e38:	e02d      	b.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8ce 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e02d      	b.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d021      	beq.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e52:	f7fe fe6d 	bl	8000b30 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d302      	bcc.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d116      	bne.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d1ca      	bne.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001eba:	e02d      	b.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f88d 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e02d      	b.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d021      	beq.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed4:	f7fe fe2c 	bl	8000b30 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d302      	bcc.n	8001eea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d1ca      	bne.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f3c:	e042      	b.n	8001fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d119      	bne.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0210 	mvn.w	r2, #16
 8001f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e029      	b.n	8001fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f80:	f7fe fdd6 	bl	8000b30 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d302      	bcc.n	8001f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e007      	b.n	8001fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d1b5      	bne.n	8001f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d11b      	bne.n	800202c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203c:	b08f      	sub	sp, #60	; 0x3c
 800203e:	af0a      	add	r7, sp, #40	; 0x28
 8002040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e10f      	b.n	800226c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f005 fe66 	bl	8007d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f001 ffab 	bl	8003fe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	687e      	ldr	r6, [r7, #4]
 8002098:	466d      	mov	r5, sp
 800209a:	f106 0410 	add.w	r4, r6, #16
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ae:	1d33      	adds	r3, r6, #4
 80020b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f001 fe82 	bl	8003dbc <USB_CoreInit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0d0      	b.n	800226c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 ff99 	bl	8004008 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e04a      	b.n	8002172 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	333d      	adds	r3, #61	; 0x3d
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	333c      	adds	r3, #60	; 0x3c
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	b298      	uxth	r0, r3
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3344      	adds	r3, #68	; 0x44
 8002118:	4602      	mov	r2, r0
 800211a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3340      	adds	r3, #64	; 0x40
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3348      	adds	r3, #72	; 0x48
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	334c      	adds	r3, #76	; 0x4c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3354      	adds	r3, #84	; 0x54
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3301      	adds	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3af      	bcc.n	80020dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e044      	b.n	800220c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3b5      	bcc.n	8002182 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	687e      	ldr	r6, [r7, #4]
 800221e:	466d      	mov	r5, sp
 8002220:	f106 0410 	add.w	r4, r6, #16
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002230:	e885 0003 	stmia.w	r5, {r0, r1}
 8002234:	1d33      	adds	r3, r6, #4
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f001 ff31 	bl	80040a0 <USB_DevInit>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00d      	b.n	800226c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 f880 	bl	800536a <USB_DevDisconnect>

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002274 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_PCD_Start+0x1c>
 800228c:	2302      	movs	r3, #2
 800228e:	e020      	b.n	80022d2 <HAL_PCD_Start+0x5e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b01      	cmp	r3, #1
 800229e:	d109      	bne.n	80022b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fe83 	bl	8003fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f830 	bl	8005328 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022da:	b590      	push	{r4, r7, lr}
 80022dc:	b08d      	sub	sp, #52	; 0x34
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f8ee 	bl	80054d2 <USB_GetMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 848a 	bne.w	8002c12 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 f852 	bl	80053ac <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8480 	beq.w	8002c10 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f83f 	bl	80053ac <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d107      	bne.n	8002348 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f002 0202 	and.w	r2, r2, #2
 8002346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f82d 	bl	80053ac <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b10      	cmp	r3, #16
 800235a:	d161      	bne.n	8002420 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0210 	bic.w	r2, r2, #16
 800236a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	0c5b      	lsrs	r3, r3, #17
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2b02      	cmp	r3, #2
 8002396:	d124      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d035      	beq.n	8002410 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f002 fe64 	bl	8005084 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c8:	441a      	add	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	e016      	b.n	8002410 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	0c5b      	lsrs	r3, r3, #17
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d110      	bne.n	8002410 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023f4:	2208      	movs	r2, #8
 80023f6:	4619      	mov	r1, r3
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f002 fe43 	bl	8005084 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240a:	441a      	add	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0210 	orr.w	r2, r2, #16
 800241e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 ffc1 	bl	80053ac <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002430:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002434:	f040 80a7 	bne.w	8002586 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 ffc6 	bl	80053d2 <USB_ReadDevAllOutEpInterrupt>
 8002446:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002448:	e099      	b.n	800257e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808e 	beq.w	8002572 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f002 ffea 	bl	800543a <USB_ReadDevOutEPInterrupt>
 8002466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	2301      	movs	r3, #1
 8002482:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fec2 	bl	8003210 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00c      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a2:	461a      	mov	r2, r3
 80024a4:	2308      	movs	r3, #8
 80024a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 ff98 	bl	80033e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2310      	movs	r3, #16
 80024ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d030      	beq.n	8002538 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d109      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	78db      	ldrb	r3, [r3, #3]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2200      	movs	r2, #0
 8002518:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 fd05 	bl	8007f30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	461a      	mov	r2, r3
 8002534:	2302      	movs	r3, #2
 8002536:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	461a      	mov	r2, r3
 8002550:	2320      	movs	r3, #32
 8002552:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f af62 	bne.w	800244a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 ff0e 	bl	80053ac <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800259a:	f040 80db 	bne.w	8002754 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 ff2f 	bl	8005406 <USB_ReadDevAllInEpInterrupt>
 80025a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025ae:	e0cd      	b.n	800274c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80c2 	beq.w	8002740 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 ff55 	bl	8005476 <USB_ReadDevInEPInterrupt>
 80025cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d057      	beq.n	8002688 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69f9      	ldr	r1, [r7, #28]
 80025f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025f8:	4013      	ands	r3, r2
 80025fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002608:	461a      	mov	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d132      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	334c      	adds	r3, #76	; 0x4c
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4403      	add	r3, r0
 8002636:	3348      	adds	r3, #72	; 0x48
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4419      	add	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4403      	add	r3, r0
 800264a:	334c      	adds	r3, #76	; 0x4c
 800264c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d113      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3354      	adds	r3, #84	; 0x54
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002674:	461a      	mov	r2, r3
 8002676:	2101      	movs	r1, #1
 8002678:	f002 ff5c 	bl	8005534 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 fbd9 	bl	8007e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269e:	461a      	mov	r2, r3
 80026a0:	2308      	movs	r3, #8
 80026a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ba:	461a      	mov	r2, r3
 80026bc:	2310      	movs	r3, #16
 80026be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d6:	461a      	mov	r2, r3
 80026d8:	2340      	movs	r3, #64	; 0x40
 80026da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e8:	6a38      	ldr	r0, [r7, #32]
 80026ea:	f001 fe3d 	bl	8004368 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	3338      	adds	r3, #56	; 0x38
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f005 fc1c 	bl	8007f54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	2302      	movs	r3, #2
 800272c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fcdb 	bl	80030f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	3301      	adds	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	f47f af2e 	bne.w	80025b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fe27 	bl	80053ac <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002768:	d122      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002790:	2100      	movs	r1, #0
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fec2 	bl	800351c <HAL_PCDEx_LPM_Callback>
 8002798:	e002      	b.n	80027a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f005 fbba 	bl	8007f14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fdf9 	bl	80053ac <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c4:	d112      	bne.n	80027ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f005 fb76 	bl	8007ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fddb 	bl	80053ac <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	f040 80b7 	bne.w	8002972 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2110      	movs	r1, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fda2 	bl	8004368 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	e046      	b.n	80028b8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002836:	461a      	mov	r2, r3
 8002838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	440a      	add	r2, r1
 8002854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002870:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	440a      	add	r2, r1
 8002888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800288c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002890:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	3301      	adds	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3b3      	bcc.n	800282a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ee:	f043 030b 	orr.w	r3, r3, #11
 80028f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f043 030b 	orr.w	r3, r3, #11
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	e015      	b.n	8002938 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002922:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002932:	f043 030b 	orr.w	r3, r3, #11
 8002936:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002946:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800294a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800295c:	461a      	mov	r2, r3
 800295e:	f002 fde9 	bl	8005534 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fd18 	bl	80053ac <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d124      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fdae 	bl	80054ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fd63 	bl	8004462 <USB_GetDevSpeed>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	f001 f9e8 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 80029ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4620      	mov	r0, r4
 80029b8:	f001 fa62 	bl	8003e80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f005 fa64 	bl	8007e8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fce8 	bl	80053ac <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d10a      	bne.n	80029fc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f005 fa41 	bl	8007e6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f002 0208 	and.w	r2, r2, #8
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fcd3 	bl	80053ac <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d122      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e014      	b.n	8002a4c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb27 	bl	8003094 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3301      	adds	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3e5      	bcc.n	8002a22 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fca6 	bl	80053ac <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6a:	d13b      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e02b      	b.n	8002aca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3340      	adds	r3, #64	; 0x40
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da12      	bge.n	8002ac4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	333f      	adds	r3, #63	; 0x3f
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fae8 	bl	8003094 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3ce      	bcc.n	8002a72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fc5f 	bl	80053ac <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af8:	d155      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002afa:	2301      	movs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	e045      	b.n	8002b8c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d12e      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	da2b      	bge.n	8002b86 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d121      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b82:	6053      	str	r3, [r2, #4]
            break;
 8002b84:	e007      	b.n	8002b96 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	3301      	adds	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3b4      	bcc.n	8002b00 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 fbfe 	bl	80053ac <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d10a      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 f9db 	bl	8007f78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fbe8 	bl	80053ac <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d115      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f005 f9cb 	bl	8007f94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e000      	b.n	8002c12 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c10:	bf00      	nop
    }
  }
}
 8002c12:	3734      	adds	r7, #52	; 0x34
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PCD_SetAddress+0x1a>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e013      	b.n	8002c5a <HAL_PCD_SetAddress+0x42>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fb46 	bl	80052dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	4608      	mov	r0, r1
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4603      	mov	r3, r0
 8002c72:	70fb      	strb	r3, [r7, #3]
 8002c74:	460b      	mov	r3, r1
 8002c76:	803b      	strh	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da0f      	bge.n	8002ca8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3338      	adds	r3, #56	; 0x38
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
 8002ca6:	e00f      	b.n	8002cc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cd4:	883a      	ldrh	r2, [r7, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	78ba      	ldrb	r2, [r7, #2]
 8002cde:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cf2:	78bb      	ldrb	r3, [r7, #2]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d102      	bne.n	8002cfe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_Open+0xaa>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e00e      	b.n	8002d2a <HAL_PCD_EP_Open+0xc8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fbc6 	bl	80044ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d28:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da0f      	bge.n	8002d66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	3338      	adds	r3, #56	; 0x38
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	705a      	strb	r2, [r3, #1]
 8002d64:	e00f      	b.n	8002d86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_EP_Close+0x6e>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_Close+0x8c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fc04 	bl	80045bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d102      	bne.n	8002e22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	f001 fee3 	bl	8004c04 <USB_EP0StartXfer>
 8002e3e:	e008      	b.n	8002e52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6979      	ldr	r1, [r7, #20]
 8002e4e:	f001 fc91 	bl	8004774 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3338      	adds	r3, #56	; 0x38
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6979      	ldr	r1, [r7, #20]
 8002efe:	f001 fe81 	bl	8004c04 <USB_EP0StartXfer>
 8002f02:	e008      	b.n	8002f16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6979      	ldr	r1, [r7, #20]
 8002f12:	f001 fc2f 	bl	8004774 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d901      	bls.n	8002f3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e050      	b.n	8002fe0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da0f      	bge.n	8002f66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3338      	adds	r3, #56	; 0x38
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	705a      	strb	r2, [r3, #1]
 8002f64:	e00d      	b.n	8002f82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_EP_SetStall+0x82>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e01e      	b.n	8002fe0 <HAL_PCD_EP_SetStall+0xc0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 f8bf 	bl	8005134 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	b2d9      	uxtb	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f002 faaf 	bl	8005534 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d901      	bls.n	8003006 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e042      	b.n	800308c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da0f      	bge.n	800302e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3338      	adds	r3, #56	; 0x38
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	705a      	strb	r2, [r3, #1]
 800302c:	e00f      	b.n	800304e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	3304      	adds	r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_PCD_EP_ClrStall+0x86>
 800306a:	2302      	movs	r3, #2
 800306c:	e00e      	b.n	800308c <HAL_PCD_EP_ClrStall+0xa4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 f8c7 	bl	8005210 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da0c      	bge.n	80030c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3338      	adds	r3, #56	; 0x38
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e00c      	b.n	80030dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 fee6 	bl	8004eb4 <USB_EPStopXfer>
 80030e8:	4603      	mov	r3, r0
 80030ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030ec:	7afb      	ldrb	r3, [r7, #11]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b08a      	sub	sp, #40	; 0x28
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3338      	adds	r3, #56	; 0x38
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	429a      	cmp	r2, r3
 8003128:	d901      	bls.n	800312e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06c      	b.n	8003208 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	d902      	bls.n	800314a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3303      	adds	r3, #3
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003152:	e02b      	b.n	80031ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	429a      	cmp	r2, r3
 8003168:	d902      	bls.n	8003170 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3303      	adds	r3, #3
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003188:	b2db      	uxtb	r3, r3
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4603      	mov	r3, r0
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f001 ff3a 	bl	8005008 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	441a      	add	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d809      	bhi.n	80031d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d203      	bcs.n	80031d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1be      	bne.n	8003154 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d811      	bhi.n	8003206 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2201      	movs	r2, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	6939      	ldr	r1, [r7, #16]
 80031fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003202:	4013      	ands	r3, r2
 8003204:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	333c      	adds	r3, #60	; 0x3c
 8003228:	3304      	adds	r3, #4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d17b      	bne.n	800333e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f240 80b9 	bls.w	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80b3 	beq.w	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003278:	6093      	str	r3, [r2, #8]
 800327a:	e0a7      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	2320      	movs	r3, #32
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	e098      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f040 8093 	bne.w	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d90f      	bls.n	80032ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e07e      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d114      	bne.n	8003330 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003318:	461a      	mov	r2, r3
 800331a:	2101      	movs	r1, #1
 800331c:	f002 f90a 	bl	8005534 <USB_EP0_OutStart>
 8003320:	e006      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	441a      	add	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f004 fd64 	bl	8007e04 <HAL_PCD_DataOutStageCallback>
 800333c:	e046      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d124      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003362:	6093      	str	r3, [r2, #8]
 8003364:	e032      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	2320      	movs	r3, #32
 8003380:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f004 fd3b 	bl	8007e04 <HAL_PCD_DataOutStageCallback>
 800338e:	e01d      	b.n	80033cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d114      	bne.n	80033c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b8:	461a      	mov	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f002 f8ba 	bl	8005534 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f004 fd1c 	bl	8007e04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	4f54300a 	.word	0x4f54300a
 80033dc:	4f54310a 	.word	0x4f54310a

080033e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	333c      	adds	r3, #60	; 0x3c
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a15      	ldr	r2, [pc, #84]	; (8003468 <PCD_EP_OutSetupPacket_int+0x88>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d90e      	bls.n	8003434 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f004 fcd3 	bl	8007de0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <PCD_EP_OutSetupPacket_int+0x88>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d90c      	bls.n	800345c <PCD_EP_OutSetupPacket_int+0x7c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003454:	461a      	mov	r2, r3
 8003456:	2101      	movs	r1, #1
 8003458:	f002 f86c 	bl	8005534 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	4f54300a 	.word	0x4f54300a

0800346c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800348a:	883b      	ldrh	r3, [r7, #0]
 800348c:	0419      	lsls	r1, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	430a      	orrs	r2, r1
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
 8003498:	e028      	b.n	80034ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4413      	add	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e00d      	b.n	80034ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4413      	add	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	3301      	adds	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3ec      	bcc.n	80034ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034d4:	883b      	ldrh	r3, [r7, #0]
 80034d6:	0418      	lsls	r0, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	3b01      	subs	r3, #1
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4302      	orrs	r2, r0
 80034e4:	3340      	adds	r3, #64	; 0x40
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e267      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00c      	beq.n	8003578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003566:	2b08      	cmp	r3, #8
 8003568:	d112      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05b      	beq.n	800363c <HAL_RCC_OscConfig+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d157      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e242      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a75      	ldr	r2, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6c      	ldr	r2, [pc, #432]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd faa0 	bl	8000b30 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd fa9c 	bl	8000b30 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e207      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xc0>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fa8c 	bl	8000b30 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fd fa88 	bl	8000b30 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1f3      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0xe8>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1c7      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4937      	ldr	r1, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fd fa41 	bl	8000b30 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fd fa3d 	bl	8000b30 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1a8      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd fa20 	bl	8000b30 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fd fa1c 	bl	8000b30 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e187      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d036      	beq.n	800378c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fd fa00 	bl	8000b30 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003734:	f7fd f9fc 	bl	8000b30 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e167      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x200>
 8003752:	e01b      	b.n	800378c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fd f9e9 	bl	8000b30 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	e00e      	b.n	8003780 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003762:	f7fd f9e5 	bl	8000b30 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e150      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
 800377c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b88      	ldr	r3, [pc, #544]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ea      	bne.n	8003762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8097 	beq.w	80038c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a7c      	ldr	r2, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d6:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a73      	ldr	r2, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e2:	f7fd f9a5 	bl	8000b30 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fd f9a1 	bl	8000b30 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e10c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x2ea>
 8003810:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x30c>
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a5b      	ldr	r2, [pc, #364]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0304 	bic.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd f966 	bl	8000b30 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd f962 	bl	8000b30 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0cb      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ee      	beq.n	8003868 <HAL_RCC_OscConfig+0x334>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fd f950 	bl	8000b30 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fd f94c 	bl	8000b30 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0b5      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ee      	bne.n	8003894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a1 	beq.w	8003a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d2:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d05c      	beq.n	8003998 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d141      	bne.n	800396a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd f920 	bl	8000b30 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd f91c 	bl	8000b30 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e087      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd f8f5 	bl	8000b30 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd f8f1 	bl	8000b30 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e05c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x416>
 8003968:	e054      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fd f8de 	bl	8000b30 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd f8da 	bl	8000b30 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e045      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x444>
 8003996:	e03d      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e038      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x4ec>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d028      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d121      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0cc      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d90c      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	494d      	ldr	r1, [pc, #308]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d044      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d119      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e067      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4934      	ldr	r1, [pc, #208]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b14:	f7fd f80c 	bl	8000b30 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd f808 	bl	8000b30 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 020c 	and.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d1eb      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d20c      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e032      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4916      	ldr	r1, [pc, #88]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003baa:	f000 f821 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	490a      	ldr	r1, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc ff6c 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023c00 	.word	0x40023c00
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08008d1c 	.word	0x08008d1c
 8003be8:	20000064 	.word	0x20000064
 8003bec:	20000068 	.word	0x20000068

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b090      	sub	sp, #64	; 0x40
 8003bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	2300      	movs	r3, #0
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 80a1 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c22:	e09b      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c28:	e09b      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2e:	e098      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3a:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d028      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	627a      	str	r2, [r7, #36]	; 0x24
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c5c:	fb03 f201 	mul.w	r2, r3, r1
 8003c60:	2300      	movs	r3, #0
 8003c62:	fb00 f303 	mul.w	r3, r0, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	4a43      	ldr	r2, [pc, #268]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c70:	460a      	mov	r2, r1
 8003c72:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	4413      	add	r3, r2
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	61fa      	str	r2, [r7, #28]
 8003c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c8a:	f7fc faf9 	bl	8000280 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4613      	mov	r3, r2
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c96:	e053      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003caa:	f04f 0b00 	mov.w	fp, #0
 8003cae:	4652      	mov	r2, sl
 8003cb0:	465b      	mov	r3, fp
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cca:	eb63 090b 	sbc.w	r9, r3, fp
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ce2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ce6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	00eb      	lsls	r3, r5, #3
 8003cf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf8:	00e2      	lsls	r2, r4, #3
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	eb14 030a 	adds.w	r3, r4, sl
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	eb45 030b 	adc.w	r3, r5, fp
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d16:	4629      	mov	r1, r5
 8003d18:	028b      	lsls	r3, r1, #10
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d20:	4621      	mov	r1, r4
 8003d22:	028a      	lsls	r2, r1, #10
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	60fa      	str	r2, [r7, #12]
 8003d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d34:	f7fc faa4 	bl	8000280 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3740      	adds	r7, #64	; 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	017d7840 	.word	0x017d7840

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000064 	.word	0x20000064

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08008d2c 	.word	0x08008d2c

08003dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	f107 001c 	add.w	r0, r7, #28
 8003dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d122      	bne.n	8003e1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d105      	bne.n	8003e0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 fbee 	bl	80055f0 <USB_CoreReset>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e01a      	b.n	8003e50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 fbe2 	bl	80055f0 <USB_CoreReset>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
 8003e42:	e005      	b.n	8003e50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d10b      	bne.n	8003e6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f043 0206 	orr.w	r2, r3, #6
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e7a:	b004      	add	sp, #16
 8003e7c:	4770      	bx	lr
	...

08003e80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d165      	bne.n	8003f60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <USB_SetTurnaroundTime+0x11c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d906      	bls.n	8003eaa <USB_SetTurnaroundTime+0x2a>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <USB_SetTurnaroundTime+0x120>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d202      	bcs.n	8003eaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e062      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <USB_SetTurnaroundTime+0x120>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d306      	bcc.n	8003ec0 <USB_SetTurnaroundTime+0x40>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <USB_SetTurnaroundTime+0x124>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d202      	bcs.n	8003ec0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003eba:	230e      	movs	r3, #14
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e057      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a38      	ldr	r2, [pc, #224]	; (8003fa4 <USB_SetTurnaroundTime+0x124>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d306      	bcc.n	8003ed6 <USB_SetTurnaroundTime+0x56>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4a37      	ldr	r2, [pc, #220]	; (8003fa8 <USB_SetTurnaroundTime+0x128>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d202      	bcs.n	8003ed6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ed0:	230d      	movs	r3, #13
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e04c      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4a33      	ldr	r2, [pc, #204]	; (8003fa8 <USB_SetTurnaroundTime+0x128>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d306      	bcc.n	8003eec <USB_SetTurnaroundTime+0x6c>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4a32      	ldr	r2, [pc, #200]	; (8003fac <USB_SetTurnaroundTime+0x12c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d802      	bhi.n	8003eec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e041      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <USB_SetTurnaroundTime+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d906      	bls.n	8003f02 <USB_SetTurnaroundTime+0x82>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4a2e      	ldr	r2, [pc, #184]	; (8003fb0 <USB_SetTurnaroundTime+0x130>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d802      	bhi.n	8003f02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003efc:	230b      	movs	r3, #11
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e036      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <USB_SetTurnaroundTime+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d906      	bls.n	8003f18 <USB_SetTurnaroundTime+0x98>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <USB_SetTurnaroundTime+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f12:	230a      	movs	r3, #10
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e02b      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <USB_SetTurnaroundTime+0x134>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d906      	bls.n	8003f2e <USB_SetTurnaroundTime+0xae>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <USB_SetTurnaroundTime+0x138>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d202      	bcs.n	8003f2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f28:	2309      	movs	r3, #9
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e020      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <USB_SetTurnaroundTime+0x138>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d306      	bcc.n	8003f44 <USB_SetTurnaroundTime+0xc4>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <USB_SetTurnaroundTime+0x13c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d802      	bhi.n	8003f44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f3e:	2308      	movs	r3, #8
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e015      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <USB_SetTurnaroundTime+0x13c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d906      	bls.n	8003f5a <USB_SetTurnaroundTime+0xda>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <USB_SetTurnaroundTime+0x140>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d202      	bcs.n	8003f5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f54:	2307      	movs	r3, #7
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e00a      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f5a:	2306      	movs	r3, #6
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e007      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f66:	2309      	movs	r3, #9
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e001      	b.n	8003f70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f6c:	2309      	movs	r3, #9
 8003f6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	00d8acbf 	.word	0x00d8acbf
 8003fa0:	00e4e1c0 	.word	0x00e4e1c0
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	01067380 	.word	0x01067380
 8003fac:	011a499f 	.word	0x011a499f
 8003fb0:	01312cff 	.word	0x01312cff
 8003fb4:	014ca43f 	.word	0x014ca43f
 8003fb8:	016e3600 	.word	0x016e3600
 8003fbc:	01a6ab1f 	.word	0x01a6ab1f
 8003fc0:	01e84800 	.word	0x01e84800

08003fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004036:	2001      	movs	r0, #1
 8004038:	f7fc fd86 	bl	8000b48 <HAL_Delay>
      ms++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f001 fa45 	bl	80054d2 <USB_GetMode>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d01e      	beq.n	800408c <USB_SetCurrentMode+0x84>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b31      	cmp	r3, #49	; 0x31
 8004052:	d9f0      	bls.n	8004036 <USB_SetCurrentMode+0x2e>
 8004054:	e01a      	b.n	800408c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d115      	bne.n	8004088 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004068:	2001      	movs	r0, #1
 800406a:	f7fc fd6d 	bl	8000b48 <HAL_Delay>
      ms++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fa2c 	bl	80054d2 <USB_GetMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <USB_SetCurrentMode+0x84>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b31      	cmp	r3, #49	; 0x31
 8004084:	d9f0      	bls.n	8004068 <USB_SetCurrentMode+0x60>
 8004086:	e001      	b.n	800408c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e005      	b.n	8004098 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b32      	cmp	r3, #50	; 0x32
 8004090:	d101      	bne.n	8004096 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040a0:	b084      	sub	sp, #16
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e009      	b.n	80040d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3340      	adds	r3, #64	; 0x40
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3301      	adds	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b0e      	cmp	r3, #14
 80040d8:	d9f2      	bls.n	80040c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11c      	bne.n	800411a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ee:	f043 0302 	orr.w	r3, r3, #2
 80040f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
 8004118:	e00b      	b.n	8004132 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	4619      	mov	r1, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414c:	461a      	mov	r2, r3
 800414e:	680b      	ldr	r3, [r1, #0]
 8004150:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800415e:	2100      	movs	r1, #0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f965 	bl	8004430 <USB_SetDevSpeed>
 8004166:	e008      	b.n	800417a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004168:	2101      	movs	r1, #1
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f960 	bl	8004430 <USB_SetDevSpeed>
 8004170:	e003      	b.n	800417a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004172:	2103      	movs	r1, #3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f95b 	bl	8004430 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800417a:	2110      	movs	r1, #16
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8f3 	bl	8004368 <USB_FlushTxFifo>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f91f 	bl	80043d0 <USB_FlushRxFifo>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	e043      	b.n	800424e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041dc:	d118      	bne.n	8004210 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	461a      	mov	r2, r3
 80041f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e013      	b.n	8004222 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	461a      	mov	r2, r3
 8004208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e008      	b.n	8004222 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	461a      	mov	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	461a      	mov	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	461a      	mov	r2, r3
 8004242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3301      	adds	r3, #1
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	d3b7      	bcc.n	80041c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e043      	b.n	80042e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800426e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004272:	d118      	bne.n	80042a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	461a      	mov	r2, r3
 8004288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e013      	b.n	80042b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e008      	b.n	80042b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b2:	461a      	mov	r2, r3
 80042b4:	2300      	movs	r3, #0
 80042b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3b7      	bcc.n	800425c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800430c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f043 0210 	orr.w	r2, r3, #16
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <USB_DevInit+0x2c4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f043 0208 	orr.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004360:	b004      	add	sp, #16
 8004362:	4770      	bx	lr
 8004364:	803c3800 	.word	0x803c3800

08004368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3301      	adds	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <USB_FlushTxFifo+0x64>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e01b      	b.n	80043c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	daf2      	bge.n	8004376 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	019b      	lsls	r3, r3, #6
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <USB_FlushTxFifo+0x64>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e006      	b.n	80043c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d0f0      	beq.n	80043a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	00030d40 	.word	0x00030d40

080043d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a11      	ldr	r2, [pc, #68]	; (800442c <USB_FlushRxFifo+0x5c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e018      	b.n	8004420 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	daf2      	bge.n	80043dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2210      	movs	r2, #16
 80043fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <USB_FlushRxFifo+0x5c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b10      	cmp	r3, #16
 800441c:	d0f0      	beq.n	8004400 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	00030d40 	.word	0x00030d40

08004430 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0306 	and.w	r3, r3, #6
 800447a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
 8004486:	e00a      	b.n	800449e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d002      	beq.n	8004494 <USB_GetDevSpeed+0x32>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b06      	cmp	r3, #6
 8004492:	d102      	bne.n	800449a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004494:	2302      	movs	r3, #2
 8004496:	75fb      	strb	r3, [r7, #23]
 8004498:	e001      	b.n	800449e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800449a:	230f      	movs	r3, #15
 800449c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800449e:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d13a      	bne.n	800453e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d155      	bne.n	80045ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	791b      	ldrb	r3, [r3, #4]
 800451a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800451c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	059b      	lsls	r3, r3, #22
 8004522:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004524:	4313      	orrs	r3, r2
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e036      	b.n	80045ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	2101      	movs	r1, #1
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800455c:	4313      	orrs	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11a      	bne.n	80045ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004592:	430b      	orrs	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d161      	bne.n	800469c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ee:	d11f      	bne.n	8004630 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800460e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800462e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004650:	4013      	ands	r3, r2
 8004652:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004674:	4013      	ands	r3, r2
 8004676:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	0159      	lsls	r1, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	440b      	add	r3, r1
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	4619      	mov	r1, r3
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <USB_DeactivateEndpoint+0x1b0>)
 8004696:	4013      	ands	r3, r2
 8004698:	600b      	str	r3, [r1, #0]
 800469a:	e060      	b.n	800475e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b2:	d11f      	bne.n	80046f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	43db      	mvns	r3, r3
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004714:	4013      	ands	r3, r2
 8004716:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	43db      	mvns	r3, r3
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004738:	4013      	ands	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	440b      	add	r3, r1
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	4619      	mov	r1, r3
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <USB_DeactivateEndpoint+0x1b4>)
 800475a:	4013      	ands	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	ec337800 	.word	0xec337800
 8004770:	eff37800 	.word	0xeff37800

08004774 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b01      	cmp	r3, #1
 8004792:	f040 815c 	bne.w	8004a4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d132      	bne.n	8004804 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	0cdb      	lsrs	r3, r3, #19
 80047fe:	04db      	lsls	r3, r3, #19
 8004800:	6113      	str	r3, [r2, #16]
 8004802:	e074      	b.n	80048ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	0cdb      	lsrs	r3, r3, #19
 8004820:	04db      	lsls	r3, r3, #19
 8004822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	440b      	add	r3, r1
 8004860:	1e59      	subs	r1, r3, #1
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	fbb1 f3f3 	udiv	r3, r1, r3
 800486a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800486c:	4b9d      	ldr	r3, [pc, #628]	; (8004ae4 <USB_EPStartXfer+0x370>)
 800486e:	400b      	ands	r3, r1
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	0148      	lsls	r0, r1, #5
 8004874:	69f9      	ldr	r1, [r7, #28]
 8004876:	4401      	add	r1, r0
 8004878:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800487c:	4313      	orrs	r3, r2
 800487e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004896:	69b9      	ldr	r1, [r7, #24]
 8004898:	0148      	lsls	r0, r1, #5
 800489a:	69f9      	ldr	r1, [r7, #28]
 800489c:	4401      	add	r1, r0
 800489e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048a2:	4313      	orrs	r3, r2
 80048a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d11f      	bne.n	80048ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d14b      	bne.n	800498c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	791b      	ldrb	r3, [r3, #4]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d128      	bne.n	800496a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d110      	bne.n	800494a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e00f      	b.n	800496a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e133      	b.n	8004bf4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d015      	beq.n	80049e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 811b 	beq.w	8004bf4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	69f9      	ldr	r1, [r7, #28]
 80049d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049da:	4313      	orrs	r3, r2
 80049dc:	634b      	str	r3, [r1, #52]	; 0x34
 80049de:	e109      	b.n	8004bf4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d110      	bne.n	8004a12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e00f      	b.n	8004a32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6919      	ldr	r1, [r3, #16]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	b298      	uxth	r0, r3
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	4603      	mov	r3, r0
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fade 	bl	8005008 <USB_WritePacket>
 8004a4c:	e0d2      	b.n	8004bf4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	0cdb      	lsrs	r3, r3, #19
 8004a6a:	04db      	lsls	r3, r3, #19
 8004a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d126      	bne.n	8004ae8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	0148      	lsls	r0, r1, #5
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	4401      	add	r1, r0
 8004ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004abc:	4313      	orrs	r3, r2
 8004abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ade:	6113      	str	r3, [r2, #16]
 8004ae0:	e03a      	b.n	8004b58 <USB_EPStartXfer+0x3e4>
 8004ae2:	bf00      	nop
 8004ae4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	1e5a      	subs	r2, r3, #1
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	8afa      	ldrh	r2, [r7, #22]
 8004b04:	fb03 f202 	mul.w	r2, r3, r2
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	8afb      	ldrh	r3, [r7, #22]
 8004b1c:	04d9      	lsls	r1, r3, #19
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <USB_EPStartXfer+0x48c>)
 8004b20:	400b      	ands	r3, r1
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	0148      	lsls	r0, r1, #5
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	4401      	add	r1, r0
 8004b2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	69b9      	ldr	r1, [r7, #24]
 8004b4a:	0148      	lsls	r0, r1, #5
 8004b4c:	69f9      	ldr	r1, [r7, #28]
 8004b4e:	4401      	add	r1, r0
 8004b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b54:	4313      	orrs	r3, r2
 8004b56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10d      	bne.n	8004b7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	460a      	mov	r2, r1
 8004b78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	791b      	ldrb	r3, [r3, #4]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d128      	bne.n	8004bd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d110      	bne.n	8004bb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00f      	b.n	8004bd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	1ff80000 	.word	0x1ff80000

08004c04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 80ce 	bne.w	8004dc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d132      	bne.n	8004c94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	0cdb      	lsrs	r3, r3, #19
 8004c8e:	04db      	lsls	r3, r3, #19
 8004c90:	6113      	str	r3, [r2, #16]
 8004c92:	e04e      	b.n	8004d32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	0cdb      	lsrs	r3, r3, #19
 8004cb0:	04db      	lsls	r3, r3, #19
 8004cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d22:	6939      	ldr	r1, [r7, #16]
 8004d24:	0148      	lsls	r0, r1, #5
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	4401      	add	r1, r0
 8004d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11e      	bne.n	8004d76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e097      	b.n	8004ea6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8083 	beq.w	8004ea6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	2101      	movs	r1, #1
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	634b      	str	r3, [r1, #52]	; 0x34
 8004dc0:	e071      	b.n	8004ea6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ddc:	0cdb      	lsrs	r3, r3, #19
 8004dde:	04db      	lsls	r3, r3, #19
 8004de0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	6939      	ldr	r1, [r7, #16]
 8004e56:	0148      	lsls	r0, r1, #5
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	4401      	add	r1, r0
 8004e5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10d      	bne.n	8004e86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6919      	ldr	r1, [r3, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	460a      	mov	r2, r1
 8004e84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d14a      	bne.n	8004f68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eea:	f040 8086 	bne.w	8004ffa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d902      	bls.n	8004f4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	75fb      	strb	r3, [r7, #23]
          break;
 8004f4a:	e056      	b.n	8004ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f64:	d0e7      	beq.n	8004f36 <USB_EPStopXfer+0x82>
 8004f66:	e048      	b.n	8004ffa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f80:	d13b      	bne.n	8004ffa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d902      	bls.n	8004fe0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8004fde:	e00c      	b.n	8004ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff8:	d0e7      	beq.n	8004fca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	460b      	mov	r3, r1
 8005018:	71fb      	strb	r3, [r7, #7]
 800501a:	4613      	mov	r3, r2
 800501c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d123      	bne.n	8005076 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800502e:	88bb      	ldrh	r3, [r7, #4]
 8005030:	3303      	adds	r3, #3
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e018      	b.n	800506e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	031a      	lsls	r2, r3, #12
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005048:	461a      	mov	r2, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	3301      	adds	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	3301      	adds	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3301      	adds	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3301      	adds	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	429a      	cmp	r2, r3
 8005074:	d3e2      	bcc.n	800503c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3724      	adds	r7, #36	; 0x24
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005084:	b480      	push	{r7}
 8005086:	b08b      	sub	sp, #44	; 0x2c
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	e014      	b.n	80050da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	3301      	adds	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	3301      	adds	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	3301      	adds	r3, #1
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	3301      	adds	r3, #1
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d3e6      	bcc.n	80050b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050e2:	8bfb      	ldrh	r3, [r7, #30]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01e      	beq.n	8005126 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f2:	461a      	mov	r2, r3
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	701a      	strb	r2, [r3, #0]
      i++;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	3301      	adds	r3, #1
 8005112:	623b      	str	r3, [r7, #32]
      pDest++;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800511a:	8bfb      	ldrh	r3, [r7, #30]
 800511c:	3b01      	subs	r3, #1
 800511e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005120:	8bfb      	ldrh	r3, [r7, #30]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ea      	bne.n	80050fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005128:	4618      	mov	r0, r3
 800512a:	372c      	adds	r7, #44	; 0x2c
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d12c      	bne.n	80051aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	db12      	blt.n	8005188 <USB_EPSetStall+0x54>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00f      	beq.n	8005188 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005186:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e02b      	b.n	8005202 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	db12      	blt.n	80051e2 <USB_EPSetStall+0xae>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00f      	beq.n	80051e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005200:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d128      	bne.n	800527e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800524a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d003      	beq.n	800525c <USB_EPClearStall+0x4c>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	791b      	ldrb	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d138      	bne.n	80052ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e027      	b.n	80052ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800529c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d003      	beq.n	80052ae <USB_EPClearStall+0x9e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	791b      	ldrb	r3, [r3, #4]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d10f      	bne.n	80052ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005356:	f023 0302 	bic.w	r3, r3, #2
 800535a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	0c1b      	lsrs	r3, r3, #16
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	b29b      	uxth	r3, r3
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	460b      	mov	r3, r1
 8005444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005468:	68bb      	ldr	r3, [r7, #8]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	01db      	lsls	r3, r3, #7
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054c4:	68bb      	ldr	r3, [r7, #8]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0301 	and.w	r3, r3, #1
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005508:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800550c:	f023 0307 	bic.w	r3, r3, #7
 8005510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	460b      	mov	r3, r1
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	333c      	adds	r3, #60	; 0x3c
 800554a:	3304      	adds	r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4a26      	ldr	r2, [pc, #152]	; (80055ec <USB_EP0_OutStart+0xb8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d90a      	bls.n	800556e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005568:	d101      	bne.n	800556e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e037      	b.n	80055de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	f043 0318 	orr.w	r3, r3, #24
 80055a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055b6:	7afb      	ldrb	r3, [r7, #11]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10f      	bne.n	80055dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	4f54300a 	.word	0x4f54300a

080055f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <USB_CoreReset+0x64>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e01b      	b.n	8005646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	daf2      	bge.n	80055fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <USB_CoreReset+0x64>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e006      	b.n	8005646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d0f0      	beq.n	8005626 <USB_CoreReset+0x36>

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	00030d40 	.word	0x00030d40

08005658 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005664:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005668:	f002 fe2c 	bl	80082c4 <USBD_static_malloc>
 800566c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32b0      	adds	r2, #176	; 0xb0
 800567e:	2100      	movs	r1, #0
 8005680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005684:	2302      	movs	r3, #2
 8005686:	e0d4      	b.n	8005832 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005688:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800568c:	2100      	movs	r1, #0
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f002 fe86 	bl	80083a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	32b0      	adds	r2, #176	; 0xb0
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	32b0      	adds	r2, #176	; 0xb0
 80056ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7c1b      	ldrb	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d138      	bne.n	8005732 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056c0:	4b5e      	ldr	r3, [pc, #376]	; (800583c <USBD_CDC_Init+0x1e4>)
 80056c2:	7819      	ldrb	r1, [r3, #0]
 80056c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c8:	2202      	movs	r2, #2
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f002 fcd7 	bl	800807e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056d0:	4b5a      	ldr	r3, [pc, #360]	; (800583c <USBD_CDC_Init+0x1e4>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	2201      	movs	r2, #1
 80056e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056ea:	4b55      	ldr	r3, [pc, #340]	; (8005840 <USBD_CDC_Init+0x1e8>)
 80056ec:	7819      	ldrb	r1, [r3, #0]
 80056ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f2:	2202      	movs	r2, #2
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f002 fcc2 	bl	800807e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056fa:	4b51      	ldr	r3, [pc, #324]	; (8005840 <USBD_CDC_Init+0x1e8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005712:	2201      	movs	r2, #1
 8005714:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005716:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <USBD_CDC_Init+0x1ec>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 020f 	and.w	r2, r3, #15
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	3326      	adds	r3, #38	; 0x26
 800572c:	2210      	movs	r2, #16
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	e035      	b.n	800579e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005732:	4b42      	ldr	r3, [pc, #264]	; (800583c <USBD_CDC_Init+0x1e4>)
 8005734:	7819      	ldrb	r1, [r3, #0]
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	2202      	movs	r2, #2
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f002 fc9f 	bl	800807e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005740:	4b3e      	ldr	r3, [pc, #248]	; (800583c <USBD_CDC_Init+0x1e4>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f003 020f 	and.w	r2, r3, #15
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3324      	adds	r3, #36	; 0x24
 8005756:	2201      	movs	r2, #1
 8005758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800575a:	4b39      	ldr	r3, [pc, #228]	; (8005840 <USBD_CDC_Init+0x1e8>)
 800575c:	7819      	ldrb	r1, [r3, #0]
 800575e:	2340      	movs	r3, #64	; 0x40
 8005760:	2202      	movs	r2, #2
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f002 fc8b 	bl	800807e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005768:	4b35      	ldr	r3, [pc, #212]	; (8005840 <USBD_CDC_Init+0x1e8>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005780:	2201      	movs	r2, #1
 8005782:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005784:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <USBD_CDC_Init+0x1ec>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3326      	adds	r3, #38	; 0x26
 800579a:	2210      	movs	r2, #16
 800579c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <USBD_CDC_Init+0x1ec>)
 80057a0:	7819      	ldrb	r1, [r3, #0]
 80057a2:	2308      	movs	r3, #8
 80057a4:	2203      	movs	r2, #3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f002 fc69 	bl	800807e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <USBD_CDC_Init+0x1ec>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	2201      	movs	r2, #1
 80057c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	33b0      	adds	r3, #176	; 0xb0
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057fc:	2302      	movs	r3, #2
 80057fe:	e018      	b.n	8005832 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7c1b      	ldrb	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <USBD_CDC_Init+0x1e8>)
 800580a:	7819      	ldrb	r1, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f002 fd20 	bl	800825c <USBD_LL_PrepareReceive>
 800581c:	e008      	b.n	8005830 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <USBD_CDC_Init+0x1e8>)
 8005820:	7819      	ldrb	r1, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f002 fd16 	bl	800825c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200000f7 	.word	0x200000f7
 8005840:	200000f8 	.word	0x200000f8
 8005844:	200000f9 	.word	0x200000f9

08005848 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005854:	4b3a      	ldr	r3, [pc, #232]	; (8005940 <USBD_CDC_DeInit+0xf8>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f002 fc35 	bl	80080ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005860:	4b37      	ldr	r3, [pc, #220]	; (8005940 <USBD_CDC_DeInit+0xf8>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3324      	adds	r3, #36	; 0x24
 8005876:	2200      	movs	r2, #0
 8005878:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800587a:	4b32      	ldr	r3, [pc, #200]	; (8005944 <USBD_CDC_DeInit+0xfc>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f002 fc22 	bl	80080ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <USBD_CDC_DeInit+0xfc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f003 020f 	and.w	r2, r3, #15
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800589e:	2200      	movs	r2, #0
 80058a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <USBD_CDC_DeInit+0x100>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f002 fc0e 	bl	80080ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <USBD_CDC_DeInit+0x100>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 020f 	and.w	r2, r3, #15
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3324      	adds	r3, #36	; 0x24
 80058c4:	2200      	movs	r2, #0
 80058c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058c8:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <USBD_CDC_DeInit+0x100>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f003 020f 	and.w	r2, r3, #15
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	3326      	adds	r3, #38	; 0x26
 80058de:	2200      	movs	r2, #0
 80058e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	32b0      	adds	r2, #176	; 0xb0
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01f      	beq.n	8005934 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	33b0      	adds	r3, #176	; 0xb0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32b0      	adds	r2, #176	; 0xb0
 8005912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005916:	4618      	mov	r0, r3
 8005918:	f002 fce2 	bl	80082e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	32b0      	adds	r2, #176	; 0xb0
 8005926:	2100      	movs	r1, #0
 8005928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200000f7 	.word	0x200000f7
 8005944:	200000f8 	.word	0x200000f8
 8005948:	200000f9 	.word	0x200000f9

0800594c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	32b0      	adds	r2, #176	; 0xb0
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	e0bf      	b.n	8005afc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005984:	2b00      	cmp	r3, #0
 8005986:	d050      	beq.n	8005a2a <USBD_CDC_Setup+0xde>
 8005988:	2b20      	cmp	r3, #32
 800598a:	f040 80af 	bne.w	8005aec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	88db      	ldrh	r3, [r3, #6]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d03a      	beq.n	8005a0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b25b      	sxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	da1b      	bge.n	80059d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	33b0      	adds	r3, #176	; 0xb0
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80059b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	88d2      	ldrh	r2, [r2, #6]
 80059bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	88db      	ldrh	r3, [r3, #6]
 80059c2:	2b07      	cmp	r3, #7
 80059c4:	bf28      	it	cs
 80059c6:	2307      	movcs	r3, #7
 80059c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	89fa      	ldrh	r2, [r7, #14]
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fd89 	bl	80074e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059d6:	e090      	b.n	8005afa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	785a      	ldrb	r2, [r3, #1]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	88db      	ldrh	r3, [r3, #6]
 80059e6:	2b3f      	cmp	r3, #63	; 0x3f
 80059e8:	d803      	bhi.n	80059f2 <USBD_CDC_Setup+0xa6>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	88db      	ldrh	r3, [r3, #6]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	e000      	b.n	80059f4 <USBD_CDC_Setup+0xa8>
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059fa:	6939      	ldr	r1, [r7, #16]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a02:	461a      	mov	r2, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fd9b 	bl	8007540 <USBD_CtlPrepareRx>
      break;
 8005a0a:	e076      	b.n	8005afa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	33b0      	adds	r3, #176	; 0xb0
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	7850      	ldrb	r0, [r2, #1]
 8005a22:	2200      	movs	r2, #0
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4798      	blx	r3
      break;
 8005a28:	e067      	b.n	8005afa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b0b      	cmp	r3, #11
 8005a30:	d851      	bhi.n	8005ad6 <USBD_CDC_Setup+0x18a>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <USBD_CDC_Setup+0xec>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a69 	.word	0x08005a69
 8005a3c:	08005ae5 	.word	0x08005ae5
 8005a40:	08005ad7 	.word	0x08005ad7
 8005a44:	08005ad7 	.word	0x08005ad7
 8005a48:	08005ad7 	.word	0x08005ad7
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005ad7 	.word	0x08005ad7
 8005a54:	08005ad7 	.word	0x08005ad7
 8005a58:	08005ad7 	.word	0x08005ad7
 8005a5c:	08005ad7 	.word	0x08005ad7
 8005a60:	08005a93 	.word	0x08005a93
 8005a64:	08005abd 	.word	0x08005abd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d107      	bne.n	8005a84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a74:	f107 030a 	add.w	r3, r7, #10
 8005a78:	2202      	movs	r2, #2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fd33 	bl	80074e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a82:	e032      	b.n	8005aea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 fcbd 	bl	8007406 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a90:	e02b      	b.n	8005aea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d107      	bne.n	8005aae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a9e:	f107 030d 	add.w	r3, r7, #13
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fd1e 	bl	80074e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aac:	e01d      	b.n	8005aea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fca8 	bl	8007406 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aba:	e016      	b.n	8005aea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d00f      	beq.n	8005ae8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 fc9b 	bl	8007406 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ad4:	e008      	b.n	8005ae8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fc94 	bl	8007406 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae2:	e002      	b.n	8005aea <USBD_CDC_Setup+0x19e>
          break;
 8005ae4:	bf00      	nop
 8005ae6:	e008      	b.n	8005afa <USBD_CDC_Setup+0x1ae>
          break;
 8005ae8:	bf00      	nop
      }
      break;
 8005aea:	e006      	b.n	8005afa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fc89 	bl	8007406 <USBD_CtlError>
      ret = USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	75fb      	strb	r3, [r7, #23]
      break;
 8005af8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	32b0      	adds	r2, #176	; 0xb0
 8005b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e065      	b.n	8005bfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	32b0      	adds	r2, #176	; 0xb0
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	f003 020f 	and.w	r2, r3, #15
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	3318      	adds	r3, #24
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02f      	beq.n	8005bb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3318      	adds	r3, #24
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f003 010f 	and.w	r1, r3, #15
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	460b      	mov	r3, r1
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	440b      	add	r3, r1
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4403      	add	r3, r0
 8005b80:	3348      	adds	r3, #72	; 0x48
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d112      	bne.n	8005bb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	f003 020f 	and.w	r2, r3, #15
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005baa:	78f9      	ldrb	r1, [r7, #3]
 8005bac:	2300      	movs	r3, #0
 8005bae:	2200      	movs	r2, #0
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f002 fb32 	bl	800821a <USBD_LL_Transmit>
 8005bb6:	e01f      	b.n	8005bf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	33b0      	adds	r3, #176	; 0xb0
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	33b0      	adds	r3, #176	; 0xb0
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	32b0      	adds	r2, #176	; 0xb0
 8005c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	32b0      	adds	r2, #176	; 0xb0
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e01a      	b.n	8005c6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f002 fb30 	bl	800829e <USBD_LL_GetRxDataSize>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	33b0      	adds	r3, #176	; 0xb0
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c64:	4611      	mov	r1, r2
 8005c66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	32b0      	adds	r2, #176	; 0xb0
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e025      	b.n	8005ce0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	33b0      	adds	r3, #176	; 0xb0
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01a      	beq.n	8005cde <USBD_CDC_EP0_RxReady+0x6c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cae:	2bff      	cmp	r3, #255	; 0xff
 8005cb0:	d015      	beq.n	8005cde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	33b0      	adds	r3, #176	; 0xb0
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005cca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cf0:	2182      	movs	r1, #130	; 0x82
 8005cf2:	4818      	ldr	r0, [pc, #96]	; (8005d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cf4:	f000 fd4f 	bl	8006796 <USBD_GetEpDesc>
 8005cf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4815      	ldr	r0, [pc, #84]	; (8005d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cfe:	f000 fd4a 	bl	8006796 <USBD_GetEpDesc>
 8005d02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d04:	2181      	movs	r1, #129	; 0x81
 8005d06:	4813      	ldr	r0, [pc, #76]	; (8005d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d08:	f000 fd45 	bl	8006796 <USBD_GetEpDesc>
 8005d0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2210      	movs	r2, #16
 8005d18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d28:	711a      	strb	r2, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3c:	711a      	strb	r2, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2243      	movs	r2, #67	; 0x43
 8005d46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d48:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200000b4 	.word	0x200000b4

08005d58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d60:	2182      	movs	r1, #130	; 0x82
 8005d62:	4818      	ldr	r0, [pc, #96]	; (8005dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d64:	f000 fd17 	bl	8006796 <USBD_GetEpDesc>
 8005d68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4815      	ldr	r0, [pc, #84]	; (8005dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d6e:	f000 fd12 	bl	8006796 <USBD_GetEpDesc>
 8005d72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d74:	2181      	movs	r1, #129	; 0x81
 8005d76:	4813      	ldr	r0, [pc, #76]	; (8005dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d78:	f000 fd0d 	bl	8006796 <USBD_GetEpDesc>
 8005d7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2210      	movs	r2, #16
 8005d88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2200      	movs	r2, #0
 8005d94:	711a      	strb	r2, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f042 0202 	orr.w	r2, r2, #2
 8005d9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	711a      	strb	r2, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f042 0202 	orr.w	r2, r2, #2
 8005db0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2243      	movs	r2, #67	; 0x43
 8005db6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005db8:	4b02      	ldr	r3, [pc, #8]	; (8005dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200000b4 	.word	0x200000b4

08005dc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dd0:	2182      	movs	r1, #130	; 0x82
 8005dd2:	4818      	ldr	r0, [pc, #96]	; (8005e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dd4:	f000 fcdf 	bl	8006796 <USBD_GetEpDesc>
 8005dd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4815      	ldr	r0, [pc, #84]	; (8005e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dde:	f000 fcda 	bl	8006796 <USBD_GetEpDesc>
 8005de2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005de4:	2181      	movs	r1, #129	; 0x81
 8005de6:	4813      	ldr	r0, [pc, #76]	; (8005e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005de8:	f000 fcd5 	bl	8006796 <USBD_GetEpDesc>
 8005dec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2210      	movs	r2, #16
 8005df8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e08:	711a      	strb	r2, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1c:	711a      	strb	r2, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2243      	movs	r2, #67	; 0x43
 8005e26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e28:	4b02      	ldr	r3, [pc, #8]	; (8005e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200000b4 	.word	0x200000b4

08005e38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	220a      	movs	r2, #10
 8005e44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e46:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	20000070 	.word	0x20000070

08005e58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e009      	b.n	8005e80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	33b0      	adds	r3, #176	; 0xb0
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	32b0      	adds	r2, #176	; 0xb0
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e008      	b.n	8005ec4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	32b0      	adds	r2, #176	; 0xb0
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e004      	b.n	8005efe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32b0      	adds	r2, #176	; 0xb0
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32b0      	adds	r2, #176	; 0xb0
 8005f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e025      	b.n	8005f8a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11f      	bne.n	8005f88 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <USBD_CDC_TransmitPacket+0x88>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4403      	add	r3, r0
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <USBD_CDC_TransmitPacket+0x88>)
 8005f70:	7819      	ldrb	r1, [r3, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 f94b 	bl	800821a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200000f7 	.word	0x200000f7

08005f98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	; 0xb0
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32b0      	adds	r2, #176	; 0xb0
 8005fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e018      	b.n	8005ff8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7c1b      	ldrb	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <USBD_CDC_ReceivePacket+0x68>)
 8005fd0:	7819      	ldrb	r1, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 f93d 	bl	800825c <USBD_LL_PrepareReceive>
 8005fe2:	e008      	b.n	8005ff6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <USBD_CDC_ReceivePacket+0x68>)
 8005fe6:	7819      	ldrb	r1, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f002 f933 	bl	800825c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200000f8 	.word	0x200000f8

08006004 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e01f      	b.n	800605c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	79fa      	ldrb	r2, [r7, #7]
 800604e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f001 ffad 	bl	8007fb0 <USBD_LL_Init>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]

  return ret;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006078:	2303      	movs	r3, #3
 800607a:	e025      	b.n	80060c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32ae      	adds	r2, #174	; 0xae
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00f      	beq.n	80060b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	32ae      	adds	r2, #174	; 0xae
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	f107 020e 	add.w	r2, r7, #14
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3
 80060b0:	4602      	mov	r2, r0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 ffb5 	bl	8008048 <USBD_LL_Start>
 80060de:	4603      	mov	r3, r0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	4611      	mov	r1, r2
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	4611      	mov	r1, r2
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f908 	bl	8007392 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006190:	461a      	mov	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d01a      	beq.n	80061dc <USBD_LL_SetupStage+0x72>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d822      	bhi.n	80061f0 <USBD_LL_SetupStage+0x86>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <USBD_LL_SetupStage+0x4a>
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d00a      	beq.n	80061c8 <USBD_LL_SetupStage+0x5e>
 80061b2:	e01d      	b.n	80061f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fb5f 	bl	8006880 <USBD_StdDevReq>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]
      break;
 80061c6:	e020      	b.n	800620a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fbc7 	bl	8006964 <USBD_StdItfReq>
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
      break;
 80061da:	e016      	b.n	800620a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fc29 	bl	8006a3c <USBD_StdEPReq>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	e00c      	b.n	800620a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 ff82 	bl	8008108 <USBD_LL_StallEP>
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	bf00      	nop
  }

  return ret;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	460b      	mov	r3, r1
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d16e      	bne.n	800630a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006232:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800623a:	2b03      	cmp	r3, #3
 800623c:	f040 8098 	bne.w	8006370 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d913      	bls.n	8006274 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	4293      	cmp	r3, r2
 8006264:	bf28      	it	cs
 8006266:	4613      	movcs	r3, r2
 8006268:	461a      	mov	r2, r3
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f001 f984 	bl	800757a <USBD_CtlContinueRx>
 8006272:	e07d      	b.n	8006370 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b02      	cmp	r3, #2
 8006280:	d014      	beq.n	80062ac <USBD_LL_DataOutStage+0x98>
 8006282:	2b02      	cmp	r3, #2
 8006284:	d81d      	bhi.n	80062c2 <USBD_LL_DataOutStage+0xae>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <USBD_LL_DataOutStage+0x7c>
 800628a:	2b01      	cmp	r3, #1
 800628c:	d003      	beq.n	8006296 <USBD_LL_DataOutStage+0x82>
 800628e:	e018      	b.n	80062c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	75bb      	strb	r3, [r7, #22]
            break;
 8006294:	e018      	b.n	80062c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fa5e 	bl	8006762 <USBD_CoreFindIF>
 80062a6:	4603      	mov	r3, r0
 80062a8:	75bb      	strb	r3, [r7, #22]
            break;
 80062aa:	e00d      	b.n	80062c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa60 	bl	800677c <USBD_CoreFindEP>
 80062bc:	4603      	mov	r3, r0
 80062be:	75bb      	strb	r3, [r7, #22]
            break;
 80062c0:	e002      	b.n	80062c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	75bb      	strb	r3, [r7, #22]
            break;
 80062c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80062c8:	7dbb      	ldrb	r3, [r7, #22]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d119      	bne.n	8006302 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d113      	bne.n	8006302 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80062da:	7dba      	ldrb	r2, [r7, #22]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062ea:	7dba      	ldrb	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062f2:	7dba      	ldrb	r2, [r7, #22]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	32ae      	adds	r2, #174	; 0xae
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 f94a 	bl	800759c <USBD_CtlSendStatus>
 8006308:	e032      	b.n	8006370 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800630a:	7afb      	ldrb	r3, [r7, #11]
 800630c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006310:	b2db      	uxtb	r3, r3
 8006312:	4619      	mov	r1, r3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa31 	bl	800677c <USBD_CoreFindEP>
 800631a:	4603      	mov	r3, r0
 800631c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800631e:	7dbb      	ldrb	r3, [r7, #22]
 8006320:	2bff      	cmp	r3, #255	; 0xff
 8006322:	d025      	beq.n	8006370 <USBD_LL_DataOutStage+0x15c>
 8006324:	7dbb      	ldrb	r3, [r7, #22]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d122      	bne.n	8006370 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d117      	bne.n	8006366 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006336:	7dba      	ldrb	r2, [r7, #22]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	32ae      	adds	r2, #174	; 0xae
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006346:	7dba      	ldrb	r2, [r7, #22]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800634e:	7dba      	ldrb	r2, [r7, #22]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	32ae      	adds	r2, #174	; 0xae
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	7afa      	ldrb	r2, [r7, #11]
 800635c:	4611      	mov	r1, r2
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	4798      	blx	r3
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	e000      	b.n	8006372 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	460b      	mov	r3, r1
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006388:	7afb      	ldrb	r3, [r7, #11]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d16f      	bne.n	800646e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3314      	adds	r3, #20
 8006392:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800639a:	2b02      	cmp	r3, #2
 800639c:	d15a      	bne.n	8006454 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d914      	bls.n	80063d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	461a      	mov	r2, r3
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f001 f8ac 	bl	800751e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063c6:	2300      	movs	r3, #0
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f001 ff45 	bl	800825c <USBD_LL_PrepareReceive>
 80063d2:	e03f      	b.n	8006454 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d11c      	bne.n	800641a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d316      	bcc.n	800641a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d20f      	bcs.n	800641a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063fa:	2200      	movs	r2, #0
 80063fc:	2100      	movs	r1, #0
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f001 f88d 	bl	800751e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800640c:	2300      	movs	r3, #0
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 ff22 	bl	800825c <USBD_LL_PrepareReceive>
 8006418:	e01c      	b.n	8006454 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b03      	cmp	r3, #3
 8006424:	d10f      	bne.n	8006446 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f001 fe5d 	bl	8008108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f001 f8b7 	bl	80075c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03a      	beq.n	80064d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fe42 	bl	80060e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800646c:	e032      	b.n	80064d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006474:	b2db      	uxtb	r3, r3
 8006476:	4619      	mov	r1, r3
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f97f 	bl	800677c <USBD_CoreFindEP>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2bff      	cmp	r3, #255	; 0xff
 8006486:	d025      	beq.n	80064d4 <USBD_LL_DataInStage+0x15a>
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d122      	bne.n	80064d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d11c      	bne.n	80064d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800649a:	7dfa      	ldrb	r2, [r7, #23]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	32ae      	adds	r2, #174	; 0xae
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064aa:	7dfa      	ldrb	r2, [r7, #23]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064b2:	7dfa      	ldrb	r2, [r7, #23]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	32ae      	adds	r2, #174	; 0xae
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	7afa      	ldrb	r2, [r7, #11]
 80064c0:	4611      	mov	r1, r2
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80064ca:	7dbb      	ldrb	r3, [r7, #22]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80064d0:	7dbb      	ldrb	r3, [r7, #22]
 80064d2:	e000      	b.n	80064d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d014      	beq.n	8006544 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6852      	ldr	r2, [r2, #4]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	4611      	mov	r1, r2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fd97 	bl	800807e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	2200      	movs	r2, #0
 8006564:	2180      	movs	r1, #128	; 0x80
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fd89 	bl	800807e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2240      	movs	r2, #64	; 0x40
 8006576:	621a      	str	r2, [r3, #32]

  return ret;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d106      	bne.n	80065f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b03      	cmp	r3, #3
 8006610:	d110      	bne.n	8006634 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	32ae      	adds	r2, #174	; 0xae
 8006654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e01c      	b.n	800669a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d115      	bne.n	8006698 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32ae      	adds	r2, #174	; 0xae
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32ae      	adds	r2, #174	; 0xae
 800668a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	4611      	mov	r1, r2
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	32ae      	adds	r2, #174	; 0xae
 80066b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e01c      	b.n	80066fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d115      	bne.n	80066fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	32ae      	adds	r2, #174	; 0xae
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	; 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	78fa      	ldrb	r2, [r7, #3]
 80066f6:	4611      	mov	r1, r2
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6852      	ldr	r2, [r2, #4]
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	4611      	mov	r1, r2
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800676e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006788:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	885b      	ldrh	r3, [r3, #2]
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d920      	bls.n	8006800 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80067c6:	e013      	b.n	80067f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80067c8:	f107 030a 	add.w	r3, r7, #10
 80067cc:	4619      	mov	r1, r3
 80067ce:	6978      	ldr	r0, [r7, #20]
 80067d0:	f000 f81b 	bl	800680a <USBD_GetNextDesc>
 80067d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d108      	bne.n	80067f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d008      	beq.n	80067fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	885b      	ldrh	r3, [r3, #2]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d8e5      	bhi.n	80067c8 <USBD_GetEpDesc+0x32>
 80067fc:	e000      	b.n	8006800 <USBD_GetEpDesc+0x6a>
          break;
 80067fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006800:	693b      	ldr	r3, [r7, #16]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	881a      	ldrh	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	4413      	add	r3, r2
 8006824:	b29a      	uxth	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006836:	68fb      	ldr	r3, [r7, #12]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3301      	adds	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006862:	8a3b      	ldrh	r3, [r7, #16]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	b21a      	sxth	r2, r3
 8006868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800686c:	4313      	orrs	r3, r2
 800686e:	b21b      	sxth	r3, r3
 8006870:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006872:	89fb      	ldrh	r3, [r7, #14]
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d005      	beq.n	80068a6 <USBD_StdDevReq+0x26>
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d857      	bhi.n	800694e <USBD_StdDevReq+0xce>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00f      	beq.n	80068c2 <USBD_StdDevReq+0x42>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d153      	bne.n	800694e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32ae      	adds	r2, #174	; 0xae
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	e04a      	b.n	8006958 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b09      	cmp	r3, #9
 80068c8:	d83b      	bhi.n	8006942 <USBD_StdDevReq+0xc2>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <USBD_StdDevReq+0x50>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006925 	.word	0x08006925
 80068d4:	08006939 	.word	0x08006939
 80068d8:	08006943 	.word	0x08006943
 80068dc:	0800692f 	.word	0x0800692f
 80068e0:	08006943 	.word	0x08006943
 80068e4:	08006903 	.word	0x08006903
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006943 	.word	0x08006943
 80068f0:	0800691b 	.word	0x0800691b
 80068f4:	0800690d 	.word	0x0800690d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa3c 	bl	8006d78 <USBD_GetDescriptor>
          break;
 8006900:	e024      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fba1 	bl	800704c <USBD_SetAddress>
          break;
 800690a:	e01f      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fbe0 	bl	80070d4 <USBD_SetConfig>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]
          break;
 8006918:	e018      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc83 	bl	8007228 <USBD_GetConfig>
          break;
 8006922:	e013      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcb4 	bl	8007294 <USBD_GetStatus>
          break;
 800692c:	e00e      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fce3 	bl	80072fc <USBD_SetFeature>
          break;
 8006936:	e009      	b.n	800694c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fd07 	bl	800734e <USBD_ClrFeature>
          break;
 8006940:	e004      	b.n	800694c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fd5e 	bl	8007406 <USBD_CtlError>
          break;
 800694a:	bf00      	nop
      }
      break;
 800694c:	e004      	b.n	8006958 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fd58 	bl	8007406 <USBD_CtlError>
      break;
 8006956:	bf00      	nop
  }

  return ret;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop

08006964 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d005      	beq.n	800698a <USBD_StdItfReq+0x26>
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d852      	bhi.n	8006a28 <USBD_StdItfReq+0xc4>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <USBD_StdItfReq+0x26>
 8006986:	2b20      	cmp	r3, #32
 8006988:	d14e      	bne.n	8006a28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	2b02      	cmp	r3, #2
 8006996:	d840      	bhi.n	8006a1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	889b      	ldrh	r3, [r3, #4]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d836      	bhi.n	8006a10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	889b      	ldrh	r3, [r3, #4]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fed9 	bl	8006762 <USBD_CoreFindIF>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2bff      	cmp	r3, #255	; 0xff
 80069b8:	d01d      	beq.n	80069f6 <USBD_StdItfReq+0x92>
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11a      	bne.n	80069f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80069c0:	7bba      	ldrb	r2, [r7, #14]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32ae      	adds	r2, #174	; 0xae
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00f      	beq.n	80069f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069d0:	7bba      	ldrb	r2, [r7, #14]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069d8:	7bba      	ldrb	r2, [r7, #14]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	32ae      	adds	r2, #174	; 0xae
 80069de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069ee:	e004      	b.n	80069fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069f4:	e001      	b.n	80069fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	88db      	ldrh	r3, [r3, #6]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <USBD_StdItfReq+0xc0>
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10d      	bne.n	8006a24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fdc7 	bl	800759c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a0e:	e009      	b.n	8006a24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fcf7 	bl	8007406 <USBD_CtlError>
          break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcf2 	bl	8007406 <USBD_CtlError>
          break;
 8006a22:	e000      	b.n	8006a26 <USBD_StdItfReq+0xc2>
          break;
 8006a24:	bf00      	nop
      }
      break;
 8006a26:	e004      	b.n	8006a32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fceb 	bl	8007406 <USBD_CtlError>
      break;
 8006a30:	bf00      	nop
  }

  return ret;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	889b      	ldrh	r3, [r3, #4]
 8006a4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d007      	beq.n	8006a6c <USBD_StdEPReq+0x30>
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	f200 817f 	bhi.w	8006d60 <USBD_StdEPReq+0x324>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d02a      	beq.n	8006abc <USBD_StdEPReq+0x80>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	f040 817a 	bne.w	8006d60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fe83 	bl	800677c <USBD_CoreFindEP>
 8006a76:	4603      	mov	r3, r0
 8006a78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a7a:	7b7b      	ldrb	r3, [r7, #13]
 8006a7c:	2bff      	cmp	r3, #255	; 0xff
 8006a7e:	f000 8174 	beq.w	8006d6a <USBD_StdEPReq+0x32e>
 8006a82:	7b7b      	ldrb	r3, [r7, #13]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 8170 	bne.w	8006d6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a8a:	7b7a      	ldrb	r2, [r7, #13]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a92:	7b7a      	ldrb	r2, [r7, #13]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	32ae      	adds	r2, #174	; 0xae
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8163 	beq.w	8006d6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006aa4:	7b7a      	ldrb	r2, [r7, #13]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32ae      	adds	r2, #174	; 0xae
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aba:	e156      	b.n	8006d6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d008      	beq.n	8006ad6 <USBD_StdEPReq+0x9a>
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	f300 8145 	bgt.w	8006d54 <USBD_StdEPReq+0x318>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 809b 	beq.w	8006c06 <USBD_StdEPReq+0x1ca>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d03c      	beq.n	8006b4e <USBD_StdEPReq+0x112>
 8006ad4:	e13e      	b.n	8006d54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d002      	beq.n	8006ae8 <USBD_StdEPReq+0xac>
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d016      	beq.n	8006b14 <USBD_StdEPReq+0xd8>
 8006ae6:	e02c      	b.n	8006b42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00d      	beq.n	8006b0a <USBD_StdEPReq+0xce>
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d00a      	beq.n	8006b0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fb05 	bl	8008108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006afe:	2180      	movs	r1, #128	; 0x80
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fb01 	bl	8008108 <USBD_LL_StallEP>
 8006b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b08:	e020      	b.n	8006b4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc7a 	bl	8007406 <USBD_CtlError>
              break;
 8006b12:	e01b      	b.n	8006b4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	885b      	ldrh	r3, [r3, #2]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10e      	bne.n	8006b3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <USBD_StdEPReq+0xfe>
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b80      	cmp	r3, #128	; 0x80
 8006b26:	d008      	beq.n	8006b3a <USBD_StdEPReq+0xfe>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fae7 	bl	8008108 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fd2e 	bl	800759c <USBD_CtlSendStatus>

              break;
 8006b40:	e004      	b.n	8006b4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fc5e 	bl	8007406 <USBD_CtlError>
              break;
 8006b4a:	bf00      	nop
          }
          break;
 8006b4c:	e107      	b.n	8006d5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d002      	beq.n	8006b60 <USBD_StdEPReq+0x124>
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d016      	beq.n	8006b8c <USBD_StdEPReq+0x150>
 8006b5e:	e04b      	b.n	8006bf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <USBD_StdEPReq+0x146>
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b80      	cmp	r3, #128	; 0x80
 8006b6a:	d00a      	beq.n	8006b82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 fac9 	bl	8008108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fac5 	bl	8008108 <USBD_LL_StallEP>
 8006b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b80:	e040      	b.n	8006c04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc3e 	bl	8007406 <USBD_CtlError>
              break;
 8006b8a:	e03b      	b.n	8006c04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d136      	bne.n	8006c02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 facf 	bl	8008146 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fcf7 	bl	800759c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fde2 	bl	800677c <USBD_CoreFindEP>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bbc:	7b7b      	ldrb	r3, [r7, #13]
 8006bbe:	2bff      	cmp	r3, #255	; 0xff
 8006bc0:	d01f      	beq.n	8006c02 <USBD_StdEPReq+0x1c6>
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11c      	bne.n	8006c02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006bc8:	7b7a      	ldrb	r2, [r7, #13]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006bd0:	7b7a      	ldrb	r2, [r7, #13]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d010      	beq.n	8006c02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006be0:	7b7a      	ldrb	r2, [r7, #13]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32ae      	adds	r2, #174	; 0xae
 8006be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bf6:	e004      	b.n	8006c02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fc03 	bl	8007406 <USBD_CtlError>
              break;
 8006c00:	e000      	b.n	8006c04 <USBD_StdEPReq+0x1c8>
              break;
 8006c02:	bf00      	nop
          }
          break;
 8006c04:	e0ab      	b.n	8006d5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d002      	beq.n	8006c18 <USBD_StdEPReq+0x1dc>
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d032      	beq.n	8006c7c <USBD_StdEPReq+0x240>
 8006c16:	e097      	b.n	8006d48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <USBD_StdEPReq+0x1f2>
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d004      	beq.n	8006c2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fbed 	bl	8007406 <USBD_CtlError>
                break;
 8006c2c:	e091      	b.n	8006d52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da0b      	bge.n	8006c4e <USBD_StdEPReq+0x212>
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	3310      	adds	r3, #16
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	e00b      	b.n	8006c66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2202      	movs	r2, #2
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fc37 	bl	80074e8 <USBD_CtlSendData>
              break;
 8006c7a:	e06a      	b.n	8006d52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da11      	bge.n	8006ca8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d117      	bne.n	8006cce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fbb0 	bl	8007406 <USBD_CtlError>
                  break;
 8006ca6:	e054      	b.n	8006d52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	f003 020f 	and.w	r2, r3, #15
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fb9d 	bl	8007406 <USBD_CtlError>
                  break;
 8006ccc:	e041      	b.n	8006d52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da0b      	bge.n	8006cee <USBD_StdEPReq+0x2b2>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	3310      	adds	r3, #16
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3304      	adds	r3, #4
 8006cec:	e00b      	b.n	8006d06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	3304      	adds	r3, #4
 8006d06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <USBD_StdEPReq+0x2d8>
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b80      	cmp	r3, #128	; 0x80
 8006d12:	d103      	bne.n	8006d1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e00e      	b.n	8006d3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fa2f 	bl	8008184 <USBD_LL_IsStallEP>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fbd1 	bl	80074e8 <USBD_CtlSendData>
              break;
 8006d46:	e004      	b.n	8006d52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb5b 	bl	8007406 <USBD_CtlError>
              break;
 8006d50:	bf00      	nop
          }
          break;
 8006d52:	e004      	b.n	8006d5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fb55 	bl	8007406 <USBD_CtlError>
          break;
 8006d5c:	bf00      	nop
      }
      break;
 8006d5e:	e005      	b.n	8006d6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fb4f 	bl	8007406 <USBD_CtlError>
      break;
 8006d68:	e000      	b.n	8006d6c <USBD_StdEPReq+0x330>
      break;
 8006d6a:	bf00      	nop
  }

  return ret;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	2b06      	cmp	r3, #6
 8006d9a:	f200 8128 	bhi.w	8006fee <USBD_GetDescriptor+0x276>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <USBD_GetDescriptor+0x2c>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006dd9 	.word	0x08006dd9
 8006dac:	08006e19 	.word	0x08006e19
 8006db0:	08006fef 	.word	0x08006fef
 8006db4:	08006fef 	.word	0x08006fef
 8006db8:	08006f8f 	.word	0x08006f8f
 8006dbc:	08006fbb 	.word	0x08006fbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
      break;
 8006dd6:	e112      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7c1b      	ldrb	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10d      	bne.n	8006dfc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f107 0208 	add.w	r2, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dfa:	e100      	b.n	8006ffe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e0f2      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	f200 80ac 	bhi.w	8006f7c <USBD_GetDescriptor+0x204>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <USBD_GetDescriptor+0xb4>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e45 	.word	0x08006e45
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006ee1 	.word	0x08006ee1
 8006e3c:	08006f15 	.word	0x08006f15
 8006e40:	08006f49 	.word	0x08006f49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e091      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 facb 	bl	8007406 <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e089      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e077      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fab1 	bl	8007406 <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e06f      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ece:	e05d      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa97 	bl	8007406 <USBD_CtlError>
            err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ede:	e055      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e043      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa7d 	bl	8007406 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e03b      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e029      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa63 	bl	8007406 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e021      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e00f      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa49 	bl	8007406 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e007      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa41 	bl	8007406 <USBD_CtlError>
          err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f8a:	bf00      	nop
      }
      break;
 8006f8c:	e037      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7c1b      	ldrb	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9e:	f107 0208 	add.w	r2, r7, #8
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4798      	blx	r3
 8006fa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa8:	e029      	b.n	8006ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa2a 	bl	8007406 <USBD_CtlError>
        err++;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb8:	e021      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7c1b      	ldrb	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f107 0208 	add.w	r2, r7, #8
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
 8006fd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	2207      	movs	r2, #7
 8006fda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fdc:	e00f      	b.n	8006ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa10 	bl	8007406 <USBD_CtlError>
        err++;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	72fb      	strb	r3, [r7, #11]
      break;
 8006fec:	e007      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa08 	bl	8007406 <USBD_CtlError>
      err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	bf00      	nop
  }

  if (err != 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11e      	bne.n	8007042 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800700c:	893b      	ldrh	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88da      	ldrh	r2, [r3, #6]
 8007016:	893b      	ldrh	r3, [r7, #8]
 8007018:	4293      	cmp	r3, r2
 800701a:	bf28      	it	cs
 800701c:	4613      	movcs	r3, r2
 800701e:	b29b      	uxth	r3, r3
 8007020:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	461a      	mov	r2, r3
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa5d 	bl	80074e8 <USBD_CtlSendData>
 800702e:	e009      	b.n	8007044 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9e7 	bl	8007406 <USBD_CtlError>
 8007038:	e004      	b.n	8007044 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 faae 	bl	800759c <USBD_CtlSendStatus>
 8007040:	e000      	b.n	8007044 <USBD_GetDescriptor+0x2cc>
    return;
 8007042:	bf00      	nop
  }
}
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	889b      	ldrh	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d131      	bne.n	80070c2 <USBD_SetAddress+0x76>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	88db      	ldrh	r3, [r3, #6]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d12d      	bne.n	80070c2 <USBD_SetAddress+0x76>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	2b7f      	cmp	r3, #127	; 0x7f
 800706c:	d829      	bhi.n	80070c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d104      	bne.n	8007090 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9bc 	bl	8007406 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	e01d      	b.n	80070cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f89d 	bl	80081dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa7a 	bl	800759c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b6:	e009      	b.n	80070cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	e004      	b.n	80070cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f99e 	bl	8007406 <USBD_CtlError>
  }
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	4b4e      	ldr	r3, [pc, #312]	; (8007224 <USBD_SetConfig+0x150>)
 80070ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070ec:	4b4d      	ldr	r3, [pc, #308]	; (8007224 <USBD_SetConfig+0x150>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d905      	bls.n	8007100 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f985 	bl	8007406 <USBD_CtlError>
    return USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e08c      	b.n	800721a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d002      	beq.n	8007112 <USBD_SetConfig+0x3e>
 800710c:	2b03      	cmp	r3, #3
 800710e:	d029      	beq.n	8007164 <USBD_SetConfig+0x90>
 8007110:	e075      	b.n	80071fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007112:	4b44      	ldr	r3, [pc, #272]	; (8007224 <USBD_SetConfig+0x150>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d020      	beq.n	800715c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800711a:	4b42      	ldr	r3, [pc, #264]	; (8007224 <USBD_SetConfig+0x150>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007124:	4b3f      	ldr	r3, [pc, #252]	; (8007224 <USBD_SetConfig+0x150>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe ffe7 	bl	80060fe <USBD_SetClassConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f962 	bl	8007406 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800714a:	e065      	b.n	8007218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fa25 	bl	800759c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2203      	movs	r2, #3
 8007156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800715a:	e05d      	b.n	8007218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa1d 	bl	800759c <USBD_CtlSendStatus>
      break;
 8007162:	e059      	b.n	8007218 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007164:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <USBD_SetConfig+0x150>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d112      	bne.n	8007192 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007174:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <USBD_SetConfig+0x150>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <USBD_SetConfig+0x150>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fe ffd6 	bl	8006136 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa06 	bl	800759c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007190:	e042      	b.n	8007218 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <USBD_SetConfig+0x150>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	429a      	cmp	r2, r3
 800719e:	d02a      	beq.n	80071f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fe ffc4 	bl	8006136 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <USBD_SetConfig+0x150>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <USBD_SetConfig+0x150>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fe ff9d 	bl	80060fe <USBD_SetClassConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f918 	bl	8007406 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe ffa9 	bl	8006136 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071ec:	e014      	b.n	8007218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9d4 	bl	800759c <USBD_CtlSendStatus>
      break;
 80071f4:	e010      	b.n	8007218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9d0 	bl	800759c <USBD_CtlSendStatus>
      break;
 80071fc:	e00c      	b.n	8007218 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f900 	bl	8007406 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <USBD_SetConfig+0x150>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fe ff92 	bl	8006136 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	73fb      	strb	r3, [r7, #15]
      break;
 8007216:	bf00      	nop
  }

  return ret;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	2000023c 	.word	0x2000023c

08007228 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d004      	beq.n	8007244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8e2 	bl	8007406 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007242:	e023      	b.n	800728c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	dc02      	bgt.n	8007256 <USBD_GetConfig+0x2e>
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc03      	bgt.n	800725c <USBD_GetConfig+0x34>
 8007254:	e015      	b.n	8007282 <USBD_GetConfig+0x5a>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d00b      	beq.n	8007272 <USBD_GetConfig+0x4a>
 800725a:	e012      	b.n	8007282 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3308      	adds	r3, #8
 8007266:	2201      	movs	r2, #1
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f93c 	bl	80074e8 <USBD_CtlSendData>
        break;
 8007270:	e00c      	b.n	800728c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	2201      	movs	r2, #1
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f934 	bl	80074e8 <USBD_CtlSendData>
        break;
 8007280:	e004      	b.n	800728c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8be 	bl	8007406 <USBD_CtlError>
        break;
 800728a:	bf00      	nop
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d81e      	bhi.n	80072ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	88db      	ldrh	r3, [r3, #6]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d004      	beq.n	80072be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8a5 	bl	8007406 <USBD_CtlError>
        break;
 80072bc:	e01a      	b.n	80072f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f043 0202 	orr.w	r2, r3, #2
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	330c      	adds	r3, #12
 80072de:	2202      	movs	r2, #2
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f900 	bl	80074e8 <USBD_CtlSendData>
      break;
 80072e8:	e004      	b.n	80072f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f88a 	bl	8007406 <USBD_CtlError>
      break;
 80072f2:	bf00      	nop
  }
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f940 	bl	800759c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800731c:	e013      	b.n	8007346 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10b      	bne.n	800733e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	b2da      	uxtb	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f930 	bl	800759c <USBD_CtlSendStatus>
}
 800733c:	e003      	b.n	8007346 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f860 	bl	8007406 <USBD_CtlError>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	2b02      	cmp	r3, #2
 8007364:	d80b      	bhi.n	800737e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d10c      	bne.n	8007388 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f910 	bl	800759c <USBD_CtlSendStatus>
      }
      break;
 800737c:	e004      	b.n	8007388 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f840 	bl	8007406 <USBD_CtlError>
      break;
 8007386:	e000      	b.n	800738a <USBD_ClrFeature+0x3c>
      break;
 8007388:	bf00      	nop
  }
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fa41 	bl	8006844 <SWAPBYTE>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fa34 	bl	8006844 <SWAPBYTE>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff fa27 	bl	8006844 <SWAPBYTE>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	80da      	strh	r2, [r3, #6]
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fe78 	bl	8008108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fe74 	bl	8008108 <USBD_LL_StallEP>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d036      	beq.n	80074ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f000 f836 	bl	80074b4 <USBD_GetLen>
 8007448:	4603      	mov	r3, r0
 800744a:	3301      	adds	r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	4413      	add	r3, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7812      	ldrb	r2, [r2, #0]
 8007460:	701a      	strb	r2, [r3, #0]
  idx++;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	3301      	adds	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	4413      	add	r3, r2
 800746e:	2203      	movs	r2, #3
 8007470:	701a      	strb	r2, [r3, #0]
  idx++;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	3301      	adds	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007478:	e013      	b.n	80074a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4413      	add	r3, r2
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	7812      	ldrb	r2, [r2, #0]
 8007484:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	613b      	str	r3, [r7, #16]
    idx++;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	3301      	adds	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	4413      	add	r3, r2
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
    idx++;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	3301      	adds	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e7      	bne.n	800747a <USBD_GetString+0x52>
 80074aa:	e000      	b.n	80074ae <USBD_GetString+0x86>
    return;
 80074ac:	bf00      	nop
  }
}
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074c4:	e005      	b.n	80074d2 <USBD_GetLen+0x1e>
  {
    len++;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	3301      	adds	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f5      	bne.n	80074c6 <USBD_GetLen+0x12>
  }

  return len;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	2100      	movs	r1, #0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fe83 	bl	800821a <USBD_LL_Transmit>

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fe72 	bl	800821a <USBD_LL_Transmit>

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2203      	movs	r2, #3
 8007550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	2100      	movs	r1, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fe76 	bl	800825c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fe65 	bl	800825c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075ac:	2300      	movs	r3, #0
 80075ae:	2200      	movs	r2, #0
 80075b0:	2100      	movs	r1, #0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fe31 	bl	800821a <USBD_LL_Transmit>

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2205      	movs	r2, #5
 80075ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	2100      	movs	r1, #0
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fe3f 	bl	800825c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <BMX055_Init>:
uint8_t Ascale = BMX055_ACC_RANGE_4G;
uint8_t Mscale = 0;



uint8_t BMX055_Init(I2C_HandleTypeDef *I2Cx){
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;

	/* Read ACC BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
 80075f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	2301      	movs	r3, #1
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f107 030f 	add.w	r3, r7, #15
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2301      	movs	r3, #1
 8007602:	2200      	movs	r2, #0
 8007604:	2130      	movs	r1, #48	; 0x30
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7f9 ff96 	bl	8001538 <HAL_I2C_Mem_Read>

	if(readData != BMX055_ACC_DEVICE){
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2bfa      	cmp	r3, #250	; 0xfa
 8007610:	d001      	beq.n	8007616 <BMX055_Init+0x2e>
		return 0xFF;
 8007612:	23ff      	movs	r3, #255	; 0xff
 8007614:	e0bd      	b.n	8007792 <BMX055_Init+0x1aa>
	}

	/* Wakeup Magnetometer */
	writeData = BMX055_MAG_SLEEP_MODE;
 8007616:	2301      	movs	r3, #1
 8007618:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_POW_CTL_REG, 1, &writeData, 1, 500);
 800761a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800761e:	9302      	str	r3, [sp, #8]
 8007620:	2301      	movs	r3, #1
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f107 030e 	add.w	r3, r7, #14
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2301      	movs	r3, #1
 800762c:	224b      	movs	r2, #75	; 0x4b
 800762e:	2120      	movs	r1, #32
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7f9 fe87 	bl	8001344 <HAL_I2C_Mem_Write>
	/* Read MAG BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_MAG_REG, 1, &readData, 1, 500);
 8007636:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800763a:	9302      	str	r3, [sp, #8]
 800763c:	2301      	movs	r3, #1
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	f107 030f 	add.w	r3, r7, #15
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2301      	movs	r3, #1
 8007648:	2240      	movs	r2, #64	; 0x40
 800764a:	2120      	movs	r1, #32
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7f9 ff73 	bl	8001538 <HAL_I2C_Mem_Read>
	if( readData != BMX055_MAG_DEVICE ){
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b32      	cmp	r3, #50	; 0x32
 8007656:	d001      	beq.n	800765c <BMX055_Init+0x74>
		/* Sleep mode */
		return 0xFE;
 8007658:	23fe      	movs	r3, #254	; 0xfe
 800765a:	e09a      	b.n	8007792 <BMX055_Init+0x1aa>
	}

	/* Read GYRO BMX055 WHOAMI */
	HAL_I2C_Mem_Read(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
 800765c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	2301      	movs	r3, #1
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	f107 030f 	add.w	r3, r7, #15
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	2200      	movs	r2, #0
 8007670:	21d0      	movs	r1, #208	; 0xd0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 ff60 	bl	8001538 <HAL_I2C_Mem_Read>
	if( readData != BMX055_GYRO_DEVICE ){
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d001      	beq.n	8007682 <BMX055_Init+0x9a>
		return 0xFD;
 800767e:	23fd      	movs	r3, #253	; 0xfd
 8007680:	e087      	b.n	8007792 <BMX055_Init+0x1aa>
	}

	/* Accelerometer Soft Reset */
	writeData = BMX055_INITIATED_SOFT_RESET;
 8007682:	23b6      	movs	r3, #182	; 0xb6
 8007684:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_RESET_REG, 1, &writeData, 1, 500);
 8007686:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	2301      	movs	r3, #1
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f107 030e 	add.w	r3, r7, #14
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	2301      	movs	r3, #1
 8007698:	2214      	movs	r2, #20
 800769a:	2130      	movs	r1, #48	; 0x30
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7f9 fe51 	bl	8001344 <HAL_I2C_Mem_Write>
	HAL_Delay(2);	/* Wait 2ms */
 80076a2:	2002      	movs	r0, #2
 80076a4:	f7f9 fa50 	bl	8000b48 <HAL_Delay>

	/* Configure Acceleration range */
	writeData = Ascale;
 80076a8:	4b3c      	ldr	r3, [pc, #240]	; (800779c <BMX055_Init+0x1b4>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_RANGE_REG, 1, &writeData, 1, 500);
 80076ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	2301      	movs	r3, #1
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	f107 030e 	add.w	r3, r7, #14
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	2301      	movs	r3, #1
 80076c0:	220f      	movs	r2, #15
 80076c2:	2130      	movs	r1, #48	; 0x30
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7f9 fe3d 	bl	8001344 <HAL_I2C_Mem_Write>

	/* Select Accel BandWidth */
	writeData = BMX055_ACC_PMU_BW_250;
 80076ca:	230d      	movs	r3, #13
 80076cc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_BW_REG, 1, &writeData, 1, 500);
 80076ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	2301      	movs	r3, #1
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	f107 030e 	add.w	r3, r7, #14
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2301      	movs	r3, #1
 80076e0:	2210      	movs	r2, #16
 80076e2:	2130      	movs	r1, #48	; 0x30
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7f9 fe2d 	bl	8001344 <HAL_I2C_Mem_Write>


	/* LP Mode Sleep mode */
	writeData = BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_2MS;
 80076ea:	230e      	movs	r3, #14
 80076ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_PMU_LPW_REG, 1, &writeData, 1, 500);
 80076ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80076f2:	9302      	str	r3, [sp, #8]
 80076f4:	2301      	movs	r3, #1
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	f107 030e 	add.w	r3, r7, #14
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2301      	movs	r3, #1
 8007700:	2211      	movs	r2, #17
 8007702:	2130      	movs	r1, #48	; 0x30
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7f9 fe1d 	bl	8001344 <HAL_I2C_Mem_Write>


	/* Gyroscope Soft Reset  */
	writeData = BMX055_INITIATED_SOFT_RESET;
 800770a:	23b6      	movs	r3, #182	; 0xb6
 800770c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_RESET_REG, 1, &writeData, 1, 500);
 800770e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	2301      	movs	r3, #1
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	f107 030e 	add.w	r3, r7, #14
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	2301      	movs	r3, #1
 8007720:	2214      	movs	r2, #20
 8007722:	21d0      	movs	r1, #208	; 0xd0
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7f9 fe0d 	bl	8001344 <HAL_I2C_Mem_Write>
	HAL_Delay(2);	/* Wait 2ms */
 800772a:	2002      	movs	r0, #2
 800772c:	f7f9 fa0c 	bl	8000b48 <HAL_Delay>

	/* Select Gyro Range 262.4 LSB/°/s */
	writeData = BMX055_GYRO_RANGE_2000;
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_RANGE_REG, 1, &writeData, 1, 500);
 8007734:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	2301      	movs	r3, #1
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	f107 030e 	add.w	r3, r7, #14
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2301      	movs	r3, #1
 8007746:	220f      	movs	r2, #15
 8007748:	21d0      	movs	r1, #208	; 0xd0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7f9 fdfa 	bl	8001344 <HAL_I2C_Mem_Write>

	/* Select Gyro BandWidth */
	writeData = BMX055_GYRO_BW_23;
 8007750:	2304      	movs	r3, #4
 8007752:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_BW_REG, 1, &writeData, 1, 500);
 8007754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007758:	9302      	str	r3, [sp, #8]
 800775a:	2301      	movs	r3, #1
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	f107 030e 	add.w	r3, r7, #14
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2301      	movs	r3, #1
 8007766:	2210      	movs	r2, #16
 8007768:	21d0      	movs	r1, #208	; 0xd0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7f9 fdea 	bl	8001344 <HAL_I2C_Mem_Write>

	/* Select Gyro LPM (NormalMode, SleepDuration 2ms) */
	writeData = BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_4MS;
 8007770:	2301      	movs	r3, #1
 8007772:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_LPM1_REG, 1, &writeData, 1, 500);
 8007774:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007778:	9302      	str	r3, [sp, #8]
 800777a:	2301      	movs	r3, #1
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f107 030e 	add.w	r3, r7, #14
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2301      	movs	r3, #1
 8007786:	2211      	movs	r2, #17
 8007788:	21d0      	movs	r1, #208	; 0xd0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7f9 fdda 	bl	8001344 <HAL_I2C_Mem_Write>


	//Init Accelerometer


	return 0;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200000fa 	.word	0x200000fa

080077a0 <readAccelData>:

void readAccelData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af04      	add	r7, sp, #16
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	/* XYZ Data Register Stored Here */
	uint8_t rawData[6];

	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_ACC_DATA_START_REG, 1, rawData, 6, 500);
 80077aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	2306      	movs	r3, #6
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	2301      	movs	r3, #1
 80077bc:	2202      	movs	r2, #2
 80077be:	2130      	movs	r1, #48	; 0x30
 80077c0:	6838      	ldr	r0, [r7, #0]
 80077c2:	f7f9 feb9 	bl	8001538 <HAL_I2C_Mem_Read>

	if((rawData[0] & 0x01) && (rawData[2] & 0x01) && (rawData[4] & 0x01)) {  // Check that all 3 axes have new data
 80077c6:	7a3b      	ldrb	r3, [r7, #8]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02c      	beq.n	800782a <readAccelData+0x8a>
 80077d0:	7abb      	ldrb	r3, [r7, #10]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d027      	beq.n	800782a <readAccelData+0x8a>
 80077da:	7b3b      	ldrb	r3, [r7, #12]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d022      	beq.n	800782a <readAccelData+0x8a>
	  destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 4;  // Turn the MSB and LSB into a signed 12-bit value
 80077e4:	7a7b      	ldrb	r3, [r7, #9]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b21a      	sxth	r2, r3
 80077ea:	7a3b      	ldrb	r3, [r7, #8]
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b21b      	sxth	r3, r3
 80077f2:	111b      	asrs	r3, r3, #4
 80077f4:	b21a      	sxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	801a      	strh	r2, [r3, #0]
	  destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 4;
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b21a      	sxth	r2, r3
 8007800:	7abb      	ldrb	r3, [r7, #10]
 8007802:	b21b      	sxth	r3, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	b21a      	sxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3302      	adds	r3, #2
 800780c:	1112      	asrs	r2, r2, #4
 800780e:	b212      	sxth	r2, r2
 8007810:	801a      	strh	r2, [r3, #0]
	  destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 4;
 8007812:	7b7b      	ldrb	r3, [r7, #13]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b21a      	sxth	r2, r3
 8007818:	7b3b      	ldrb	r3, [r7, #12]
 800781a:	b21b      	sxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b21a      	sxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	1112      	asrs	r2, r2, #4
 8007826:	b212      	sxth	r2, r2
 8007828:	801a      	strh	r2, [r3, #0]
	  }

}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <readGyroData>:

void readGyroData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 8007832:	b580      	push	{r7, lr}
 8007834:	b088      	sub	sp, #32
 8007836:	af04      	add	r7, sp, #16
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(I2Cx, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_GYRO_DATA_START_REG, 1, rawData, 6, 500);
 800783c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007840:	9302      	str	r3, [sp, #8]
 8007842:	2306      	movs	r3, #6
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	2301      	movs	r3, #1
 800784e:	2202      	movs	r2, #2
 8007850:	21d0      	movs	r1, #208	; 0xd0
 8007852:	6838      	ldr	r0, [r7, #0]
 8007854:	f7f9 fe70 	bl	8001538 <HAL_I2C_Mem_Read>

	if((rawData[0] & 0x01) && (rawData[2] & 0x01) && (rawData[4] & 0x01)) {  // Check that all 3 axes have new data
 8007858:	7a3b      	ldrb	r3, [r7, #8]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d026      	beq.n	80078b0 <readGyroData+0x7e>
 8007862:	7abb      	ldrb	r3, [r7, #10]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d021      	beq.n	80078b0 <readGyroData+0x7e>
 800786c:	7b3b      	ldrb	r3, [r7, #12]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01c      	beq.n	80078b0 <readGyroData+0x7e>

		destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);   // Turn the MSB and LSB into a signed 16-bit value
 8007876:	7a7b      	ldrb	r3, [r7, #9]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	b21a      	sxth	r2, r3
 800787c:	7a3b      	ldrb	r3, [r7, #8]
 800787e:	b21b      	sxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b21a      	sxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	801a      	strh	r2, [r3, #0]
		destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]);
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	b219      	sxth	r1, r3
 800788e:	7abb      	ldrb	r3, [r7, #10]
 8007890:	b21a      	sxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3302      	adds	r3, #2
 8007896:	430a      	orrs	r2, r1
 8007898:	b212      	sxth	r2, r2
 800789a:	801a      	strh	r2, [r3, #0]
		destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]);
 800789c:	7b7b      	ldrb	r3, [r7, #13]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	b219      	sxth	r1, r3
 80078a2:	7b3b      	ldrb	r3, [r7, #12]
 80078a4:	b21a      	sxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	430a      	orrs	r2, r1
 80078ac:	b212      	sxth	r2, r2
 80078ae:	801a      	strh	r2, [r3, #0]
	}
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <readMagData>:

void readMagData(int16_t *destination, I2C_HandleTypeDef *I2Cx){
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af04      	add	r7, sp, #16
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
//	int16_t mdata_x = 0, mdata_y = 0, mdata_z = 0, temp = 0;
//	uint16_t data_r = 0;
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(I2Cx, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_MAG_DATA_START_REG, 1, rawData, 6, 2000);  // Read the eight raw data registers sequentially into data array
 80078c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	2306      	movs	r3, #6
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	f107 0308 	add.w	r3, r7, #8
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2301      	movs	r3, #1
 80078d4:	2242      	movs	r2, #66	; 0x42
 80078d6:	2120      	movs	r1, #32
 80078d8:	6838      	ldr	r0, [r7, #0]
 80078da:	f7f9 fe2d 	bl	8001538 <HAL_I2C_Mem_Read>

//	if(rawData[6] & 0x01) { // Check if data ready status bit is set
		destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 3;  // 13-bit signed integer for x-axis field
 80078de:	7a7b      	ldrb	r3, [r7, #9]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	b21a      	sxth	r2, r3
 80078e4:	7a3b      	ldrb	r3, [r7, #8]
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	10db      	asrs	r3, r3, #3
 80078ee:	b21a      	sxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	801a      	strh	r2, [r3, #0]
		destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 3;  // 13-bit signed integer for y-axis field
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	b21a      	sxth	r2, r3
 80078fa:	7abb      	ldrb	r3, [r7, #10]
 80078fc:	b21b      	sxth	r3, r3
 80078fe:	4313      	orrs	r3, r2
 8007900:	b21a      	sxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3302      	adds	r3, #2
 8007906:	10d2      	asrs	r2, r2, #3
 8007908:	b212      	sxth	r2, r2
 800790a:	801a      	strh	r2, [r3, #0]
		destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 1;  // 15-bit signed integer for z-axis field
 800790c:	7b7b      	ldrb	r3, [r7, #13]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	b21a      	sxth	r2, r3
 8007912:	7b3b      	ldrb	r3, [r7, #12]
 8007914:	b21b      	sxth	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	b21a      	sxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	1052      	asrs	r2, r2, #1
 8007920:	b212      	sxth	r2, r2
 8007922:	801a      	strh	r2, [r3, #0]
//	magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
//	((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));

//	}

}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007930:	2200      	movs	r2, #0
 8007932:	4912      	ldr	r1, [pc, #72]	; (800797c <MX_USB_DEVICE_Init+0x50>)
 8007934:	4812      	ldr	r0, [pc, #72]	; (8007980 <MX_USB_DEVICE_Init+0x54>)
 8007936:	f7fe fb65 	bl	8006004 <USBD_Init>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007940:	f7f8 ff74 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007944:	490f      	ldr	r1, [pc, #60]	; (8007984 <MX_USB_DEVICE_Init+0x58>)
 8007946:	480e      	ldr	r0, [pc, #56]	; (8007980 <MX_USB_DEVICE_Init+0x54>)
 8007948:	f7fe fb8c 	bl	8006064 <USBD_RegisterClass>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007952:	f7f8 ff6b 	bl	800082c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007956:	490c      	ldr	r1, [pc, #48]	; (8007988 <MX_USB_DEVICE_Init+0x5c>)
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <MX_USB_DEVICE_Init+0x54>)
 800795a:	f7fe fa7d 	bl	8005e58 <USBD_CDC_RegisterInterface>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007964:	f7f8 ff62 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007968:	4805      	ldr	r0, [pc, #20]	; (8007980 <MX_USB_DEVICE_Init+0x54>)
 800796a:	f7fe fbb1 	bl	80060d0 <USBD_Start>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007974:	f7f8 ff5a 	bl	800082c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007978:	bf00      	nop
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000110 	.word	0x20000110
 8007980:	20000240 	.word	0x20000240
 8007984:	2000007c 	.word	0x2000007c
 8007988:	200000fc 	.word	0x200000fc

0800798c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007990:	2200      	movs	r2, #0
 8007992:	4905      	ldr	r1, [pc, #20]	; (80079a8 <CDC_Init_FS+0x1c>)
 8007994:	4805      	ldr	r0, [pc, #20]	; (80079ac <CDC_Init_FS+0x20>)
 8007996:	f7fe fa79 	bl	8005e8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800799a:	4905      	ldr	r1, [pc, #20]	; (80079b0 <CDC_Init_FS+0x24>)
 800799c:	4803      	ldr	r0, [pc, #12]	; (80079ac <CDC_Init_FS+0x20>)
 800799e:	f7fe fa97 	bl	8005ed0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000d1c 	.word	0x20000d1c
 80079ac:	20000240 	.word	0x20000240
 80079b0:	2000051c 	.word	0x2000051c

080079b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b23      	cmp	r3, #35	; 0x23
 80079d8:	d84a      	bhi.n	8007a70 <CDC_Control_FS+0xac>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <CDC_Control_FS+0x1c>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a71 	.word	0x08007a71
 80079e4:	08007a71 	.word	0x08007a71
 80079e8:	08007a71 	.word	0x08007a71
 80079ec:	08007a71 	.word	0x08007a71
 80079f0:	08007a71 	.word	0x08007a71
 80079f4:	08007a71 	.word	0x08007a71
 80079f8:	08007a71 	.word	0x08007a71
 80079fc:	08007a71 	.word	0x08007a71
 8007a00:	08007a71 	.word	0x08007a71
 8007a04:	08007a71 	.word	0x08007a71
 8007a08:	08007a71 	.word	0x08007a71
 8007a0c:	08007a71 	.word	0x08007a71
 8007a10:	08007a71 	.word	0x08007a71
 8007a14:	08007a71 	.word	0x08007a71
 8007a18:	08007a71 	.word	0x08007a71
 8007a1c:	08007a71 	.word	0x08007a71
 8007a20:	08007a71 	.word	0x08007a71
 8007a24:	08007a71 	.word	0x08007a71
 8007a28:	08007a71 	.word	0x08007a71
 8007a2c:	08007a71 	.word	0x08007a71
 8007a30:	08007a71 	.word	0x08007a71
 8007a34:	08007a71 	.word	0x08007a71
 8007a38:	08007a71 	.word	0x08007a71
 8007a3c:	08007a71 	.word	0x08007a71
 8007a40:	08007a71 	.word	0x08007a71
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a71 	.word	0x08007a71
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a71 	.word	0x08007a71
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007a71 	.word	0x08007a71
 8007a68:	08007a71 	.word	0x08007a71
 8007a6c:	08007a71 	.word	0x08007a71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a70:	bf00      	nop
  }

  return (USBD_OK);
 8007a72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <CDC_Receive_FS+0x24>)
 8007a8e:	f7fe fa1f 	bl	8005ed0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a92:	4804      	ldr	r0, [pc, #16]	; (8007aa4 <CDC_Receive_FS+0x24>)
 8007a94:	f7fe fa80 	bl	8005f98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000240 	.word	0x20000240

08007aa8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <CDC_Transmit_FS+0x48>)
 8007aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e00b      	b.n	8007ae6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4806      	ldr	r0, [pc, #24]	; (8007af0 <CDC_Transmit_FS+0x48>)
 8007ad6:	f7fe f9d9 	bl	8005e8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <CDC_Transmit_FS+0x48>)
 8007adc:	f7fe fa16 	bl	8005f0c <USBD_CDC_TransmitPacket>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000240 	.word	0x20000240

08007af4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2212      	movs	r2, #18
 8007b28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b2a:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	2000012c 	.word	0x2000012c

08007b3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b4e:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000140 	.word	0x20000140

08007b60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4907      	ldr	r1, [pc, #28]	; (8007b94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b76:	4808      	ldr	r0, [pc, #32]	; (8007b98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b78:	f7ff fc56 	bl	8007428 <USBD_GetString>
 8007b7c:	e004      	b.n	8007b88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4904      	ldr	r1, [pc, #16]	; (8007b94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b82:	4805      	ldr	r0, [pc, #20]	; (8007b98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b84:	f7ff fc50 	bl	8007428 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b88:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000151c 	.word	0x2000151c
 8007b98:	08008cd4 	.word	0x08008cd4

08007b9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	4904      	ldr	r1, [pc, #16]	; (8007bbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bac:	4804      	ldr	r0, [pc, #16]	; (8007bc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bae:	f7ff fc3b 	bl	8007428 <USBD_GetString>
  return USBD_StrDesc;
 8007bb2:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2000151c 	.word	0x2000151c
 8007bc0:	08008cec 	.word	0x08008cec

08007bc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	221a      	movs	r2, #26
 8007bd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bd6:	f000 f843 	bl	8007c60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bda:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000144 	.word	0x20000144

08007be8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4907      	ldr	r1, [pc, #28]	; (8007c1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bfe:	4808      	ldr	r0, [pc, #32]	; (8007c20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c00:	f7ff fc12 	bl	8007428 <USBD_GetString>
 8007c04:	e004      	b.n	8007c10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c0c:	f7ff fc0c 	bl	8007428 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	2000151c 	.word	0x2000151c
 8007c20:	08008d00 	.word	0x08008d00

08007c24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d105      	bne.n	8007c42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4907      	ldr	r1, [pc, #28]	; (8007c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c3a:	4808      	ldr	r0, [pc, #32]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c3c:	f7ff fbf4 	bl	8007428 <USBD_GetString>
 8007c40:	e004      	b.n	8007c4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4904      	ldr	r1, [pc, #16]	; (8007c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c46:	4805      	ldr	r0, [pc, #20]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c48:	f7ff fbee 	bl	8007428 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	2000151c 	.word	0x2000151c
 8007c5c:	08008d0c 	.word	0x08008d0c

08007c60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <Get_SerialNum+0x44>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <Get_SerialNum+0x48>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c72:	4b0e      	ldr	r3, [pc, #56]	; (8007cac <Get_SerialNum+0x4c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c86:	2208      	movs	r2, #8
 8007c88:	4909      	ldr	r1, [pc, #36]	; (8007cb0 <Get_SerialNum+0x50>)
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f814 	bl	8007cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c90:	2204      	movs	r2, #4
 8007c92:	4908      	ldr	r1, [pc, #32]	; (8007cb4 <Get_SerialNum+0x54>)
 8007c94:	68b8      	ldr	r0, [r7, #8]
 8007c96:	f000 f80f 	bl	8007cb8 <IntToUnicode>
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	1fff7a10 	.word	0x1fff7a10
 8007ca8:	1fff7a14 	.word	0x1fff7a14
 8007cac:	1fff7a18 	.word	0x1fff7a18
 8007cb0:	20000146 	.word	0x20000146
 8007cb4:	20000156 	.word	0x20000156

08007cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]
 8007cce:	e027      	b.n	8007d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d80b      	bhi.n	8007cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0f1b      	lsrs	r3, r3, #28
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3230      	adds	r2, #48	; 0x30
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e00a      	b.n	8007d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	0f1b      	lsrs	r3, r3, #28
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	440b      	add	r3, r1
 8007d00:	3237      	adds	r2, #55	; 0x37
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	3301      	adds	r3, #1
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
 8007d20:	7dfa      	ldrb	r2, [r7, #23]
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3d3      	bcc.n	8007cd0 <IntToUnicode+0x18>
  }
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
	...

08007d38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d40:	f107 0314 	add.w	r3, r7, #20
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	605a      	str	r2, [r3, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d58:	d13a      	bne.n	8007dd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	4a1d      	ldr	r2, [pc, #116]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d84:	2303      	movs	r3, #3
 8007d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d88:	230a      	movs	r3, #10
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d8c:	f107 0314 	add.w	r3, r7, #20
 8007d90:	4619      	mov	r1, r3
 8007d92:	4812      	ldr	r0, [pc, #72]	; (8007ddc <HAL_PCD_MspInit+0xa4>)
 8007d94:	f7f9 f80e 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d98:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	4a0e      	ldr	r2, [pc, #56]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da2:	6353      	str	r3, [r2, #52]	; 0x34
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dac:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db2:	6453      	str	r3, [r2, #68]	; 0x44
 8007db4:	4b08      	ldr	r3, [pc, #32]	; (8007dd8 <HAL_PCD_MspInit+0xa0>)
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	2043      	movs	r0, #67	; 0x43
 8007dc6:	f7f8 ffbe 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dca:	2043      	movs	r0, #67	; 0x43
 8007dcc:	f7f8 ffd7 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	3728      	adds	r7, #40	; 0x28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	40020000 	.word	0x40020000

08007de0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fe f9b7 	bl	800616a <USBD_LL_SetupStage>
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7fe f9f1 	bl	8006214 <USBD_LL_DataOutStage>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	334c      	adds	r3, #76	; 0x4c
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7fe fa8a 	bl	800637a <USBD_LL_DataInStage>
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe fbbe 	bl	80065fe <USBD_LL_SOF>
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e92:	2301      	movs	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d001      	beq.n	8007ea2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e9e:	f7f8 fcc5 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ea8:	7bfa      	ldrb	r2, [r7, #15]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fb68 	bl	8006582 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe fb10 	bl	80064de <USBD_LL_Reset>
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fb63 	bl	80065a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <HAL_PCD_SuspendCallback+0x48>)
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	4a03      	ldr	r2, [pc, #12]	; (8007f10 <HAL_PCD_SuspendCallback+0x48>)
 8007f02:	f043 0306 	orr.w	r3, r3, #6
 8007f06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	e000ed00 	.word	0xe000ed00

08007f14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fb53 	bl	80065ce <USBD_LL_Resume>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fbab 	bl	80066a2 <USBD_LL_IsoOUTIncomplete>
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fb67 	bl	800663e <USBD_LL_IsoINIncomplete>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fbbd 	bl	8006706 <USBD_LL_DevConnected>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fbba 	bl	800671c <USBD_LL_DevDisconnected>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d13c      	bne.n	800803a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fc0:	4a20      	ldr	r2, [pc, #128]	; (8008044 <USBD_LL_Init+0x94>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <USBD_LL_Init+0x94>)
 8007fcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <USBD_LL_Init+0x94>)
 8007fd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <USBD_LL_Init+0x94>)
 8007fda:	2204      	movs	r2, #4
 8007fdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <USBD_LL_Init+0x94>)
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fe4:	4b17      	ldr	r3, [pc, #92]	; (8008044 <USBD_LL_Init+0x94>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <USBD_LL_Init+0x94>)
 8007fec:	2202      	movs	r2, #2
 8007fee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ff0:	4b14      	ldr	r3, [pc, #80]	; (8008044 <USBD_LL_Init+0x94>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <USBD_LL_Init+0x94>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ffc:	4b11      	ldr	r3, [pc, #68]	; (8008044 <USBD_LL_Init+0x94>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008002:	4b10      	ldr	r3, [pc, #64]	; (8008044 <USBD_LL_Init+0x94>)
 8008004:	2200      	movs	r2, #0
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008008:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <USBD_LL_Init+0x94>)
 800800a:	2200      	movs	r2, #0
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800800e:	480d      	ldr	r0, [pc, #52]	; (8008044 <USBD_LL_Init+0x94>)
 8008010:	f7fa f813 	bl	800203a <HAL_PCD_Init>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800801a:	f7f8 fc07 	bl	800082c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	4808      	ldr	r0, [pc, #32]	; (8008044 <USBD_LL_Init+0x94>)
 8008022:	f7fb fa6a 	bl	80034fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008026:	2240      	movs	r2, #64	; 0x40
 8008028:	2100      	movs	r1, #0
 800802a:	4806      	ldr	r0, [pc, #24]	; (8008044 <USBD_LL_Init+0x94>)
 800802c:	f7fb fa1e 	bl	800346c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	2101      	movs	r1, #1
 8008034:	4803      	ldr	r0, [pc, #12]	; (8008044 <USBD_LL_Init+0x94>)
 8008036:	f7fb fa19 	bl	800346c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	2000171c 	.word	0x2000171c

08008048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800805e:	4618      	mov	r0, r3
 8008060:	f7fa f908 	bl	8002274 <HAL_PCD_Start>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f942 	bl	80082f4 <USBD_Get_USB_Status>
 8008070:	4603      	mov	r3, r0
 8008072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008074:	7bbb      	ldrb	r3, [r7, #14]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	4608      	mov	r0, r1
 8008088:	4611      	mov	r1, r2
 800808a:	461a      	mov	r2, r3
 800808c:	4603      	mov	r3, r0
 800808e:	70fb      	strb	r3, [r7, #3]
 8008090:	460b      	mov	r3, r1
 8008092:	70bb      	strb	r3, [r7, #2]
 8008094:	4613      	mov	r3, r2
 8008096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080a6:	78bb      	ldrb	r3, [r7, #2]
 80080a8:	883a      	ldrh	r2, [r7, #0]
 80080aa:	78f9      	ldrb	r1, [r7, #3]
 80080ac:	f7fa fdd9 	bl	8002c62 <HAL_PCD_EP_Open>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f91c 	bl	80082f4 <USBD_Get_USB_Status>
 80080bc:	4603      	mov	r3, r0
 80080be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fa fe22 	bl	8002d32 <HAL_PCD_EP_Close>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 f8fd 	bl	80082f4 <USBD_Get_USB_Status>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008122:	78fa      	ldrb	r2, [r7, #3]
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f7fa fefa 	bl	8002f20 <HAL_PCD_EP_SetStall>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 f8de 	bl	80082f4 <USBD_Get_USB_Status>
 8008138:	4603      	mov	r3, r0
 800813a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800813c:	7bbb      	ldrb	r3, [r7, #14]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008160:	78fa      	ldrb	r2, [r7, #3]
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fa ff3f 	bl	8002fe8 <HAL_PCD_EP_ClrStall>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f8bf 	bl	80082f4 <USBD_Get_USB_Status>
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800817a:	7bbb      	ldrb	r3, [r7, #14]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008196:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800819c:	2b00      	cmp	r3, #0
 800819e:	da0b      	bge.n	80081b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081a6:	68f9      	ldr	r1, [r7, #12]
 80081a8:	4613      	mov	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	333e      	adds	r3, #62	; 0x3e
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	e00b      	b.n	80081d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80081ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fa fd0c 	bl	8002c18 <HAL_PCD_SetAddress>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f874 	bl	80082f4 <USBD_Get_USB_Status>
 800820c:	4603      	mov	r3, r0
 800820e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008210:	7bbb      	ldrb	r3, [r7, #14]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
 8008226:	460b      	mov	r3, r1
 8008228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008238:	7af9      	ldrb	r1, [r7, #11]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	f7fa fe25 	bl	8002e8c <HAL_PCD_EP_Transmit>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 f853 	bl	80082f4 <USBD_Get_USB_Status>
 800824e:	4603      	mov	r3, r0
 8008250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008252:	7dbb      	ldrb	r3, [r7, #22]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	460b      	mov	r3, r1
 800826a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800827a:	7af9      	ldrb	r1, [r7, #11]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	f7fa fda1 	bl	8002dc6 <HAL_PCD_EP_Receive>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f832 	bl	80082f4 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008294:	7dbb      	ldrb	r3, [r7, #22]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fa fdd1 	bl	8002e5c <HAL_PCD_EP_GetRxCount>
 80082ba:	4603      	mov	r3, r0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082cc:	4b03      	ldr	r3, [pc, #12]	; (80082dc <USBD_static_malloc+0x18>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	20001c28 	.word	0x20001c28

080082e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d817      	bhi.n	8008338 <USBD_Get_USB_Status+0x44>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USBD_Get_USB_Status+0x1c>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008321 	.word	0x08008321
 8008314:	08008327 	.word	0x08008327
 8008318:	0800832d 	.word	0x0800832d
 800831c:	08008333 	.word	0x08008333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e00b      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e008      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	e005      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	73fb      	strb	r3, [r7, #15]
    break;
 8008336:	e002      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	bf00      	nop
  }
  return usb_status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000160 	.word	0x20000160

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f000 fc8e 	bl	8008c8c <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	08008d70 	.word	0x08008d70
 8008394:	08008d70 	.word	0x08008d70
 8008398:	08008d70 	.word	0x08008d70
 800839c:	08008d74 	.word	0x08008d74

080083a0 <memset>:
 80083a0:	4402      	add	r2, r0
 80083a2:	4603      	mov	r3, r0
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d100      	bne.n	80083aa <memset+0xa>
 80083a8:	4770      	bx	lr
 80083aa:	f803 1b01 	strb.w	r1, [r3], #1
 80083ae:	e7f9      	b.n	80083a4 <memset+0x4>

080083b0 <siprintf>:
 80083b0:	b40e      	push	{r1, r2, r3}
 80083b2:	b500      	push	{lr}
 80083b4:	b09c      	sub	sp, #112	; 0x70
 80083b6:	ab1d      	add	r3, sp, #116	; 0x74
 80083b8:	9002      	str	r0, [sp, #8]
 80083ba:	9006      	str	r0, [sp, #24]
 80083bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <siprintf+0x38>)
 80083c2:	9107      	str	r1, [sp, #28]
 80083c4:	9104      	str	r1, [sp, #16]
 80083c6:	4909      	ldr	r1, [pc, #36]	; (80083ec <siprintf+0x3c>)
 80083c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083cc:	9105      	str	r1, [sp, #20]
 80083ce:	6800      	ldr	r0, [r0, #0]
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	a902      	add	r1, sp, #8
 80083d4:	f000 f868 	bl	80084a8 <_svfiprintf_r>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	b01c      	add	sp, #112	; 0x70
 80083e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e4:	b003      	add	sp, #12
 80083e6:	4770      	bx	lr
 80083e8:	20000160 	.word	0x20000160
 80083ec:	ffff0208 	.word	0xffff0208

080083f0 <__ssputs_r>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	688e      	ldr	r6, [r1, #8]
 80083f6:	429e      	cmp	r6, r3
 80083f8:	4682      	mov	sl, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	4690      	mov	r8, r2
 80083fe:	461f      	mov	r7, r3
 8008400:	d838      	bhi.n	8008474 <__ssputs_r+0x84>
 8008402:	898a      	ldrh	r2, [r1, #12]
 8008404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008408:	d032      	beq.n	8008470 <__ssputs_r+0x80>
 800840a:	6825      	ldr	r5, [r4, #0]
 800840c:	6909      	ldr	r1, [r1, #16]
 800840e:	eba5 0901 	sub.w	r9, r5, r1
 8008412:	6965      	ldr	r5, [r4, #20]
 8008414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800841c:	3301      	adds	r3, #1
 800841e:	444b      	add	r3, r9
 8008420:	106d      	asrs	r5, r5, #1
 8008422:	429d      	cmp	r5, r3
 8008424:	bf38      	it	cc
 8008426:	461d      	movcc	r5, r3
 8008428:	0553      	lsls	r3, r2, #21
 800842a:	d531      	bpl.n	8008490 <__ssputs_r+0xa0>
 800842c:	4629      	mov	r1, r5
 800842e:	f000 fb63 	bl	8008af8 <_malloc_r>
 8008432:	4606      	mov	r6, r0
 8008434:	b950      	cbnz	r0, 800844c <__ssputs_r+0x5c>
 8008436:	230c      	movs	r3, #12
 8008438:	f8ca 3000 	str.w	r3, [sl]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844c:	6921      	ldr	r1, [r4, #16]
 800844e:	464a      	mov	r2, r9
 8008450:	f000 fabe 	bl	80089d0 <memcpy>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800845a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	6126      	str	r6, [r4, #16]
 8008462:	6165      	str	r5, [r4, #20]
 8008464:	444e      	add	r6, r9
 8008466:	eba5 0509 	sub.w	r5, r5, r9
 800846a:	6026      	str	r6, [r4, #0]
 800846c:	60a5      	str	r5, [r4, #8]
 800846e:	463e      	mov	r6, r7
 8008470:	42be      	cmp	r6, r7
 8008472:	d900      	bls.n	8008476 <__ssputs_r+0x86>
 8008474:	463e      	mov	r6, r7
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	4632      	mov	r2, r6
 800847a:	4641      	mov	r1, r8
 800847c:	f000 fab6 	bl	80089ec <memmove>
 8008480:	68a3      	ldr	r3, [r4, #8]
 8008482:	1b9b      	subs	r3, r3, r6
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	4433      	add	r3, r6
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	2000      	movs	r0, #0
 800848e:	e7db      	b.n	8008448 <__ssputs_r+0x58>
 8008490:	462a      	mov	r2, r5
 8008492:	f000 fba5 	bl	8008be0 <_realloc_r>
 8008496:	4606      	mov	r6, r0
 8008498:	2800      	cmp	r0, #0
 800849a:	d1e1      	bne.n	8008460 <__ssputs_r+0x70>
 800849c:	6921      	ldr	r1, [r4, #16]
 800849e:	4650      	mov	r0, sl
 80084a0:	f000 fabe 	bl	8008a20 <_free_r>
 80084a4:	e7c7      	b.n	8008436 <__ssputs_r+0x46>
	...

080084a8 <_svfiprintf_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	4698      	mov	r8, r3
 80084ae:	898b      	ldrh	r3, [r1, #12]
 80084b0:	061b      	lsls	r3, r3, #24
 80084b2:	b09d      	sub	sp, #116	; 0x74
 80084b4:	4607      	mov	r7, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	4614      	mov	r4, r2
 80084ba:	d50e      	bpl.n	80084da <_svfiprintf_r+0x32>
 80084bc:	690b      	ldr	r3, [r1, #16]
 80084be:	b963      	cbnz	r3, 80084da <_svfiprintf_r+0x32>
 80084c0:	2140      	movs	r1, #64	; 0x40
 80084c2:	f000 fb19 	bl	8008af8 <_malloc_r>
 80084c6:	6028      	str	r0, [r5, #0]
 80084c8:	6128      	str	r0, [r5, #16]
 80084ca:	b920      	cbnz	r0, 80084d6 <_svfiprintf_r+0x2e>
 80084cc:	230c      	movs	r3, #12
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e0d1      	b.n	800867a <_svfiprintf_r+0x1d2>
 80084d6:	2340      	movs	r3, #64	; 0x40
 80084d8:	616b      	str	r3, [r5, #20]
 80084da:	2300      	movs	r3, #0
 80084dc:	9309      	str	r3, [sp, #36]	; 0x24
 80084de:	2320      	movs	r3, #32
 80084e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e8:	2330      	movs	r3, #48	; 0x30
 80084ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008694 <_svfiprintf_r+0x1ec>
 80084ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084f2:	f04f 0901 	mov.w	r9, #1
 80084f6:	4623      	mov	r3, r4
 80084f8:	469a      	mov	sl, r3
 80084fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fe:	b10a      	cbz	r2, 8008504 <_svfiprintf_r+0x5c>
 8008500:	2a25      	cmp	r2, #37	; 0x25
 8008502:	d1f9      	bne.n	80084f8 <_svfiprintf_r+0x50>
 8008504:	ebba 0b04 	subs.w	fp, sl, r4
 8008508:	d00b      	beq.n	8008522 <_svfiprintf_r+0x7a>
 800850a:	465b      	mov	r3, fp
 800850c:	4622      	mov	r2, r4
 800850e:	4629      	mov	r1, r5
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff ff6d 	bl	80083f0 <__ssputs_r>
 8008516:	3001      	adds	r0, #1
 8008518:	f000 80aa 	beq.w	8008670 <_svfiprintf_r+0x1c8>
 800851c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800851e:	445a      	add	r2, fp
 8008520:	9209      	str	r2, [sp, #36]	; 0x24
 8008522:	f89a 3000 	ldrb.w	r3, [sl]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 80a2 	beq.w	8008670 <_svfiprintf_r+0x1c8>
 800852c:	2300      	movs	r3, #0
 800852e:	f04f 32ff 	mov.w	r2, #4294967295
 8008532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008536:	f10a 0a01 	add.w	sl, sl, #1
 800853a:	9304      	str	r3, [sp, #16]
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008542:	931a      	str	r3, [sp, #104]	; 0x68
 8008544:	4654      	mov	r4, sl
 8008546:	2205      	movs	r2, #5
 8008548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854c:	4851      	ldr	r0, [pc, #324]	; (8008694 <_svfiprintf_r+0x1ec>)
 800854e:	f7f7 fe47 	bl	80001e0 <memchr>
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	b9d8      	cbnz	r0, 800858e <_svfiprintf_r+0xe6>
 8008556:	06d0      	lsls	r0, r2, #27
 8008558:	bf44      	itt	mi
 800855a:	2320      	movmi	r3, #32
 800855c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008560:	0711      	lsls	r1, r2, #28
 8008562:	bf44      	itt	mi
 8008564:	232b      	movmi	r3, #43	; 0x2b
 8008566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856a:	f89a 3000 	ldrb.w	r3, [sl]
 800856e:	2b2a      	cmp	r3, #42	; 0x2a
 8008570:	d015      	beq.n	800859e <_svfiprintf_r+0xf6>
 8008572:	9a07      	ldr	r2, [sp, #28]
 8008574:	4654      	mov	r4, sl
 8008576:	2000      	movs	r0, #0
 8008578:	f04f 0c0a 	mov.w	ip, #10
 800857c:	4621      	mov	r1, r4
 800857e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008582:	3b30      	subs	r3, #48	; 0x30
 8008584:	2b09      	cmp	r3, #9
 8008586:	d94e      	bls.n	8008626 <_svfiprintf_r+0x17e>
 8008588:	b1b0      	cbz	r0, 80085b8 <_svfiprintf_r+0x110>
 800858a:	9207      	str	r2, [sp, #28]
 800858c:	e014      	b.n	80085b8 <_svfiprintf_r+0x110>
 800858e:	eba0 0308 	sub.w	r3, r0, r8
 8008592:	fa09 f303 	lsl.w	r3, r9, r3
 8008596:	4313      	orrs	r3, r2
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	46a2      	mov	sl, r4
 800859c:	e7d2      	b.n	8008544 <_svfiprintf_r+0x9c>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	1d19      	adds	r1, r3, #4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	9103      	str	r1, [sp, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfbb      	ittet	lt
 80085aa:	425b      	neglt	r3, r3
 80085ac:	f042 0202 	orrlt.w	r2, r2, #2
 80085b0:	9307      	strge	r3, [sp, #28]
 80085b2:	9307      	strlt	r3, [sp, #28]
 80085b4:	bfb8      	it	lt
 80085b6:	9204      	strlt	r2, [sp, #16]
 80085b8:	7823      	ldrb	r3, [r4, #0]
 80085ba:	2b2e      	cmp	r3, #46	; 0x2e
 80085bc:	d10c      	bne.n	80085d8 <_svfiprintf_r+0x130>
 80085be:	7863      	ldrb	r3, [r4, #1]
 80085c0:	2b2a      	cmp	r3, #42	; 0x2a
 80085c2:	d135      	bne.n	8008630 <_svfiprintf_r+0x188>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	1d1a      	adds	r2, r3, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	9203      	str	r2, [sp, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	bfb8      	it	lt
 80085d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085d4:	3402      	adds	r4, #2
 80085d6:	9305      	str	r3, [sp, #20]
 80085d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086a4 <_svfiprintf_r+0x1fc>
 80085dc:	7821      	ldrb	r1, [r4, #0]
 80085de:	2203      	movs	r2, #3
 80085e0:	4650      	mov	r0, sl
 80085e2:	f7f7 fdfd 	bl	80001e0 <memchr>
 80085e6:	b140      	cbz	r0, 80085fa <_svfiprintf_r+0x152>
 80085e8:	2340      	movs	r3, #64	; 0x40
 80085ea:	eba0 000a 	sub.w	r0, r0, sl
 80085ee:	fa03 f000 	lsl.w	r0, r3, r0
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	4303      	orrs	r3, r0
 80085f6:	3401      	adds	r4, #1
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fe:	4826      	ldr	r0, [pc, #152]	; (8008698 <_svfiprintf_r+0x1f0>)
 8008600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008604:	2206      	movs	r2, #6
 8008606:	f7f7 fdeb 	bl	80001e0 <memchr>
 800860a:	2800      	cmp	r0, #0
 800860c:	d038      	beq.n	8008680 <_svfiprintf_r+0x1d8>
 800860e:	4b23      	ldr	r3, [pc, #140]	; (800869c <_svfiprintf_r+0x1f4>)
 8008610:	bb1b      	cbnz	r3, 800865a <_svfiprintf_r+0x1b2>
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	3307      	adds	r3, #7
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	3308      	adds	r3, #8
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	4433      	add	r3, r6
 8008622:	9309      	str	r3, [sp, #36]	; 0x24
 8008624:	e767      	b.n	80084f6 <_svfiprintf_r+0x4e>
 8008626:	fb0c 3202 	mla	r2, ip, r2, r3
 800862a:	460c      	mov	r4, r1
 800862c:	2001      	movs	r0, #1
 800862e:	e7a5      	b.n	800857c <_svfiprintf_r+0xd4>
 8008630:	2300      	movs	r3, #0
 8008632:	3401      	adds	r4, #1
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	4619      	mov	r1, r3
 8008638:	f04f 0c0a 	mov.w	ip, #10
 800863c:	4620      	mov	r0, r4
 800863e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008642:	3a30      	subs	r2, #48	; 0x30
 8008644:	2a09      	cmp	r2, #9
 8008646:	d903      	bls.n	8008650 <_svfiprintf_r+0x1a8>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0c5      	beq.n	80085d8 <_svfiprintf_r+0x130>
 800864c:	9105      	str	r1, [sp, #20]
 800864e:	e7c3      	b.n	80085d8 <_svfiprintf_r+0x130>
 8008650:	fb0c 2101 	mla	r1, ip, r1, r2
 8008654:	4604      	mov	r4, r0
 8008656:	2301      	movs	r3, #1
 8008658:	e7f0      	b.n	800863c <_svfiprintf_r+0x194>
 800865a:	ab03      	add	r3, sp, #12
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	462a      	mov	r2, r5
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <_svfiprintf_r+0x1f8>)
 8008662:	a904      	add	r1, sp, #16
 8008664:	4638      	mov	r0, r7
 8008666:	f3af 8000 	nop.w
 800866a:	1c42      	adds	r2, r0, #1
 800866c:	4606      	mov	r6, r0
 800866e:	d1d6      	bne.n	800861e <_svfiprintf_r+0x176>
 8008670:	89ab      	ldrh	r3, [r5, #12]
 8008672:	065b      	lsls	r3, r3, #25
 8008674:	f53f af2c 	bmi.w	80084d0 <_svfiprintf_r+0x28>
 8008678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800867a:	b01d      	add	sp, #116	; 0x74
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	462a      	mov	r2, r5
 8008686:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <_svfiprintf_r+0x1f8>)
 8008688:	a904      	add	r1, sp, #16
 800868a:	4638      	mov	r0, r7
 800868c:	f000 f87a 	bl	8008784 <_printf_i>
 8008690:	e7eb      	b.n	800866a <_svfiprintf_r+0x1c2>
 8008692:	bf00      	nop
 8008694:	08008d34 	.word	0x08008d34
 8008698:	08008d3e 	.word	0x08008d3e
 800869c:	00000000 	.word	0x00000000
 80086a0:	080083f1 	.word	0x080083f1
 80086a4:	08008d3a 	.word	0x08008d3a

080086a8 <_printf_common>:
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	4616      	mov	r6, r2
 80086ae:	4699      	mov	r9, r3
 80086b0:	688a      	ldr	r2, [r1, #8]
 80086b2:	690b      	ldr	r3, [r1, #16]
 80086b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bfb8      	it	lt
 80086bc:	4613      	movlt	r3, r2
 80086be:	6033      	str	r3, [r6, #0]
 80086c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086c4:	4607      	mov	r7, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	b10a      	cbz	r2, 80086ce <_printf_common+0x26>
 80086ca:	3301      	adds	r3, #1
 80086cc:	6033      	str	r3, [r6, #0]
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	0699      	lsls	r1, r3, #26
 80086d2:	bf42      	ittt	mi
 80086d4:	6833      	ldrmi	r3, [r6, #0]
 80086d6:	3302      	addmi	r3, #2
 80086d8:	6033      	strmi	r3, [r6, #0]
 80086da:	6825      	ldr	r5, [r4, #0]
 80086dc:	f015 0506 	ands.w	r5, r5, #6
 80086e0:	d106      	bne.n	80086f0 <_printf_common+0x48>
 80086e2:	f104 0a19 	add.w	sl, r4, #25
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	6832      	ldr	r2, [r6, #0]
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	42ab      	cmp	r3, r5
 80086ee:	dc26      	bgt.n	800873e <_printf_common+0x96>
 80086f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086f4:	1e13      	subs	r3, r2, #0
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	bf18      	it	ne
 80086fa:	2301      	movne	r3, #1
 80086fc:	0692      	lsls	r2, r2, #26
 80086fe:	d42b      	bmi.n	8008758 <_printf_common+0xb0>
 8008700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008704:	4649      	mov	r1, r9
 8008706:	4638      	mov	r0, r7
 8008708:	47c0      	blx	r8
 800870a:	3001      	adds	r0, #1
 800870c:	d01e      	beq.n	800874c <_printf_common+0xa4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	68e5      	ldr	r5, [r4, #12]
 8008712:	6832      	ldr	r2, [r6, #0]
 8008714:	f003 0306 	and.w	r3, r3, #6
 8008718:	2b04      	cmp	r3, #4
 800871a:	bf08      	it	eq
 800871c:	1aad      	subeq	r5, r5, r2
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	6922      	ldr	r2, [r4, #16]
 8008722:	bf0c      	ite	eq
 8008724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008728:	2500      	movne	r5, #0
 800872a:	4293      	cmp	r3, r2
 800872c:	bfc4      	itt	gt
 800872e:	1a9b      	subgt	r3, r3, r2
 8008730:	18ed      	addgt	r5, r5, r3
 8008732:	2600      	movs	r6, #0
 8008734:	341a      	adds	r4, #26
 8008736:	42b5      	cmp	r5, r6
 8008738:	d11a      	bne.n	8008770 <_printf_common+0xc8>
 800873a:	2000      	movs	r0, #0
 800873c:	e008      	b.n	8008750 <_printf_common+0xa8>
 800873e:	2301      	movs	r3, #1
 8008740:	4652      	mov	r2, sl
 8008742:	4649      	mov	r1, r9
 8008744:	4638      	mov	r0, r7
 8008746:	47c0      	blx	r8
 8008748:	3001      	adds	r0, #1
 800874a:	d103      	bne.n	8008754 <_printf_common+0xac>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008754:	3501      	adds	r5, #1
 8008756:	e7c6      	b.n	80086e6 <_printf_common+0x3e>
 8008758:	18e1      	adds	r1, r4, r3
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	2030      	movs	r0, #48	; 0x30
 800875e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008762:	4422      	add	r2, r4
 8008764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800876c:	3302      	adds	r3, #2
 800876e:	e7c7      	b.n	8008700 <_printf_common+0x58>
 8008770:	2301      	movs	r3, #1
 8008772:	4622      	mov	r2, r4
 8008774:	4649      	mov	r1, r9
 8008776:	4638      	mov	r0, r7
 8008778:	47c0      	blx	r8
 800877a:	3001      	adds	r0, #1
 800877c:	d0e6      	beq.n	800874c <_printf_common+0xa4>
 800877e:	3601      	adds	r6, #1
 8008780:	e7d9      	b.n	8008736 <_printf_common+0x8e>
	...

08008784 <_printf_i>:
 8008784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	7e0f      	ldrb	r7, [r1, #24]
 800878a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800878c:	2f78      	cmp	r7, #120	; 0x78
 800878e:	4691      	mov	r9, r2
 8008790:	4680      	mov	r8, r0
 8008792:	460c      	mov	r4, r1
 8008794:	469a      	mov	sl, r3
 8008796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800879a:	d807      	bhi.n	80087ac <_printf_i+0x28>
 800879c:	2f62      	cmp	r7, #98	; 0x62
 800879e:	d80a      	bhi.n	80087b6 <_printf_i+0x32>
 80087a0:	2f00      	cmp	r7, #0
 80087a2:	f000 80d8 	beq.w	8008956 <_printf_i+0x1d2>
 80087a6:	2f58      	cmp	r7, #88	; 0x58
 80087a8:	f000 80a3 	beq.w	80088f2 <_printf_i+0x16e>
 80087ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087b4:	e03a      	b.n	800882c <_printf_i+0xa8>
 80087b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ba:	2b15      	cmp	r3, #21
 80087bc:	d8f6      	bhi.n	80087ac <_printf_i+0x28>
 80087be:	a101      	add	r1, pc, #4	; (adr r1, 80087c4 <_printf_i+0x40>)
 80087c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c4:	0800881d 	.word	0x0800881d
 80087c8:	08008831 	.word	0x08008831
 80087cc:	080087ad 	.word	0x080087ad
 80087d0:	080087ad 	.word	0x080087ad
 80087d4:	080087ad 	.word	0x080087ad
 80087d8:	080087ad 	.word	0x080087ad
 80087dc:	08008831 	.word	0x08008831
 80087e0:	080087ad 	.word	0x080087ad
 80087e4:	080087ad 	.word	0x080087ad
 80087e8:	080087ad 	.word	0x080087ad
 80087ec:	080087ad 	.word	0x080087ad
 80087f0:	0800893d 	.word	0x0800893d
 80087f4:	08008861 	.word	0x08008861
 80087f8:	0800891f 	.word	0x0800891f
 80087fc:	080087ad 	.word	0x080087ad
 8008800:	080087ad 	.word	0x080087ad
 8008804:	0800895f 	.word	0x0800895f
 8008808:	080087ad 	.word	0x080087ad
 800880c:	08008861 	.word	0x08008861
 8008810:	080087ad 	.word	0x080087ad
 8008814:	080087ad 	.word	0x080087ad
 8008818:	08008927 	.word	0x08008927
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	602a      	str	r2, [r5, #0]
 8008824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800882c:	2301      	movs	r3, #1
 800882e:	e0a3      	b.n	8008978 <_printf_i+0x1f4>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	6829      	ldr	r1, [r5, #0]
 8008834:	0606      	lsls	r6, r0, #24
 8008836:	f101 0304 	add.w	r3, r1, #4
 800883a:	d50a      	bpl.n	8008852 <_printf_i+0xce>
 800883c:	680e      	ldr	r6, [r1, #0]
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	2e00      	cmp	r6, #0
 8008842:	da03      	bge.n	800884c <_printf_i+0xc8>
 8008844:	232d      	movs	r3, #45	; 0x2d
 8008846:	4276      	negs	r6, r6
 8008848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884c:	485e      	ldr	r0, [pc, #376]	; (80089c8 <_printf_i+0x244>)
 800884e:	230a      	movs	r3, #10
 8008850:	e019      	b.n	8008886 <_printf_i+0x102>
 8008852:	680e      	ldr	r6, [r1, #0]
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800885a:	bf18      	it	ne
 800885c:	b236      	sxthne	r6, r6
 800885e:	e7ef      	b.n	8008840 <_printf_i+0xbc>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	1d19      	adds	r1, r3, #4
 8008866:	6029      	str	r1, [r5, #0]
 8008868:	0601      	lsls	r1, r0, #24
 800886a:	d501      	bpl.n	8008870 <_printf_i+0xec>
 800886c:	681e      	ldr	r6, [r3, #0]
 800886e:	e002      	b.n	8008876 <_printf_i+0xf2>
 8008870:	0646      	lsls	r6, r0, #25
 8008872:	d5fb      	bpl.n	800886c <_printf_i+0xe8>
 8008874:	881e      	ldrh	r6, [r3, #0]
 8008876:	4854      	ldr	r0, [pc, #336]	; (80089c8 <_printf_i+0x244>)
 8008878:	2f6f      	cmp	r7, #111	; 0x6f
 800887a:	bf0c      	ite	eq
 800887c:	2308      	moveq	r3, #8
 800887e:	230a      	movne	r3, #10
 8008880:	2100      	movs	r1, #0
 8008882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008886:	6865      	ldr	r5, [r4, #4]
 8008888:	60a5      	str	r5, [r4, #8]
 800888a:	2d00      	cmp	r5, #0
 800888c:	bfa2      	ittt	ge
 800888e:	6821      	ldrge	r1, [r4, #0]
 8008890:	f021 0104 	bicge.w	r1, r1, #4
 8008894:	6021      	strge	r1, [r4, #0]
 8008896:	b90e      	cbnz	r6, 800889c <_printf_i+0x118>
 8008898:	2d00      	cmp	r5, #0
 800889a:	d04d      	beq.n	8008938 <_printf_i+0x1b4>
 800889c:	4615      	mov	r5, r2
 800889e:	fbb6 f1f3 	udiv	r1, r6, r3
 80088a2:	fb03 6711 	mls	r7, r3, r1, r6
 80088a6:	5dc7      	ldrb	r7, [r0, r7]
 80088a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088ac:	4637      	mov	r7, r6
 80088ae:	42bb      	cmp	r3, r7
 80088b0:	460e      	mov	r6, r1
 80088b2:	d9f4      	bls.n	800889e <_printf_i+0x11a>
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d10b      	bne.n	80088d0 <_printf_i+0x14c>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	07de      	lsls	r6, r3, #31
 80088bc:	d508      	bpl.n	80088d0 <_printf_i+0x14c>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	6861      	ldr	r1, [r4, #4]
 80088c2:	4299      	cmp	r1, r3
 80088c4:	bfde      	ittt	le
 80088c6:	2330      	movle	r3, #48	; 0x30
 80088c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088d0:	1b52      	subs	r2, r2, r5
 80088d2:	6122      	str	r2, [r4, #16]
 80088d4:	f8cd a000 	str.w	sl, [sp]
 80088d8:	464b      	mov	r3, r9
 80088da:	aa03      	add	r2, sp, #12
 80088dc:	4621      	mov	r1, r4
 80088de:	4640      	mov	r0, r8
 80088e0:	f7ff fee2 	bl	80086a8 <_printf_common>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d14c      	bne.n	8008982 <_printf_i+0x1fe>
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	b004      	add	sp, #16
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	4835      	ldr	r0, [pc, #212]	; (80089c8 <_printf_i+0x244>)
 80088f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088f8:	6829      	ldr	r1, [r5, #0]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008900:	6029      	str	r1, [r5, #0]
 8008902:	061d      	lsls	r5, r3, #24
 8008904:	d514      	bpl.n	8008930 <_printf_i+0x1ac>
 8008906:	07df      	lsls	r7, r3, #31
 8008908:	bf44      	itt	mi
 800890a:	f043 0320 	orrmi.w	r3, r3, #32
 800890e:	6023      	strmi	r3, [r4, #0]
 8008910:	b91e      	cbnz	r6, 800891a <_printf_i+0x196>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	f023 0320 	bic.w	r3, r3, #32
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	2310      	movs	r3, #16
 800891c:	e7b0      	b.n	8008880 <_printf_i+0xfc>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f043 0320 	orr.w	r3, r3, #32
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	2378      	movs	r3, #120	; 0x78
 8008928:	4828      	ldr	r0, [pc, #160]	; (80089cc <_printf_i+0x248>)
 800892a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800892e:	e7e3      	b.n	80088f8 <_printf_i+0x174>
 8008930:	0659      	lsls	r1, r3, #25
 8008932:	bf48      	it	mi
 8008934:	b2b6      	uxthmi	r6, r6
 8008936:	e7e6      	b.n	8008906 <_printf_i+0x182>
 8008938:	4615      	mov	r5, r2
 800893a:	e7bb      	b.n	80088b4 <_printf_i+0x130>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	6826      	ldr	r6, [r4, #0]
 8008940:	6961      	ldr	r1, [r4, #20]
 8008942:	1d18      	adds	r0, r3, #4
 8008944:	6028      	str	r0, [r5, #0]
 8008946:	0635      	lsls	r5, r6, #24
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	d501      	bpl.n	8008950 <_printf_i+0x1cc>
 800894c:	6019      	str	r1, [r3, #0]
 800894e:	e002      	b.n	8008956 <_printf_i+0x1d2>
 8008950:	0670      	lsls	r0, r6, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0x1c8>
 8008954:	8019      	strh	r1, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	4615      	mov	r5, r2
 800895c:	e7ba      	b.n	80088d4 <_printf_i+0x150>
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	1d1a      	adds	r2, r3, #4
 8008962:	602a      	str	r2, [r5, #0]
 8008964:	681d      	ldr	r5, [r3, #0]
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	2100      	movs	r1, #0
 800896a:	4628      	mov	r0, r5
 800896c:	f7f7 fc38 	bl	80001e0 <memchr>
 8008970:	b108      	cbz	r0, 8008976 <_printf_i+0x1f2>
 8008972:	1b40      	subs	r0, r0, r5
 8008974:	6060      	str	r0, [r4, #4]
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	2300      	movs	r3, #0
 800897c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008980:	e7a8      	b.n	80088d4 <_printf_i+0x150>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	462a      	mov	r2, r5
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	47d0      	blx	sl
 800898c:	3001      	adds	r0, #1
 800898e:	d0ab      	beq.n	80088e8 <_printf_i+0x164>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	079b      	lsls	r3, r3, #30
 8008994:	d413      	bmi.n	80089be <_printf_i+0x23a>
 8008996:	68e0      	ldr	r0, [r4, #12]
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	4298      	cmp	r0, r3
 800899c:	bfb8      	it	lt
 800899e:	4618      	movlt	r0, r3
 80089a0:	e7a4      	b.n	80088ec <_printf_i+0x168>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4632      	mov	r2, r6
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	47d0      	blx	sl
 80089ac:	3001      	adds	r0, #1
 80089ae:	d09b      	beq.n	80088e8 <_printf_i+0x164>
 80089b0:	3501      	adds	r5, #1
 80089b2:	68e3      	ldr	r3, [r4, #12]
 80089b4:	9903      	ldr	r1, [sp, #12]
 80089b6:	1a5b      	subs	r3, r3, r1
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	dcf2      	bgt.n	80089a2 <_printf_i+0x21e>
 80089bc:	e7eb      	b.n	8008996 <_printf_i+0x212>
 80089be:	2500      	movs	r5, #0
 80089c0:	f104 0619 	add.w	r6, r4, #25
 80089c4:	e7f5      	b.n	80089b2 <_printf_i+0x22e>
 80089c6:	bf00      	nop
 80089c8:	08008d45 	.word	0x08008d45
 80089cc:	08008d56 	.word	0x08008d56

080089d0 <memcpy>:
 80089d0:	440a      	add	r2, r1
 80089d2:	4291      	cmp	r1, r2
 80089d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d8:	d100      	bne.n	80089dc <memcpy+0xc>
 80089da:	4770      	bx	lr
 80089dc:	b510      	push	{r4, lr}
 80089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e6:	4291      	cmp	r1, r2
 80089e8:	d1f9      	bne.n	80089de <memcpy+0xe>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <memmove>:
 80089ec:	4288      	cmp	r0, r1
 80089ee:	b510      	push	{r4, lr}
 80089f0:	eb01 0402 	add.w	r4, r1, r2
 80089f4:	d902      	bls.n	80089fc <memmove+0x10>
 80089f6:	4284      	cmp	r4, r0
 80089f8:	4623      	mov	r3, r4
 80089fa:	d807      	bhi.n	8008a0c <memmove+0x20>
 80089fc:	1e43      	subs	r3, r0, #1
 80089fe:	42a1      	cmp	r1, r4
 8008a00:	d008      	beq.n	8008a14 <memmove+0x28>
 8008a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0a:	e7f8      	b.n	80089fe <memmove+0x12>
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4601      	mov	r1, r0
 8008a10:	428a      	cmp	r2, r1
 8008a12:	d100      	bne.n	8008a16 <memmove+0x2a>
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1e:	e7f7      	b.n	8008a10 <memmove+0x24>

08008a20 <_free_r>:
 8008a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a22:	2900      	cmp	r1, #0
 8008a24:	d044      	beq.n	8008ab0 <_free_r+0x90>
 8008a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2a:	9001      	str	r0, [sp, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a32:	bfb8      	it	lt
 8008a34:	18e4      	addlt	r4, r4, r3
 8008a36:	f000 f913 	bl	8008c60 <__malloc_lock>
 8008a3a:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <_free_r+0x94>)
 8008a3c:	9801      	ldr	r0, [sp, #4]
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	b933      	cbnz	r3, 8008a50 <_free_r+0x30>
 8008a42:	6063      	str	r3, [r4, #4]
 8008a44:	6014      	str	r4, [r2, #0]
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a4c:	f000 b90e 	b.w	8008c6c <__malloc_unlock>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d908      	bls.n	8008a66 <_free_r+0x46>
 8008a54:	6825      	ldr	r5, [r4, #0]
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf01      	itttt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	1949      	addeq	r1, r1, r5
 8008a62:	6021      	streq	r1, [r4, #0]
 8008a64:	e7ed      	b.n	8008a42 <_free_r+0x22>
 8008a66:	461a      	mov	r2, r3
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	b10b      	cbz	r3, 8008a70 <_free_r+0x50>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d9fa      	bls.n	8008a66 <_free_r+0x46>
 8008a70:	6811      	ldr	r1, [r2, #0]
 8008a72:	1855      	adds	r5, r2, r1
 8008a74:	42a5      	cmp	r5, r4
 8008a76:	d10b      	bne.n	8008a90 <_free_r+0x70>
 8008a78:	6824      	ldr	r4, [r4, #0]
 8008a7a:	4421      	add	r1, r4
 8008a7c:	1854      	adds	r4, r2, r1
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	d1e0      	bne.n	8008a46 <_free_r+0x26>
 8008a84:	681c      	ldr	r4, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	6011      	str	r1, [r2, #0]
 8008a8e:	e7da      	b.n	8008a46 <_free_r+0x26>
 8008a90:	d902      	bls.n	8008a98 <_free_r+0x78>
 8008a92:	230c      	movs	r3, #12
 8008a94:	6003      	str	r3, [r0, #0]
 8008a96:	e7d6      	b.n	8008a46 <_free_r+0x26>
 8008a98:	6825      	ldr	r5, [r4, #0]
 8008a9a:	1961      	adds	r1, r4, r5
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf04      	itt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	bf04      	itt	eq
 8008aa8:	1949      	addeq	r1, r1, r5
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6054      	str	r4, [r2, #4]
 8008aae:	e7ca      	b.n	8008a46 <_free_r+0x26>
 8008ab0:	b003      	add	sp, #12
 8008ab2:	bd30      	pop	{r4, r5, pc}
 8008ab4:	20001e48 	.word	0x20001e48

08008ab8 <sbrk_aligned>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4e0e      	ldr	r6, [pc, #56]	; (8008af4 <sbrk_aligned+0x3c>)
 8008abc:	460c      	mov	r4, r1
 8008abe:	6831      	ldr	r1, [r6, #0]
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	b911      	cbnz	r1, 8008aca <sbrk_aligned+0x12>
 8008ac4:	f000 f8bc 	bl	8008c40 <_sbrk_r>
 8008ac8:	6030      	str	r0, [r6, #0]
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f8b7 	bl	8008c40 <_sbrk_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d00a      	beq.n	8008aec <sbrk_aligned+0x34>
 8008ad6:	1cc4      	adds	r4, r0, #3
 8008ad8:	f024 0403 	bic.w	r4, r4, #3
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d007      	beq.n	8008af0 <sbrk_aligned+0x38>
 8008ae0:	1a21      	subs	r1, r4, r0
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f8ac 	bl	8008c40 <_sbrk_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d101      	bne.n	8008af0 <sbrk_aligned+0x38>
 8008aec:	f04f 34ff 	mov.w	r4, #4294967295
 8008af0:	4620      	mov	r0, r4
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	20001e4c 	.word	0x20001e4c

08008af8 <_malloc_r>:
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	1ccd      	adds	r5, r1, #3
 8008afe:	f025 0503 	bic.w	r5, r5, #3
 8008b02:	3508      	adds	r5, #8
 8008b04:	2d0c      	cmp	r5, #12
 8008b06:	bf38      	it	cc
 8008b08:	250c      	movcc	r5, #12
 8008b0a:	2d00      	cmp	r5, #0
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	db01      	blt.n	8008b14 <_malloc_r+0x1c>
 8008b10:	42a9      	cmp	r1, r5
 8008b12:	d905      	bls.n	8008b20 <_malloc_r+0x28>
 8008b14:	230c      	movs	r3, #12
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	2600      	movs	r6, #0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b20:	4e2e      	ldr	r6, [pc, #184]	; (8008bdc <_malloc_r+0xe4>)
 8008b22:	f000 f89d 	bl	8008c60 <__malloc_lock>
 8008b26:	6833      	ldr	r3, [r6, #0]
 8008b28:	461c      	mov	r4, r3
 8008b2a:	bb34      	cbnz	r4, 8008b7a <_malloc_r+0x82>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff ffc2 	bl	8008ab8 <sbrk_aligned>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	4604      	mov	r4, r0
 8008b38:	d14d      	bne.n	8008bd6 <_malloc_r+0xde>
 8008b3a:	6834      	ldr	r4, [r6, #0]
 8008b3c:	4626      	mov	r6, r4
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	d140      	bne.n	8008bc4 <_malloc_r+0xcc>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4638      	mov	r0, r7
 8008b48:	eb04 0803 	add.w	r8, r4, r3
 8008b4c:	f000 f878 	bl	8008c40 <_sbrk_r>
 8008b50:	4580      	cmp	r8, r0
 8008b52:	d13a      	bne.n	8008bca <_malloc_r+0xd2>
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	3503      	adds	r5, #3
 8008b58:	1a6d      	subs	r5, r5, r1
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	4629      	mov	r1, r5
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ffa5 	bl	8008ab8 <sbrk_aligned>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d02b      	beq.n	8008bca <_malloc_r+0xd2>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	442b      	add	r3, r5
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	e00e      	b.n	8008b98 <_malloc_r+0xa0>
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	d41e      	bmi.n	8008bbe <_malloc_r+0xc6>
 8008b80:	2a0b      	cmp	r2, #11
 8008b82:	d916      	bls.n	8008bb2 <_malloc_r+0xba>
 8008b84:	1961      	adds	r1, r4, r5
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	6025      	str	r5, [r4, #0]
 8008b8a:	bf18      	it	ne
 8008b8c:	6059      	strne	r1, [r3, #4]
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	bf08      	it	eq
 8008b92:	6031      	streq	r1, [r6, #0]
 8008b94:	5162      	str	r2, [r4, r5]
 8008b96:	604b      	str	r3, [r1, #4]
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f104 060b 	add.w	r6, r4, #11
 8008b9e:	f000 f865 	bl	8008c6c <__malloc_unlock>
 8008ba2:	f026 0607 	bic.w	r6, r6, #7
 8008ba6:	1d23      	adds	r3, r4, #4
 8008ba8:	1af2      	subs	r2, r6, r3
 8008baa:	d0b6      	beq.n	8008b1a <_malloc_r+0x22>
 8008bac:	1b9b      	subs	r3, r3, r6
 8008bae:	50a3      	str	r3, [r4, r2]
 8008bb0:	e7b3      	b.n	8008b1a <_malloc_r+0x22>
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	bf0c      	ite	eq
 8008bb8:	6032      	streq	r2, [r6, #0]
 8008bba:	605a      	strne	r2, [r3, #4]
 8008bbc:	e7ec      	b.n	8008b98 <_malloc_r+0xa0>
 8008bbe:	4623      	mov	r3, r4
 8008bc0:	6864      	ldr	r4, [r4, #4]
 8008bc2:	e7b2      	b.n	8008b2a <_malloc_r+0x32>
 8008bc4:	4634      	mov	r4, r6
 8008bc6:	6876      	ldr	r6, [r6, #4]
 8008bc8:	e7b9      	b.n	8008b3e <_malloc_r+0x46>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	603b      	str	r3, [r7, #0]
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f000 f84c 	bl	8008c6c <__malloc_unlock>
 8008bd4:	e7a1      	b.n	8008b1a <_malloc_r+0x22>
 8008bd6:	6025      	str	r5, [r4, #0]
 8008bd8:	e7de      	b.n	8008b98 <_malloc_r+0xa0>
 8008bda:	bf00      	nop
 8008bdc:	20001e48 	.word	0x20001e48

08008be0 <_realloc_r>:
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	4680      	mov	r8, r0
 8008be6:	4614      	mov	r4, r2
 8008be8:	460e      	mov	r6, r1
 8008bea:	b921      	cbnz	r1, 8008bf6 <_realloc_r+0x16>
 8008bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	f7ff bf81 	b.w	8008af8 <_malloc_r>
 8008bf6:	b92a      	cbnz	r2, 8008c04 <_realloc_r+0x24>
 8008bf8:	f7ff ff12 	bl	8008a20 <_free_r>
 8008bfc:	4625      	mov	r5, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c04:	f000 f838 	bl	8008c78 <_malloc_usable_size_r>
 8008c08:	4284      	cmp	r4, r0
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	d802      	bhi.n	8008c14 <_realloc_r+0x34>
 8008c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c12:	d812      	bhi.n	8008c3a <_realloc_r+0x5a>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4640      	mov	r0, r8
 8008c18:	f7ff ff6e 	bl	8008af8 <_malloc_r>
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d0ed      	beq.n	8008bfe <_realloc_r+0x1e>
 8008c22:	42bc      	cmp	r4, r7
 8008c24:	4622      	mov	r2, r4
 8008c26:	4631      	mov	r1, r6
 8008c28:	bf28      	it	cs
 8008c2a:	463a      	movcs	r2, r7
 8008c2c:	f7ff fed0 	bl	80089d0 <memcpy>
 8008c30:	4631      	mov	r1, r6
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7ff fef4 	bl	8008a20 <_free_r>
 8008c38:	e7e1      	b.n	8008bfe <_realloc_r+0x1e>
 8008c3a:	4635      	mov	r5, r6
 8008c3c:	e7df      	b.n	8008bfe <_realloc_r+0x1e>
	...

08008c40 <_sbrk_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d06      	ldr	r5, [pc, #24]	; (8008c5c <_sbrk_r+0x1c>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	602b      	str	r3, [r5, #0]
 8008c4c:	f7f7 fe98 	bl	8000980 <_sbrk>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	d102      	bne.n	8008c5a <_sbrk_r+0x1a>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b103      	cbz	r3, 8008c5a <_sbrk_r+0x1a>
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	20001e50 	.word	0x20001e50

08008c60 <__malloc_lock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__malloc_lock+0x8>)
 8008c62:	f000 b811 	b.w	8008c88 <__retarget_lock_acquire_recursive>
 8008c66:	bf00      	nop
 8008c68:	20001e54 	.word	0x20001e54

08008c6c <__malloc_unlock>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__malloc_unlock+0x8>)
 8008c6e:	f000 b80c 	b.w	8008c8a <__retarget_lock_release_recursive>
 8008c72:	bf00      	nop
 8008c74:	20001e54 	.word	0x20001e54

08008c78 <_malloc_usable_size_r>:
 8008c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7c:	1f18      	subs	r0, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfbc      	itt	lt
 8008c82:	580b      	ldrlt	r3, [r1, r0]
 8008c84:	18c0      	addlt	r0, r0, r3
 8008c86:	4770      	bx	lr

08008c88 <__retarget_lock_acquire_recursive>:
 8008c88:	4770      	bx	lr

08008c8a <__retarget_lock_release_recursive>:
 8008c8a:	4770      	bx	lr

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr


BMX055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008718  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008990  08008990  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  20000180  08008b18  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e14  08008b18  00021e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001195c  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f58  00000000  00000000  00031b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00034a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931f  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137a4  00000000  00000000  0004f8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a969  00000000  00000000  0006304b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  000eda04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088a0 	.word	0x080088a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	080088a0 	.word	0x080088a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t debug = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	uint8_t size = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fa43 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f84b 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8df 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 800059e:	f000 f8af 	bl	8000700 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f006 ffcd 	bl	8007540 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  SearchDevice(&hi2c1);
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <main+0x9c>)
 80005a8:	f006 ff70 	bl	800748c <SearchDevice>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f000 faa7 	bl	8000b00 <HAL_Delay>

	  debug = BMX055_Init(&hi2c1);
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <main+0x9c>)
 80005b4:	f006 ff52 	bl	800745c <BMX055_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	607b      	str	r3, [r7, #4]
	  //debug = HAL_I2C_Mem_Read(&hi2c1, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
	  size = sprintf((char *)buffer, "WHO IAM 0x%X Shall be 0x%X\n\r", (int)readData, (int)BMX055_ACC_DEVICE);
 80005bc:	78ba      	ldrb	r2, [r7, #2]
 80005be:	23fa      	movs	r3, #250	; 0xfa
 80005c0:	4918      	ldr	r1, [pc, #96]	; (8000624 <main+0xa0>)
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <main+0xa4>)
 80005c4:	f007 fcfe 	bl	8007fc4 <siprintf>
 80005c8:	4603      	mov	r3, r0
 80005ca:	70fb      	strb	r3, [r7, #3]
	  CDC_Transmit_FS(buffer, size);
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0xa4>)
 80005d4:	f007 f872 	bl	80076bc <CDC_Transmit_FS>
	  debug = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]

	  //debug = HAL_I2C_Mem_Read(&hi2c1, BMX055_GYRO_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);

	  size = sprintf((char *)buffer, "WHO IAM 0x%X\n\r", (int)readData);
 80005dc:	78bb      	ldrb	r3, [r7, #2]
 80005de:	461a      	mov	r2, r3
 80005e0:	4912      	ldr	r1, [pc, #72]	; (800062c <main+0xa8>)
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <main+0xa4>)
 80005e4:	f007 fcee 	bl	8007fc4 <siprintf>
 80005e8:	4603      	mov	r3, r0
 80005ea:	70fb      	strb	r3, [r7, #3]
	  CDC_Transmit_FS(buffer, size);
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0xa4>)
 80005f4:	f007 f862 	bl	80076bc <CDC_Transmit_FS>
	  debug = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]


	 // debug = HAL_I2C_Mem_Read(&hi2c1, BMX055_MAG_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
	  size = sprintf((char *)buffer, "WHO IAM 0x%X\n\r", (int)readData);
 80005fc:	78bb      	ldrb	r3, [r7, #2]
 80005fe:	461a      	mov	r2, r3
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <main+0xa8>)
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0xa4>)
 8000604:	f007 fcde 	bl	8007fc4 <siprintf>
 8000608:	4603      	mov	r3, r0
 800060a:	70fb      	strb	r3, [r7, #3]
	  CDC_Transmit_FS(buffer, size);
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	b29b      	uxth	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0xa4>)
 8000614:	f007 f852 	bl	80076bc <CDC_Transmit_FS>
	  debug= 0;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
	  HAL_Delay(100);
 800061c:	e7c6      	b.n	80005ac <main+0x28>
 800061e:	bf00      	nop
 8000620:	2000019c 	.word	0x2000019c
 8000624:	080088b8 	.word	0x080088b8
 8000628:	20000000 	.word	0x20000000
 800062c:	080088d8 	.word	0x080088d8

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 fcb8 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <SystemClock_Config+0xc8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <SystemClock_Config+0xc8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a20      	ldr	r2, [pc, #128]	; (80006fc <SystemClock_Config+0xcc>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <SystemClock_Config+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006a0:	2319      	movs	r3, #25
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006a4:	23c0      	movs	r3, #192	; 0xc0
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fe77 	bl	80033a8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f890 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2103      	movs	r1, #3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f8d9 	bl	8003898 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ec:	f000 f87a 	bl	80007e4 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f000 fc99 	bl	8001074 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f84c 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000019c 	.word	0x2000019c
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x84>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <HAL_I2C_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12b      	bne.n	80008ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087e:	23c0      	movs	r3, #192	; 0xc0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	2312      	movs	r3, #18
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088e:	2304      	movs	r3, #4
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <HAL_I2C_MspInit+0x8c>)
 800089a:	f000 fa67 	bl	8000d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 80008a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_I2C_MspInit+0x88>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40005400 	.word	0x40005400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020400 	.word	0x40020400

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f8d0 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f001 fc0f 	bl	800214c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200016d8 	.word	0x200016d8

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f007 fafa 	bl	8007f60 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20020000 	.word	0x20020000
 8000998:	00000400 	.word	0x00000400
 800099c:	200001f0 	.word	0x200001f0
 80009a0:	20001e18 	.word	0x20001e18

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ffd7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f007 fab9 	bl	8007f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fdc3 	bl	8000584 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a0c:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 8000a10:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000a14:	20001e14 	.word	0x20001e14

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f94f 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fece 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f967 	bl	8000d52 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f92f 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	20000024 	.word	0x20000024

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	200001f4 	.word	0x200001f4

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200001f4 	.word	0x200001f4

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffde 	bl	8000ae8 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000028 	.word	0x20000028

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff29 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff3e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff31 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e159      	b.n	800103c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8148 	bne.w	8001036 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d017      	beq.n	8000e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80a2 	beq.w	8001036 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a56      	ldr	r2, [pc, #344]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b54      	ldr	r3, [pc, #336]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0e:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x202>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_GPIO_Init+0x2f4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x1fe>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x1fa>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x1f6>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_GPIO_Init+0x300>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x1f2>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_GPIO_Init+0x304>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f aea2 	bls.w	8000d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e12b      	b.n	80012de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fbd0 	bl	8000840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d8:	f002 fd96 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a81      	ldr	r2, [pc, #516]	; (80012e8 <HAL_I2C_Init+0x274>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d807      	bhi.n	80010f8 <HAL_I2C_Init+0x84>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a80      	ldr	r2, [pc, #512]	; (80012ec <HAL_I2C_Init+0x278>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	bf94      	ite	ls
 80010f0:	2301      	movls	r3, #1
 80010f2:	2300      	movhi	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	e006      	b.n	8001106 <HAL_I2C_Init+0x92>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a7d      	ldr	r2, [pc, #500]	; (80012f0 <HAL_I2C_Init+0x27c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	bf94      	ite	ls
 8001100:	2301      	movls	r3, #1
 8001102:	2300      	movhi	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0e7      	b.n	80012de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a78      	ldr	r2, [pc, #480]	; (80012f4 <HAL_I2C_Init+0x280>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9b      	lsrs	r3, r3, #18
 8001118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	430a      	orrs	r2, r1
 800112c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a6a      	ldr	r2, [pc, #424]	; (80012e8 <HAL_I2C_Init+0x274>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d802      	bhi.n	8001148 <HAL_I2C_Init+0xd4>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	e009      	b.n	800115c <HAL_I2C_Init+0xe8>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_I2C_Init+0x284>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	3301      	adds	r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800116e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <HAL_I2C_Init+0x274>)
 8001178:	428b      	cmp	r3, r1
 800117a:	d819      	bhi.n	80011b0 <HAL_I2C_Init+0x13c>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e59      	subs	r1, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fbb1 f3f3 	udiv	r3, r1, r3
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001190:	400b      	ands	r3, r1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_I2C_Init+0x138>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1e59      	subs	r1, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011aa:	e051      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e04f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_I2C_Init+0x168>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	e012      	b.n	8001202 <HAL_I2C_Init+0x18e>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	0099      	lsls	r1, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	3301      	adds	r3, #1
 80011f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Init+0x196>
 8001206:	2301      	movs	r3, #1
 8001208:	e022      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10e      	bne.n	8001230 <HAL_I2C_Init+0x1bc>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e58      	subs	r0, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6859      	ldr	r1, [r3, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	fbb0 f3f3 	udiv	r3, r0, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	e00f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	0099      	lsls	r1, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800127e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6911      	ldr	r1, [r2, #16]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	4311      	orrs	r1, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	000186a0 	.word	0x000186a0
 80012ec:	001e847f 	.word	0x001e847f
 80012f0:	003d08ff 	.word	0x003d08ff
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	817b      	strh	r3, [r7, #10]
 800130e:	460b      	mov	r3, r1
 8001310:	813b      	strh	r3, [r7, #8]
 8001312:	4613      	mov	r3, r2
 8001314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001316:	f7ff fbe7 	bl	8000ae8 <HAL_GetTick>
 800131a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b20      	cmp	r3, #32
 8001326:	f040 8208 	bne.w	800173a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2319      	movs	r3, #25
 8001330:	2201      	movs	r2, #1
 8001332:	497b      	ldr	r1, [pc, #492]	; (8001520 <HAL_I2C_Mem_Read+0x224>)
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 fc1d 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001340:	2302      	movs	r3, #2
 8001342:	e1fb      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Mem_Read+0x56>
 800134e:	2302      	movs	r3, #2
 8001350:	e1f4      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b01      	cmp	r3, #1
 8001366:	d007      	beq.n	8001378 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2222      	movs	r2, #34	; 0x22
 800138c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a5b      	ldr	r2, [pc, #364]	; (8001524 <HAL_I2C_Mem_Read+0x228>)
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ba:	88f8      	ldrh	r0, [r7, #6]
 80013bc:	893a      	ldrh	r2, [r7, #8]
 80013be:	8979      	ldrh	r1, [r7, #10]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4603      	mov	r3, r0
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 faea 	bl	80019a4 <I2C_RequestMemoryRead>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1b0      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d113      	bne.n	800140a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	623b      	str	r3, [r7, #32]
 80013f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e184      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140e:	2b01      	cmp	r3, #1
 8001410:	d11b      	bne.n	800144a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e164      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144e:	2b02      	cmp	r3, #2
 8001450:	d11b      	bne.n	800148a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001460:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	e144      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80014a0:	e138      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	f200 80f1 	bhi.w	800168e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d123      	bne.n	80014fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fc72 	bl	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e139      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014fa:	e10b      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001500:	2b02      	cmp	r3, #2
 8001502:	d14e      	bne.n	80015a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	2200      	movs	r2, #0
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <HAL_I2C_Mem_Read+0x22c>)
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fb30 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e10e      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
 800151e:	bf00      	nop
 8001520:	00100002 	.word	0x00100002
 8001524:	ffff0000 	.word	0xffff0000
 8001528:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001558:	3b01      	subs	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015a0:	e0b8      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a8:	2200      	movs	r2, #0
 80015aa:	4966      	ldr	r1, [pc, #408]	; (8001744 <HAL_I2C_Mem_Read+0x448>)
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fae1 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0bf      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001604:	2200      	movs	r2, #0
 8001606:	494f      	ldr	r1, [pc, #316]	; (8001744 <HAL_I2C_Mem_Read+0x448>)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fab3 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e091      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800168c:	e042      	b.n	8001714 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fb85 	bl	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e04c      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d118      	bne.n	8001714 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f aec2 	bne.w	80014a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800173a:	2302      	movs	r3, #2
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	00010004 	.word	0x00010004

08001748 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	460b      	mov	r3, r1
 8001756:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff f9c6 	bl	8000ae8 <HAL_GetTick>
 800175c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	f040 8111 	bne.w	8001992 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2319      	movs	r3, #25
 8001776:	2201      	movs	r2, #1
 8001778:	4988      	ldr	r1, [pc, #544]	; (800199c <HAL_I2C_IsDeviceReady+0x254>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f9fa 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
 8001788:	e104      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_I2C_IsDeviceReady+0x50>
 8001794:	2302      	movs	r3, #2
 8001796:	e0fd      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d007      	beq.n	80017be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2224      	movs	r2, #36	; 0x24
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <HAL_I2C_IsDeviceReady+0x258>)
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f9b8 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001818:	d103      	bne.n	8001822 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b6      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001834:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff f957 	bl	8000ae8 <HAL_GetTick>
 800183a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800186a:	e025      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800186c:	f7ff f93c 	bl	8000ae8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d302      	bcc.n	8001882 <HAL_I2C_IsDeviceReady+0x13a>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	22a0      	movs	r2, #160	; 0xa0
 8001886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b02      	cmp	r3, #2
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2ba0      	cmp	r3, #160	; 0xa0
 80018c2:	d005      	beq.n	80018d0 <HAL_I2C_IsDeviceReady+0x188>
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_I2C_IsDeviceReady+0x188>
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0cd      	beq.n	800186c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d129      	bne.n	800193a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2319      	movs	r3, #25
 8001912:	2201      	movs	r2, #1
 8001914:	4921      	ldr	r1, [pc, #132]	; (800199c <HAL_I2C_IsDeviceReady+0x254>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f92c 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e036      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e02c      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001948:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001952:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2319      	movs	r3, #25
 800195a:	2201      	movs	r2, #1
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <HAL_I2C_IsDeviceReady+0x254>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f908 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e012      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3301      	adds	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	f4ff af32 	bcc.w	80017e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001992:	2302      	movs	r3, #2
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	00100002 	.word	0x00100002
 80019a0:	ffff0000 	.word	0xffff0000

080019a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f8c2 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a04:	d103      	bne.n	8001a0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0aa      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	4952      	ldr	r1, [pc, #328]	; (8001b70 <I2C_RequestMemoryRead+0x1cc>)
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f8fa 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e097      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f964 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e076      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a80:	893b      	ldrh	r3, [r7, #8]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	e021      	b.n	8001ad0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a8c:	893b      	ldrh	r3, [r7, #8]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f93e 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d107      	bne.n	8001ac2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e050      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac6:	893b      	ldrh	r3, [r7, #8]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	6a39      	ldr	r1, [r7, #32]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f923 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d107      	bne.n	8001af8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e035      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f82b 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b32:	d103      	bne.n	8001b3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e013      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	4906      	ldr	r1, [pc, #24]	; (8001b70 <I2C_RequestMemoryRead+0x1cc>)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f863 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	00010002 	.word	0x00010002

08001b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	e025      	b.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d021      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7fe ffab 	bl	8000ae8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d116      	bne.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e023      	b.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10d      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	e00c      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d0b6      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c30:	e051      	b.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d123      	bne.n	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e046      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d021      	beq.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7fe ff29 	bl	8000ae8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d116      	bne.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e020      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10c      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e00b      	b.n	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d18d      	bne.n	8001c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2c:	e02d      	b.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f88d 	bl	8001e4e <I2C_IsAcknowledgeFailed>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e02d      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d021      	beq.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7fe fecf 	bl	8000ae8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d302      	bcc.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d116      	bne.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e007      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d1ca      	bne.n	8001d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dae:	e042      	b.n	8001e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d119      	bne.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0210 	mvn.w	r2, #16
 8001dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e029      	b.n	8001e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe fe79 	bl	8000ae8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d1b5      	bne.n	8001db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	d11b      	bne.n	8001e9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0204 	orr.w	r2, r3, #4
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	b08f      	sub	sp, #60	; 0x3c
 8001eb0:	af0a      	add	r7, sp, #40	; 0x28
 8001eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e10f      	b.n	80020de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f005 fd37 	bl	800794c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 ffac 	bl	8003e5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	687e      	ldr	r6, [r7, #4]
 8001f0a:	466d      	mov	r5, sp
 8001f0c:	f106 0410 	add.w	r4, r6, #16
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f20:	1d33      	adds	r3, r6, #4
 8001f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f001 fe83 	bl	8003c30 <USB_CoreInit>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 ff9a 	bl	8003e7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e04a      	b.n	8001fe4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	333d      	adds	r3, #61	; 0x3d
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	333c      	adds	r3, #60	; 0x3c
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3344      	adds	r3, #68	; 0x44
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3340      	adds	r3, #64	; 0x40
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3348      	adds	r3, #72	; 0x48
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	334c      	adds	r3, #76	; 0x4c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3354      	adds	r3, #84	; 0x54
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3af      	bcc.n	8001f4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e044      	b.n	800207e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3b5      	bcc.n	8001ff4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	687e      	ldr	r6, [r7, #4]
 8002090:	466d      	mov	r5, sp
 8002092:	f106 0410 	add.w	r4, r6, #16
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a6:	1d33      	adds	r3, r6, #4
 80020a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f001 ff32 	bl	8003f14 <USB_DevInit>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00d      	b.n	80020de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 f881 	bl	80051de <USB_DevDisconnect>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_PCD_Start+0x1c>
 80020fe:	2302      	movs	r3, #2
 8002100:	e020      	b.n	8002144 <HAL_PCD_Start+0x5e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b01      	cmp	r3, #1
 8002110:	d109      	bne.n	8002126 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fe84 	bl	8003e38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 f831 	bl	800519c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b08d      	sub	sp, #52	; 0x34
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 f8ef 	bl	8005346 <USB_GetMode>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 848a 	bne.w	8002a84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 f853 	bl	8005220 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8480 	beq.w	8002a82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f840 	bl	8005220 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f002 0202 	and.w	r2, r2, #2
 80021b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 f82e 	bl	8005220 <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d161      	bne.n	8002292 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0210 	bic.w	r2, r2, #16
 80021dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 020f 	and.w	r2, r3, #15
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	2b02      	cmp	r3, #2
 8002208:	d124      	bne.n	8002254 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d035      	beq.n	8002282 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002224:	b29b      	uxth	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	6a38      	ldr	r0, [r7, #32]
 800222a:	f002 fe65 	bl	8004ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223a:	441a      	add	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800224c:	441a      	add	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	e016      	b.n	8002282 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	0c5b      	lsrs	r3, r3, #17
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	2b06      	cmp	r3, #6
 800225e:	d110      	bne.n	8002282 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002266:	2208      	movs	r2, #8
 8002268:	4619      	mov	r1, r3
 800226a:	6a38      	ldr	r0, [r7, #32]
 800226c:	f002 fe44 	bl	8004ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227c:	441a      	add	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0210 	orr.w	r2, r2, #16
 8002290:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 ffc2 	bl	8005220 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022a6:	f040 80a7 	bne.w	80023f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 ffc7 	bl	8005246 <USB_ReadDevAllOutEpInterrupt>
 80022b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022ba:	e099      	b.n	80023f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 808e 	beq.w	80023e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 ffeb 	bl	80052ae <USB_ReadDevOutEPInterrupt>
 80022d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00c      	beq.n	80022fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fec3 	bl	8003084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	2308      	movs	r3, #8
 8002318:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800231a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 ff99 	bl	8003254 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002338:	461a      	mov	r2, r3
 800233a:	2310      	movs	r3, #16
 800233c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d030      	beq.n	80023aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d109      	bne.n	8002368 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f005 fbd6 	bl	8007b44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	2302      	movs	r3, #2
 80023a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	2320      	movs	r3, #32
 80023c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023dc:	461a      	mov	r2, r3
 80023de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3301      	adds	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f47f af62 	bne.w	80022bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 ff0f 	bl	8005220 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800240c:	f040 80db 	bne.w	80025c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f002 ff30 	bl	800527a <USB_ReadDevAllInEpInterrupt>
 800241a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002420:	e0cd      	b.n	80025be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80c2 	beq.w	80025b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f002 ff56 	bl	80052ea <USB_ReadDevInEPInterrupt>
 800243e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d057      	beq.n	80024fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	2201      	movs	r2, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	69f9      	ldr	r1, [r7, #28]
 8002466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800246a:	4013      	ands	r3, r2
 800246c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	461a      	mov	r2, r3
 800247c:	2301      	movs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d132      	bne.n	80024ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334c      	adds	r3, #76	; 0x4c
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	3348      	adds	r3, #72	; 0x48
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4419      	add	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4403      	add	r3, r0
 80024bc:	334c      	adds	r3, #76	; 0x4c
 80024be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_PCD_IRQHandler+0x3a2>
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3354      	adds	r3, #84	; 0x54
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d108      	bne.n	80024ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024e6:	461a      	mov	r2, r3
 80024e8:	2101      	movs	r1, #1
 80024ea:	f002 ff5d 	bl	80053a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f005 faaa 	bl	8007a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002510:	461a      	mov	r2, r3
 8002512:	2308      	movs	r3, #8
 8002514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252c:	461a      	mov	r2, r3
 800252e:	2310      	movs	r3, #16
 8002530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002548:	461a      	mov	r2, r3
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255a:	6a38      	ldr	r0, [r7, #32]
 800255c:	f001 fe3e 	bl	80041dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	3338      	adds	r3, #56	; 0x38
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f005 faed 	bl	8007b68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259a:	461a      	mov	r2, r3
 800259c:	2302      	movs	r3, #2
 800259e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fcdb 	bl	8002f68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af2e 	bne.w	8002422 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fe28 	bl	8005220 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025da:	d122      	bne.n	8002622 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fec3 	bl	8003390 <HAL_PCDEx_LPM_Callback>
 800260a:	e002      	b.n	8002612 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f005 fa8b 	bl	8007b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fdfa 	bl	8005220 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002636:	d112      	bne.n	800265e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d102      	bne.n	800264e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f005 fa47 	bl	8007adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800265c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f002 fddc 	bl	8005220 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	f040 80b7 	bne.w	80027e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2110      	movs	r1, #16
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fda3 	bl	80041dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	e046      	b.n	800272a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a8:	461a      	mov	r2, r3
 80026aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c0:	0151      	lsls	r1, r2, #5
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	440a      	add	r2, r1
 80026c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002702:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	440a      	add	r2, r1
 800271a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800271e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002722:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	3301      	adds	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002730:	429a      	cmp	r2, r3
 8002732:	d3b3      	bcc.n	800269c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002746:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002760:	f043 030b 	orr.w	r3, r3, #11
 8002764:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f043 030b 	orr.w	r3, r3, #11
 800277a:	6453      	str	r3, [r2, #68]	; 0x44
 800277c:	e015      	b.n	80027aa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002790:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002794:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a4:	f043 030b 	orr.w	r3, r3, #11
 80027a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ce:	461a      	mov	r2, r3
 80027d0:	f002 fdea 	bl	80053a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fd19 	bl	8005220 <USB_ReadInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d124      	bne.n	8002844 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fdaf 	bl	8005362 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fd64 	bl	80042d6 <USB_GetDevSpeed>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681c      	ldr	r4, [r3, #0]
 800281a:	f001 f9e9 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 800281e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	4620      	mov	r0, r4
 800282a:	f001 fa63 	bl	8003cf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f005 f935 	bl	8007a9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fce9 	bl	8005220 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b08      	cmp	r3, #8
 8002856:	d10a      	bne.n	800286e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f005 f912 	bl	8007a82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f002 0208 	and.w	r2, r2, #8
 800286c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fcd4 	bl	8005220 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d122      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800288e:	2301      	movs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e014      	b.n	80028be <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb27 	bl	8002f06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3e5      	bcc.n	8002894 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fca7 	bl	8005220 <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028dc:	d13b      	bne.n	8002956 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028de:	2301      	movs	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e02b      	b.n	800293c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3340      	adds	r3, #64	; 0x40
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d115      	bne.n	8002936 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800290a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	da12      	bge.n	8002936 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	333f      	adds	r3, #63	; 0x3f
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fae8 	bl	8002f06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	429a      	cmp	r2, r3
 8002944:	d3ce      	bcc.n	80028e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fc60 	bl	8005220 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296a:	d155      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296c:	2301      	movs	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	e045      	b.n	80029fe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12e      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800299a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800299c:	2b00      	cmp	r3, #0
 800299e:	da2b      	bge.n	80029f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d121      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f4:	6053      	str	r3, [r2, #4]
            break;
 80029f6:	e007      	b.n	8002a08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3301      	adds	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3b4      	bcc.n	8002972 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fbff 	bl	8005220 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d10a      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f005 f8ac 	bl	8007b8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fbe9 	bl	8005220 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d115      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 f89c 	bl	8007ba8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	e000      	b.n	8002a84 <HAL_PCD_IRQHandler+0x938>
      return;
 8002a82:	bf00      	nop
    }
  }
}
 8002a84:	3734      	adds	r7, #52	; 0x34
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_SetAddress+0x1a>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e013      	b.n	8002acc <HAL_PCD_SetAddress+0x42>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fb47 	bl	8005150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	70fb      	strb	r3, [r7, #3]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	803b      	strh	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da0f      	bge.n	8002b1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3338      	adds	r3, #56	; 0x38
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	705a      	strb	r2, [r3, #1]
 8002b18:	e00f      	b.n	8002b3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b46:	883a      	ldrh	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	78ba      	ldrb	r2, [r7, #2]
 8002b50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b64:	78bb      	ldrb	r3, [r7, #2]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_PCD_EP_Open+0xaa>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e00e      	b.n	8002b9c <HAL_PCD_EP_Open+0xc8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 fbc7 	bl	8004320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da0f      	bge.n	8002bd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	3338      	adds	r3, #56	; 0x38
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	705a      	strb	r2, [r3, #1]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_PCD_EP_Close+0x6e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e00e      	b.n	8002c30 <HAL_PCD_EP_Close+0x8c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fc05 	bl	8004430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	460b      	mov	r3, r1
 8002c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d102      	bne.n	8002c94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	f001 fee4 	bl	8004a78 <USB_EP0StartXfer>
 8002cb0:	e008      	b.n	8002cc4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	f001 fc92 	bl	80045e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cf0:	681b      	ldr	r3, [r3, #0]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	3338      	adds	r3, #56	; 0x38
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6979      	ldr	r1, [r7, #20]
 8002d70:	f001 fe82 	bl	8004a78 <USB_EP0StartXfer>
 8002d74:	e008      	b.n	8002d88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	f001 fc30 	bl	80045e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d901      	bls.n	8002db0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e050      	b.n	8002e52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0f      	bge.n	8002dd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3338      	adds	r3, #56	; 0x38
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]
 8002dd6:	e00d      	b.n	8002df4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_PCD_EP_SetStall+0x82>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e01e      	b.n	8002e52 <HAL_PCD_EP_SetStall+0xc0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 f8c0 	bl	8004fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e42:	461a      	mov	r2, r3
 8002e44:	f002 fab0 	bl	80053a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d901      	bls.n	8002e78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e042      	b.n	8002efe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_PCD_EP_ClrStall+0x86>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e00e      	b.n	8002efe <HAL_PCD_EP_ClrStall+0xa4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 f8c8 	bl	8005084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0c      	bge.n	8002f34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3338      	adds	r3, #56	; 0x38
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e00c      	b.n	8002f4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 fee7 	bl	8004d28 <USB_EPStopXfer>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	3338      	adds	r3, #56	; 0x38
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d901      	bls.n	8002fa0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e06c      	b.n	800307a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d902      	bls.n	8002fbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	3303      	adds	r3, #3
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc4:	e02b      	b.n	800301e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d902      	bls.n	8002fe2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4603      	mov	r3, r0
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f001 ff3b 	bl	8004e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	b29b      	uxth	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d809      	bhi.n	8003048 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800303c:	429a      	cmp	r2, r3
 800303e:	d203      	bcs.n	8003048 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1be      	bne.n	8002fc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	429a      	cmp	r2, r3
 8003052:	d811      	bhi.n	8003078 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	2201      	movs	r2, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	43db      	mvns	r3, r3
 800306e:	6939      	ldr	r1, [r7, #16]
 8003070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003074:	4013      	ands	r3, r2
 8003076:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	333c      	adds	r3, #60	; 0x3c
 800309c:	3304      	adds	r3, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d17b      	bne.n	80031b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	f240 80b9 	bls.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b3 	beq.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e0a7      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	2320      	movs	r3, #32
 800310a:	6093      	str	r3, [r2, #8]
 800310c:	e098      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8093 	bne.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90f      	bls.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e07e      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	440b      	add	r3, r1
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d114      	bne.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800318c:	461a      	mov	r2, r3
 800318e:	2101      	movs	r1, #1
 8003190:	f002 f90a 	bl	80053a8 <USB_EP0_OutStart>
 8003194:	e006      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f004 fc34 	bl	8007a18 <HAL_PCD_DataOutStageCallback>
 80031b0:	e046      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d124      	bne.n	8003204 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e032      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	2320      	movs	r3, #32
 80031f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f004 fc0b 	bl	8007a18 <HAL_PCD_DataOutStageCallback>
 8003202:	e01d      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800322c:	461a      	mov	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f002 f8ba 	bl	80053a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f004 fbec 	bl	8007a18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	4f54300a 	.word	0x4f54300a
 8003250:	4f54310a 	.word	0x4f54310a

08003254 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	333c      	adds	r3, #60	; 0x3c
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d90e      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f004 fba3 	bl	80079f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90c      	bls.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c8:	461a      	mov	r2, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	f002 f86c 	bl	80053a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	4f54300a 	.word	0x4f54300a

080032e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	0419      	lsls	r1, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e028      	b.n	8003360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e00d      	b.n	800333e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d3ec      	bcc.n	8003322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	0418      	lsls	r0, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4302      	orrs	r2, r0
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e267      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e242      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fb42 	bl	8000ae8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fb3e 	bl	8000ae8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e207      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fb2e 	bl	8000ae8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fb2a 	bl	8000ae8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f3      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c7      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fae3 	bl	8000ae8 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fd fadf 	bl	8000ae8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a8      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fac2 	bl	8000ae8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fd fabe 	bl	8000ae8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e187      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd faa2 	bl	8000ae8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fa9e 	bl	8000ae8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e167      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fa8b 	bl	8000ae8 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd fa87 	bl	8000ae8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e150      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7d      	ldr	r3, [pc, #500]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a7c      	ldr	r2, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fd fa47 	bl	8000ae8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fa43 	bl	8000ae8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e10c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5b      	ldr	r2, [pc, #364]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fa08 	bl	8000ae8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd fa04 	bl	8000ae8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0cb      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fd f9f2 	bl	8000ae8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fd f9ee 	bl	8000ae8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0b5      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a1 	beq.w	8003888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d05c      	beq.n	800380c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d141      	bne.n	80037de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd f9c2 	bl	8000ae8 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd f9be 	bl	8000ae8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e087      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	491b      	ldr	r1, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd f997 	bl	8000ae8 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd f993 	bl	8000ae8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e05c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x416>
 80037dc:	e054      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd f980 	bl	8000ae8 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd f97c 	bl	8000ae8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e045      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
 800380a:	e03d      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e038      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d028      	beq.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d121      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fd f8ae 	bl	8000ae8 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fd f8aa 	bl	8000ae8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd f80e 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	0800893c 	.word	0x0800893c
 8003a5c:	20000020 	.word	0x20000020
 8003a60:	20000024 	.word	0x20000024

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b090      	sub	sp, #64	; 0x40
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	2300      	movs	r3, #0
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a74:	2300      	movs	r3, #0
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80a1 	bhi.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e09b      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a9c:	e09b      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa2:	e098      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003acc:	2100      	movs	r1, #0
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad0:	fb03 f201 	mul.w	r2, r3, r1
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	4a43      	ldr	r2, [pc, #268]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ade:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	4413      	add	r3, r2
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	2200      	movs	r2, #0
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003afe:	f7fc fbbf 	bl	8000280 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4613      	mov	r3, r2
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0a:	e053      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	2200      	movs	r2, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	617a      	str	r2, [r7, #20]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b1e:	f04f 0b00 	mov.w	fp, #0
 8003b22:	4652      	mov	r2, sl
 8003b24:	465b      	mov	r3, fp
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b56:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	00eb      	lsls	r3, r5, #3
 8003b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6c:	00e2      	lsls	r2, r4, #3
 8003b6e:	4614      	mov	r4, r2
 8003b70:	461d      	mov	r5, r3
 8003b72:	eb14 030a 	adds.w	r3, r4, sl
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	eb45 030b 	adc.w	r3, r5, fp
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	028b      	lsls	r3, r1, #10
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b94:	4621      	mov	r1, r4
 8003b96:	028a      	lsls	r2, r1, #10
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	60fa      	str	r2, [r7, #12]
 8003ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba8:	f7fc fb6a 	bl	8000280 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3740      	adds	r7, #64	; 0x40
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	017d7840 	.word	0x017d7840

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000020 	.word	0x20000020

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c0c:	f7ff fff0 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0a9b      	lsrs	r3, r3, #10
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	0800894c 	.word	0x0800894c

08003c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c30:	b084      	sub	sp, #16
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	f107 001c 	add.w	r0, r7, #28
 8003c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d122      	bne.n	8003c8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f001 fbee 	bl	8005464 <USB_CoreReset>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e01a      	b.n	8003cc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f001 fbe2 	bl	8005464 <USB_CoreReset>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb6:	e005      	b.n	8003cc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10b      	bne.n	8003ce2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f043 0206 	orr.w	r2, r3, #6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cee:	b004      	add	sp, #16
 8003cf0:	4770      	bx	lr
	...

08003cf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d165      	bne.n	8003dd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a41      	ldr	r2, [pc, #260]	; (8003e10 <USB_SetTurnaroundTime+0x11c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d906      	bls.n	8003d1e <USB_SetTurnaroundTime+0x2a>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <USB_SetTurnaroundTime+0x120>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d202      	bcs.n	8003d1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d18:	230f      	movs	r3, #15
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e062      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <USB_SetTurnaroundTime+0x120>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d306      	bcc.n	8003d34 <USB_SetTurnaroundTime+0x40>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <USB_SetTurnaroundTime+0x124>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d202      	bcs.n	8003d34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d2e:	230e      	movs	r3, #14
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e057      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <USB_SetTurnaroundTime+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d306      	bcc.n	8003d4a <USB_SetTurnaroundTime+0x56>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a37      	ldr	r2, [pc, #220]	; (8003e1c <USB_SetTurnaroundTime+0x128>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d202      	bcs.n	8003d4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d44:	230d      	movs	r3, #13
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e04c      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <USB_SetTurnaroundTime+0x128>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d306      	bcc.n	8003d60 <USB_SetTurnaroundTime+0x6c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <USB_SetTurnaroundTime+0x12c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d802      	bhi.n	8003d60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e041      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a2f      	ldr	r2, [pc, #188]	; (8003e20 <USB_SetTurnaroundTime+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d906      	bls.n	8003d76 <USB_SetTurnaroundTime+0x82>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <USB_SetTurnaroundTime+0x130>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d802      	bhi.n	8003d76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d70:	230b      	movs	r3, #11
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e036      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <USB_SetTurnaroundTime+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d906      	bls.n	8003d8c <USB_SetTurnaroundTime+0x98>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <USB_SetTurnaroundTime+0x134>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d802      	bhi.n	8003d8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d86:	230a      	movs	r3, #10
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e02b      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <USB_SetTurnaroundTime+0x134>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d906      	bls.n	8003da2 <USB_SetTurnaroundTime+0xae>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <USB_SetTurnaroundTime+0x138>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d202      	bcs.n	8003da2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d9c:	2309      	movs	r3, #9
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e020      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <USB_SetTurnaroundTime+0x138>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d306      	bcc.n	8003db8 <USB_SetTurnaroundTime+0xc4>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <USB_SetTurnaroundTime+0x13c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d802      	bhi.n	8003db8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003db2:	2308      	movs	r3, #8
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e015      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <USB_SetTurnaroundTime+0x13c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d906      	bls.n	8003dce <USB_SetTurnaroundTime+0xda>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <USB_SetTurnaroundTime+0x140>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d202      	bcs.n	8003dce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dc8:	2307      	movs	r3, #7
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e00a      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dce:	2306      	movs	r3, #6
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e007      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dda:	2309      	movs	r3, #9
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e001      	b.n	8003de4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003de0:	2309      	movs	r3, #9
 8003de2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	029b      	lsls	r3, r3, #10
 8003df8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	00d8acbf 	.word	0x00d8acbf
 8003e14:	00e4e1c0 	.word	0x00e4e1c0
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	01067380 	.word	0x01067380
 8003e20:	011a499f 	.word	0x011a499f
 8003e24:	01312cff 	.word	0x01312cff
 8003e28:	014ca43f 	.word	0x014ca43f
 8003e2c:	016e3600 	.word	0x016e3600
 8003e30:	01a6ab1f 	.word	0x01a6ab1f
 8003e34:	01e84800 	.word	0x01e84800

08003e38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d115      	bne.n	8003eca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7fc fe28 	bl	8000b00 <HAL_Delay>
      ms++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 fa45 	bl	8005346 <USB_GetMode>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d01e      	beq.n	8003f00 <USB_SetCurrentMode+0x84>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b31      	cmp	r3, #49	; 0x31
 8003ec6:	d9f0      	bls.n	8003eaa <USB_SetCurrentMode+0x2e>
 8003ec8:	e01a      	b.n	8003f00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d115      	bne.n	8003efc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003edc:	2001      	movs	r0, #1
 8003ede:	f7fc fe0f 	bl	8000b00 <HAL_Delay>
      ms++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fa2c 	bl	8005346 <USB_GetMode>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <USB_SetCurrentMode+0x84>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b31      	cmp	r3, #49	; 0x31
 8003ef8:	d9f0      	bls.n	8003edc <USB_SetCurrentMode+0x60>
 8003efa:	e001      	b.n	8003f00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e005      	b.n	8003f0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b32      	cmp	r3, #50	; 0x32
 8003f04:	d101      	bne.n	8003f0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f14:	b084      	sub	sp, #16
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e009      	b.n	8003f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0e      	cmp	r3, #14
 8003f4c:	d9f2      	bls.n	8003f34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11c      	bne.n	8003f8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f8c:	e00b      	b.n	8003fa6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fac:	461a      	mov	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	680b      	ldr	r3, [r1, #0]
 8003fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10c      	bne.n	8003fe6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f965 	bl	80042a4 <USB_SetDevSpeed>
 8003fda:	e008      	b.n	8003fee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fdc:	2101      	movs	r1, #1
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f960 	bl	80042a4 <USB_SetDevSpeed>
 8003fe4:	e003      	b.n	8003fee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f95b 	bl	80042a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fee:	2110      	movs	r1, #16
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8f3 	bl	80041dc <USB_FlushTxFifo>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f91f 	bl	8004244 <USB_FlushRxFifo>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e043      	b.n	80040c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004050:	d118      	bne.n	8004084 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e013      	b.n	8004096 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e008      	b.n	8004096 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	461a      	mov	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	461a      	mov	r2, r3
 80040b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3301      	adds	r3, #1
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3b7      	bcc.n	800403a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e043      	b.n	8004158 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e6:	d118      	bne.n	800411a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e013      	b.n	800412c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	461a      	mov	r2, r3
 8004112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e008      	b.n	800412c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	429a      	cmp	r2, r3
 800415e:	d3b7      	bcc.n	80040d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <USB_DevInit+0x2c4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f043 0208 	orr.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d4:	b004      	add	sp, #16
 80041d6:	4770      	bx	lr
 80041d8:	803c3800 	.word	0x803c3800

080041dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <USB_FlushTxFifo+0x64>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e01b      	b.n	8004234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	daf2      	bge.n	80041ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	019b      	lsls	r3, r3, #6
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a08      	ldr	r2, [pc, #32]	; (8004240 <USB_FlushTxFifo+0x64>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e006      	b.n	8004234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b20      	cmp	r3, #32
 8004230:	d0f0      	beq.n	8004214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	00030d40 	.word	0x00030d40

08004244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <USB_FlushRxFifo+0x5c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e018      	b.n	8004294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	daf2      	bge.n	8004250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2210      	movs	r2, #16
 8004272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <USB_FlushRxFifo+0x5c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e006      	b.n	8004294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b10      	cmp	r3, #16
 8004290:	d0f0      	beq.n	8004274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	00030d40 	.word	0x00030d40

080042a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0306 	and.w	r3, r3, #6
 80042ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
 80042fa:	e00a      	b.n	8004312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d002      	beq.n	8004308 <USB_GetDevSpeed+0x32>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b06      	cmp	r3, #6
 8004306:	d102      	bne.n	800430e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004308:	2302      	movs	r3, #2
 800430a:	75fb      	strb	r3, [r7, #23]
 800430c:	e001      	b.n	8004312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800430e:	230f      	movs	r3, #15
 8004310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d13a      	bne.n	80043b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	b29b      	uxth	r3, r3
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435a:	4313      	orrs	r3, r2
 800435c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d155      	bne.n	8004420 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	791b      	ldrb	r3, [r3, #4]
 800438e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	059b      	lsls	r3, r3, #22
 8004396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004398:	4313      	orrs	r3, r2
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e036      	b.n	8004420 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	2101      	movs	r1, #1
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11a      	bne.n	8004420 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004406:	430b      	orrs	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d161      	bne.n	8004510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004462:	d11f      	bne.n	80044a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c4:	4013      	ands	r3, r2
 80044c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e8:	4013      	ands	r3, r2
 80044ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	0159      	lsls	r1, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	440b      	add	r3, r1
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	4619      	mov	r1, r3
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <USB_DeactivateEndpoint+0x1b0>)
 800450a:	4013      	ands	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
 800450e:	e060      	b.n	80045d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004526:	d11f      	bne.n	8004568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004588:	4013      	ands	r3, r2
 800458a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	43db      	mvns	r3, r3
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ac:	4013      	ands	r3, r2
 80045ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	4619      	mov	r1, r3
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <USB_DeactivateEndpoint+0x1b4>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	ec337800 	.word	0xec337800
 80045e4:	eff37800 	.word	0xeff37800

080045e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 815c 	bne.w	80048c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d132      	bne.n	8004678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004670:	0cdb      	lsrs	r3, r3, #19
 8004672:	04db      	lsls	r3, r3, #19
 8004674:	6113      	str	r3, [r2, #16]
 8004676:	e074      	b.n	8004762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	0cdb      	lsrs	r3, r3, #19
 8004694:	04db      	lsls	r3, r3, #19
 8004696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	440b      	add	r3, r1
 80046d4:	1e59      	subs	r1, r3, #1
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	fbb1 f3f3 	udiv	r3, r1, r3
 80046de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046e0:	4b9d      	ldr	r3, [pc, #628]	; (8004958 <USB_EPStartXfer+0x370>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	0148      	lsls	r0, r1, #5
 80046e8:	69f9      	ldr	r1, [r7, #28]
 80046ea:	4401      	add	r1, r0
 80046ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046f0:	4313      	orrs	r3, r2
 80046f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	0148      	lsls	r0, r1, #5
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	4401      	add	r1, r0
 8004712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004716:	4313      	orrs	r3, r2
 8004718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d11f      	bne.n	8004762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d14b      	bne.n	8004800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	461a      	mov	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	791b      	ldrb	r3, [r3, #4]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d128      	bne.n	80047de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d110      	bne.n	80047be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e00f      	b.n	80047de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e133      	b.n	8004a68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800481e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d015      	beq.n	8004854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 811b 	beq.w	8004a68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800484e:	4313      	orrs	r3, r2
 8004850:	634b      	str	r3, [r1, #52]	; 0x34
 8004852:	e109      	b.n	8004a68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d110      	bne.n	8004886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e00f      	b.n	80048a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	b298      	uxth	r0, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4603      	mov	r3, r0
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fade 	bl	8004e7c <USB_WritePacket>
 80048c0:	e0d2      	b.n	8004a68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048dc:	0cdb      	lsrs	r3, r3, #19
 80048de:	04db      	lsls	r3, r3, #19
 80048e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004904:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d126      	bne.n	800495c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	0148      	lsls	r0, r1, #5
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	4401      	add	r1, r0
 800492c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004952:	6113      	str	r3, [r2, #16]
 8004954:	e03a      	b.n	80049cc <USB_EPStartXfer+0x3e4>
 8004956:	bf00      	nop
 8004958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4413      	add	r3, r2
 8004966:	1e5a      	subs	r2, r3, #1
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	8afa      	ldrh	r2, [r7, #22]
 8004978:	fb03 f202 	mul.w	r2, r3, r2
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	04d9      	lsls	r1, r3, #19
 8004992:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <USB_EPStartXfer+0x48c>)
 8004994:	400b      	ands	r3, r1
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	0148      	lsls	r0, r1, #5
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	4401      	add	r1, r0
 800499e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049a2:	4313      	orrs	r3, r2
 80049a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	0148      	lsls	r0, r1, #5
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	4401      	add	r1, r0
 80049c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10d      	bne.n	80049ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	460a      	mov	r2, r1
 80049ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	791b      	ldrb	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d128      	bne.n	8004a48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d110      	bne.n	8004a28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00f      	b.n	8004a48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	1ff80000 	.word	0x1ff80000

08004a78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 80ce 	bne.w	8004c36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d132      	bne.n	8004b08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	0cdb      	lsrs	r3, r3, #19
 8004b02:	04db      	lsls	r3, r3, #19
 8004b04:	6113      	str	r3, [r2, #16]
 8004b06:	e04e      	b.n	8004ba6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b22:	0cdb      	lsrs	r3, r3, #19
 8004b24:	04db      	lsls	r3, r3, #19
 8004b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d903      	bls.n	8004b60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b96:	6939      	ldr	r1, [r7, #16]
 8004b98:	0148      	lsls	r0, r1, #5
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	4401      	add	r1, r0
 8004b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d11e      	bne.n	8004bea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e097      	b.n	8004d1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8083 	beq.w	8004d1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	6979      	ldr	r1, [r7, #20]
 8004c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c30:	4313      	orrs	r3, r2
 8004c32:	634b      	str	r3, [r1, #52]	; 0x34
 8004c34:	e071      	b.n	8004d1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c50:	0cdb      	lsrs	r3, r3, #19
 8004c52:	04db      	lsls	r3, r3, #19
 8004c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc8:	6939      	ldr	r1, [r7, #16]
 8004cca:	0148      	lsls	r0, r1, #5
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	4401      	add	r1, r0
 8004cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10d      	bne.n	8004cfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6919      	ldr	r1, [r3, #16]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d14a      	bne.n	8004ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d5e:	f040 8086 	bne.w	8004e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d902      	bls.n	8004dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dbe:	e056      	b.n	8004e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd8:	d0e7      	beq.n	8004daa <USB_EPStopXfer+0x82>
 8004dda:	e048      	b.n	8004e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df4:	d13b      	bne.n	8004e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d902      	bls.n	8004e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
          break;
 8004e52:	e00c      	b.n	8004e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6c:	d0e7      	beq.n	8004e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	4611      	mov	r1, r2
 8004e88:	461a      	mov	r2, r3
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	71fb      	strb	r3, [r7, #7]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d123      	bne.n	8004eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ea2:	88bb      	ldrh	r3, [r7, #4]
 8004ea4:	3303      	adds	r3, #3
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e018      	b.n	8004ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	031a      	lsls	r2, r3, #12
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3e2      	bcc.n	8004eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3724      	adds	r7, #36	; 0x24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b08b      	sub	sp, #44	; 0x2c
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	089b      	lsrs	r3, r3, #2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	e014      	b.n	8004f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	3301      	adds	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	3301      	adds	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3301      	adds	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	3301      	adds	r3, #1
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	6a3a      	ldr	r2, [r7, #32]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d3e6      	bcc.n	8004f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f56:	8bfb      	ldrh	r3, [r7, #30]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01e      	beq.n	8004f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f66:	461a      	mov	r2, r3
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	701a      	strb	r2, [r3, #0]
      i++;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	3301      	adds	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f8e:	8bfb      	ldrh	r3, [r7, #30]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f94:	8bfb      	ldrh	r3, [r7, #30]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ea      	bne.n	8004f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	372c      	adds	r7, #44	; 0x2c
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d12c      	bne.n	800501e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db12      	blt.n	8004ffc <USB_EPSetStall+0x54>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00f      	beq.n	8004ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e02b      	b.n	8005076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	db12      	blt.n	8005056 <USB_EPSetStall+0xae>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00f      	beq.n	8005056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d128      	bne.n	80050f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d003      	beq.n	80050d0 <USB_EPClearStall+0x4c>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d138      	bne.n	8005142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e027      	b.n	8005142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	791b      	ldrb	r3, [r3, #4]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d003      	beq.n	8005122 <USB_EPClearStall+0x9e>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d10f      	bne.n	8005142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f023 0302 	bic.w	r3, r3, #2
 80051ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051f8:	f023 0303 	bic.w	r3, r3, #3
 80051fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	0c1b      	lsrs	r3, r3, #16
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	b29b      	uxth	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052dc:	68bb      	ldr	r3, [r7, #8]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	01db      	lsls	r3, r3, #7
 800531c:	b2db      	uxtb	r3, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005338:	68bb      	ldr	r3, [r7, #8]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	333c      	adds	r3, #60	; 0x3c
 80053be:	3304      	adds	r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <USB_EP0_OutStart+0xb8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d90a      	bls.n	80053e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053dc:	d101      	bne.n	80053e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e037      	b.n	8005452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	461a      	mov	r2, r3
 80053ea:	2300      	movs	r3, #0
 80053ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f043 0318 	orr.w	r3, r3, #24
 8005414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10f      	bne.n	8005450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800544e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	4f54300a 	.word	0x4f54300a

08005464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <USB_CoreReset+0x64>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e01b      	b.n	80054ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	daf2      	bge.n	8005470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <USB_CoreReset+0x64>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d0f0      	beq.n	800549a <USB_CoreReset+0x36>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	00030d40 	.word	0x00030d40

080054cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054dc:	f002 fcfc 	bl	8007ed8 <USBD_static_malloc>
 80054e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	32b0      	adds	r2, #176	; 0xb0
 80054f2:	2100      	movs	r1, #0
 80054f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0d4      	b.n	80056a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005500:	2100      	movs	r1, #0
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f002 fd56 	bl	8007fb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32b0      	adds	r2, #176	; 0xb0
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32b0      	adds	r2, #176	; 0xb0
 8005522:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7c1b      	ldrb	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d138      	bne.n	80055a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005534:	4b5e      	ldr	r3, [pc, #376]	; (80056b0 <USBD_CDC_Init+0x1e4>)
 8005536:	7819      	ldrb	r1, [r3, #0]
 8005538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553c:	2202      	movs	r2, #2
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 fba7 	bl	8007c92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005544:	4b5a      	ldr	r3, [pc, #360]	; (80056b0 <USBD_CDC_Init+0x1e4>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 020f 	and.w	r2, r3, #15
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	2201      	movs	r2, #1
 800555c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800555e:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 8005560:	7819      	ldrb	r1, [r3, #0]
 8005562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005566:	2202      	movs	r2, #2
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fb92 	bl	8007c92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800556e:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f003 020f 	and.w	r2, r3, #15
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005586:	2201      	movs	r2, #1
 8005588:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800558a:	4b4b      	ldr	r3, [pc, #300]	; (80056b8 <USBD_CDC_Init+0x1ec>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3326      	adds	r3, #38	; 0x26
 80055a0:	2210      	movs	r2, #16
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e035      	b.n	8005612 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055a6:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <USBD_CDC_Init+0x1e4>)
 80055a8:	7819      	ldrb	r1, [r3, #0]
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	2202      	movs	r2, #2
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f002 fb6f 	bl	8007c92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <USBD_CDC_Init+0x1e4>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	3324      	adds	r3, #36	; 0x24
 80055ca:	2201      	movs	r2, #1
 80055cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055ce:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 80055d0:	7819      	ldrb	r1, [r3, #0]
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	2202      	movs	r2, #2
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f002 fb5b 	bl	8007c92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055dc:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055f4:	2201      	movs	r2, #1
 80055f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055f8:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <USBD_CDC_Init+0x1ec>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	3326      	adds	r3, #38	; 0x26
 800560e:	2210      	movs	r2, #16
 8005610:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005612:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <USBD_CDC_Init+0x1ec>)
 8005614:	7819      	ldrb	r1, [r3, #0]
 8005616:	2308      	movs	r3, #8
 8005618:	2203      	movs	r2, #3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f002 fb39 	bl	8007c92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <USBD_CDC_Init+0x1ec>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 020f 	and.w	r2, r3, #15
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	3324      	adds	r3, #36	; 0x24
 8005636:	2201      	movs	r2, #1
 8005638:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	33b0      	adds	r3, #176	; 0xb0
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005670:	2302      	movs	r3, #2
 8005672:	e018      	b.n	80056a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7c1b      	ldrb	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 800567e:	7819      	ldrb	r1, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f002 fbf0 	bl	8007e70 <USBD_LL_PrepareReceive>
 8005690:	e008      	b.n	80056a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <USBD_CDC_Init+0x1e8>)
 8005694:	7819      	ldrb	r1, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f002 fbe6 	bl	8007e70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200000b3 	.word	0x200000b3
 80056b4:	200000b4 	.word	0x200000b4
 80056b8:	200000b5 	.word	0x200000b5

080056bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056c8:	4b3a      	ldr	r3, [pc, #232]	; (80057b4 <USBD_CDC_DeInit+0xf8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f002 fb05 	bl	8007cde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056d4:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <USBD_CDC_DeInit+0xf8>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	3324      	adds	r3, #36	; 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056ee:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <USBD_CDC_DeInit+0xfc>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f002 faf2 	bl	8007cde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056fa:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <USBD_CDC_DeInit+0xfc>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005712:	2200      	movs	r2, #0
 8005714:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005716:	4b29      	ldr	r3, [pc, #164]	; (80057bc <USBD_CDC_DeInit+0x100>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f002 fade 	bl	8007cde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <USBD_CDC_DeInit+0x100>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800573c:	4b1f      	ldr	r3, [pc, #124]	; (80057bc <USBD_CDC_DeInit+0x100>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	3326      	adds	r3, #38	; 0x26
 8005752:	2200      	movs	r2, #0
 8005754:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32b0      	adds	r2, #176	; 0xb0
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01f      	beq.n	80057a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	33b0      	adds	r3, #176	; 0xb0
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	32b0      	adds	r2, #176	; 0xb0
 8005786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578a:	4618      	mov	r0, r3
 800578c:	f002 fbb2 	bl	8007ef4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	32b0      	adds	r2, #176	; 0xb0
 800579a:	2100      	movs	r1, #0
 800579c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200000b3 	.word	0x200000b3
 80057b8:	200000b4 	.word	0x200000b4
 80057bc:	200000b5 	.word	0x200000b5

080057c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	32b0      	adds	r2, #176	; 0xb0
 80057d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0bf      	b.n	8005970 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d050      	beq.n	800589e <USBD_CDC_Setup+0xde>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f040 80af 	bne.w	8005960 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	88db      	ldrh	r3, [r3, #6]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d03a      	beq.n	8005880 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b25b      	sxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	da1b      	bge.n	800584c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	33b0      	adds	r3, #176	; 0xb0
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800582a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	88d2      	ldrh	r2, [r2, #6]
 8005830:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	88db      	ldrh	r3, [r3, #6]
 8005836:	2b07      	cmp	r3, #7
 8005838:	bf28      	it	cs
 800583a:	2307      	movcs	r3, #7
 800583c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	89fa      	ldrh	r2, [r7, #14]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fd89 	bl	800735c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800584a:	e090      	b.n	800596e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	785a      	ldrb	r2, [r3, #1]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	88db      	ldrh	r3, [r3, #6]
 800585a:	2b3f      	cmp	r3, #63	; 0x3f
 800585c:	d803      	bhi.n	8005866 <USBD_CDC_Setup+0xa6>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	88db      	ldrh	r3, [r3, #6]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	e000      	b.n	8005868 <USBD_CDC_Setup+0xa8>
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005876:	461a      	mov	r2, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fd9b 	bl	80073b4 <USBD_CtlPrepareRx>
      break;
 800587e:	e076      	b.n	800596e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	33b0      	adds	r3, #176	; 0xb0
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	7850      	ldrb	r0, [r2, #1]
 8005896:	2200      	movs	r2, #0
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	4798      	blx	r3
      break;
 800589c:	e067      	b.n	800596e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b0b      	cmp	r3, #11
 80058a4:	d851      	bhi.n	800594a <USBD_CDC_Setup+0x18a>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <USBD_CDC_Setup+0xec>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	08005959 	.word	0x08005959
 80058b4:	0800594b 	.word	0x0800594b
 80058b8:	0800594b 	.word	0x0800594b
 80058bc:	0800594b 	.word	0x0800594b
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	0800594b 	.word	0x0800594b
 80058c8:	0800594b 	.word	0x0800594b
 80058cc:	0800594b 	.word	0x0800594b
 80058d0:	0800594b 	.word	0x0800594b
 80058d4:	08005907 	.word	0x08005907
 80058d8:	08005931 	.word	0x08005931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d107      	bne.n	80058f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058e8:	f107 030a 	add.w	r3, r7, #10
 80058ec:	2202      	movs	r2, #2
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fd33 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058f6:	e032      	b.n	800595e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fcbd 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	75fb      	strb	r3, [r7, #23]
          break;
 8005904:	e02b      	b.n	800595e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d107      	bne.n	8005922 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005912:	f107 030d 	add.w	r3, r7, #13
 8005916:	2201      	movs	r2, #1
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fd1e 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005920:	e01d      	b.n	800595e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fca8 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 800592a:	2303      	movs	r3, #3
 800592c:	75fb      	strb	r3, [r7, #23]
          break;
 800592e:	e016      	b.n	800595e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d00f      	beq.n	800595c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fc9b 	bl	800727a <USBD_CtlError>
            ret = USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005948:	e008      	b.n	800595c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 fc94 	bl	800727a <USBD_CtlError>
          ret = USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	75fb      	strb	r3, [r7, #23]
          break;
 8005956:	e002      	b.n	800595e <USBD_CDC_Setup+0x19e>
          break;
 8005958:	bf00      	nop
 800595a:	e008      	b.n	800596e <USBD_CDC_Setup+0x1ae>
          break;
 800595c:	bf00      	nop
      }
      break;
 800595e:	e006      	b.n	800596e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fc89 	bl	800727a <USBD_CtlError>
      ret = USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  return (uint8_t)ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800598a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	32b0      	adds	r2, #176	; 0xb0
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800599e:	2303      	movs	r3, #3
 80059a0:	e065      	b.n	8005a6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32b0      	adds	r2, #176	; 0xb0
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3318      	adds	r3, #24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02f      	beq.n	8005a2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	f003 020f 	and.w	r2, r3, #15
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	3318      	adds	r3, #24
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 010f 	and.w	r1, r3, #15
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	460b      	mov	r3, r1
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4403      	add	r3, r0
 80059f4:	3348      	adds	r3, #72	; 0x48
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d112      	bne.n	8005a2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	3318      	adds	r3, #24
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a1e:	78f9      	ldrb	r1, [r7, #3]
 8005a20:	2300      	movs	r3, #0
 8005a22:	2200      	movs	r2, #0
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f002 fa02 	bl	8007e2e <USBD_LL_Transmit>
 8005a2a:	e01f      	b.n	8005a6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	33b0      	adds	r3, #176	; 0xb0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	33b0      	adds	r3, #176	; 0xb0
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	32b0      	adds	r2, #176	; 0xb0
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	32b0      	adds	r2, #176	; 0xb0
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e01a      	b.n	8005ade <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f002 fa00 	bl	8007eb2 <USBD_LL_GetRxDataSize>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	33b0      	adds	r3, #176	; 0xb0
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	32b0      	adds	r2, #176	; 0xb0
 8005af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e025      	b.n	8005b54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	33b0      	adds	r3, #176	; 0xb0
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01a      	beq.n	8005b52 <USBD_CDC_EP0_RxReady+0x6c>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d015      	beq.n	8005b52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	33b0      	adds	r3, #176	; 0xb0
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b46:	b292      	uxth	r2, r2
 8005b48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b64:	2182      	movs	r1, #130	; 0x82
 8005b66:	4818      	ldr	r0, [pc, #96]	; (8005bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b68:	f000 fd4f 	bl	800660a <USBD_GetEpDesc>
 8005b6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4815      	ldr	r0, [pc, #84]	; (8005bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b72:	f000 fd4a 	bl	800660a <USBD_GetEpDesc>
 8005b76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b78:	2181      	movs	r1, #129	; 0x81
 8005b7a:	4813      	ldr	r0, [pc, #76]	; (8005bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b7c:	f000 fd45 	bl	800660a <USBD_GetEpDesc>
 8005b80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9c:	711a      	strb	r2, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb0:	711a      	strb	r2, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2243      	movs	r2, #67	; 0x43
 8005bba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000070 	.word	0x20000070

08005bcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bd4:	2182      	movs	r1, #130	; 0x82
 8005bd6:	4818      	ldr	r0, [pc, #96]	; (8005c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bd8:	f000 fd17 	bl	800660a <USBD_GetEpDesc>
 8005bdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bde:	2101      	movs	r1, #1
 8005be0:	4815      	ldr	r0, [pc, #84]	; (8005c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005be2:	f000 fd12 	bl	800660a <USBD_GetEpDesc>
 8005be6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005be8:	2181      	movs	r1, #129	; 0x81
 8005bea:	4813      	ldr	r0, [pc, #76]	; (8005c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bec:	f000 fd0d 	bl	800660a <USBD_GetEpDesc>
 8005bf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2200      	movs	r2, #0
 8005c08:	711a      	strb	r2, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f042 0202 	orr.w	r2, r2, #2
 8005c10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	711a      	strb	r2, [r3, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f042 0202 	orr.w	r2, r2, #2
 8005c24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2243      	movs	r2, #67	; 0x43
 8005c2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000070 	.word	0x20000070

08005c3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c44:	2182      	movs	r1, #130	; 0x82
 8005c46:	4818      	ldr	r0, [pc, #96]	; (8005ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c48:	f000 fcdf 	bl	800660a <USBD_GetEpDesc>
 8005c4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4815      	ldr	r0, [pc, #84]	; (8005ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c52:	f000 fcda 	bl	800660a <USBD_GetEpDesc>
 8005c56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c58:	2181      	movs	r1, #129	; 0x81
 8005c5a:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c5c:	f000 fcd5 	bl	800660a <USBD_GetEpDesc>
 8005c60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7c:	711a      	strb	r2, [r3, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d006      	beq.n	8005c96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c90:	711a      	strb	r2, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2243      	movs	r2, #67	; 0x43
 8005c9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000070 	.word	0x20000070

08005cac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cba:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	2000002c 	.word	0x2000002c

08005ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e009      	b.n	8005cf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	33b0      	adds	r3, #176	; 0xb0
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	32b0      	adds	r2, #176	; 0xb0
 8005d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e008      	b.n	8005d38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	; 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e004      	b.n	8005d72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32b0      	adds	r2, #176	; 0xb0
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32b0      	adds	r2, #176	; 0xb0
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e025      	b.n	8005dfe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11f      	bne.n	8005dfc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <USBD_CDC_TransmitPacket+0x88>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4403      	add	r3, r0
 8005dde:	3318      	adds	r3, #24
 8005de0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <USBD_CDC_TransmitPacket+0x88>)
 8005de4:	7819      	ldrb	r1, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f002 f81b 	bl	8007e2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200000b3 	.word	0x200000b3

08005e0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32b0      	adds	r2, #176	; 0xb0
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	32b0      	adds	r2, #176	; 0xb0
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e018      	b.n	8005e6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7c1b      	ldrb	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <USBD_CDC_ReceivePacket+0x68>)
 8005e44:	7819      	ldrb	r1, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 f80d 	bl	8007e70 <USBD_LL_PrepareReceive>
 8005e56:	e008      	b.n	8005e6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <USBD_CDC_ReceivePacket+0x68>)
 8005e5a:	7819      	ldrb	r1, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f002 f803 	bl	8007e70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	200000b4 	.word	0x200000b4

08005e78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01f      	b.n	8005ed0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	79fa      	ldrb	r2, [r7, #7]
 8005ec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f001 fe7d 	bl	8007bc4 <USBD_LL_Init>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e025      	b.n	8005f3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	32ae      	adds	r2, #174	; 0xae
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	32ae      	adds	r2, #174	; 0xae
 8005f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	f107 020e 	add.w	r2, r7, #14
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	4602      	mov	r2, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fe85 	bl	8007c5c <USBD_LL_Start>
 8005f52:	4603      	mov	r3, r0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	4611      	mov	r1, r2
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 f908 	bl	8007206 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006004:	461a      	mov	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2b02      	cmp	r3, #2
 8006018:	d01a      	beq.n	8006050 <USBD_LL_SetupStage+0x72>
 800601a:	2b02      	cmp	r3, #2
 800601c:	d822      	bhi.n	8006064 <USBD_LL_SetupStage+0x86>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <USBD_LL_SetupStage+0x4a>
 8006022:	2b01      	cmp	r3, #1
 8006024:	d00a      	beq.n	800603c <USBD_LL_SetupStage+0x5e>
 8006026:	e01d      	b.n	8006064 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fb5f 	bl	80066f4 <USBD_StdDevReq>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
      break;
 800603a:	e020      	b.n	800607e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fbc7 	bl	80067d8 <USBD_StdItfReq>
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]
      break;
 800604e:	e016      	b.n	800607e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc29 	bl	80068b0 <USBD_StdEPReq>
 800605e:	4603      	mov	r3, r0
 8006060:	73fb      	strb	r3, [r7, #15]
      break;
 8006062:	e00c      	b.n	800607e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800606a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fe52 	bl	8007d1c <USBD_LL_StallEP>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	bf00      	nop
  }

  return ret;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	460b      	mov	r3, r1
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800609a:	7afb      	ldrb	r3, [r7, #11]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d16e      	bne.n	800617e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	f040 8098 	bne.w	80061e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d913      	bls.n	80060e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	1ad2      	subs	r2, r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bf28      	it	cs
 80060da:	4613      	movcs	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 f984 	bl	80073ee <USBD_CtlContinueRx>
 80060e6:	e07d      	b.n	80061e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d014      	beq.n	8006120 <USBD_LL_DataOutStage+0x98>
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d81d      	bhi.n	8006136 <USBD_LL_DataOutStage+0xae>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <USBD_LL_DataOutStage+0x7c>
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d003      	beq.n	800610a <USBD_LL_DataOutStage+0x82>
 8006102:	e018      	b.n	8006136 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	75bb      	strb	r3, [r7, #22]
            break;
 8006108:	e018      	b.n	800613c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fa5e 	bl	80065d6 <USBD_CoreFindIF>
 800611a:	4603      	mov	r3, r0
 800611c:	75bb      	strb	r3, [r7, #22]
            break;
 800611e:	e00d      	b.n	800613c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006126:	b2db      	uxtb	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fa60 	bl	80065f0 <USBD_CoreFindEP>
 8006130:	4603      	mov	r3, r0
 8006132:	75bb      	strb	r3, [r7, #22]
            break;
 8006134:	e002      	b.n	800613c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	75bb      	strb	r3, [r7, #22]
            break;
 800613a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800613c:	7dbb      	ldrb	r3, [r7, #22]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d119      	bne.n	8006176 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d113      	bne.n	8006176 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800614e:	7dba      	ldrb	r2, [r7, #22]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	32ae      	adds	r2, #174	; 0xae
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800615e:	7dba      	ldrb	r2, [r7, #22]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	32ae      	adds	r2, #174	; 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 f94a 	bl	8007410 <USBD_CtlSendStatus>
 800617c:	e032      	b.n	80061e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800617e:	7afb      	ldrb	r3, [r7, #11]
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa31 	bl	80065f0 <USBD_CoreFindEP>
 800618e:	4603      	mov	r3, r0
 8006190:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006192:	7dbb      	ldrb	r3, [r7, #22]
 8006194:	2bff      	cmp	r3, #255	; 0xff
 8006196:	d025      	beq.n	80061e4 <USBD_LL_DataOutStage+0x15c>
 8006198:	7dbb      	ldrb	r3, [r7, #22]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d122      	bne.n	80061e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d117      	bne.n	80061da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061aa:	7dba      	ldrb	r2, [r7, #22]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	32ae      	adds	r2, #174	; 0xae
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00f      	beq.n	80061da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061ba:	7dba      	ldrb	r2, [r7, #22]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061c2:	7dba      	ldrb	r2, [r7, #22]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	32ae      	adds	r2, #174	; 0xae
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	7afa      	ldrb	r2, [r7, #11]
 80061d0:	4611      	mov	r1, r2
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	e000      	b.n	80061e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	460b      	mov	r3, r1
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d16f      	bne.n	80062e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3314      	adds	r3, #20
 8006206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800620e:	2b02      	cmp	r3, #2
 8006210:	d15a      	bne.n	80062c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	429a      	cmp	r2, r3
 800621c:	d914      	bls.n	8006248 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	461a      	mov	r2, r3
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f001 f8ac 	bl	8007392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623a:	2300      	movs	r3, #0
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 fe15 	bl	8007e70 <USBD_LL_PrepareReceive>
 8006246:	e03f      	b.n	80062c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d11c      	bne.n	800628e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800625c:	429a      	cmp	r2, r3
 800625e:	d316      	bcc.n	800628e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800626a:	429a      	cmp	r2, r3
 800626c:	d20f      	bcs.n	800628e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f001 f88d 	bl	8007392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f001 fdf2 	bl	8007e70 <USBD_LL_PrepareReceive>
 800628c:	e01c      	b.n	80062c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d10f      	bne.n	80062ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 fd2d 	bl	8007d1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 f8b7 	bl	8007436 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03a      	beq.n	8006348 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff fe42 	bl	8005f5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062e0:	e032      	b.n	8006348 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f97f 	bl	80065f0 <USBD_CoreFindEP>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2bff      	cmp	r3, #255	; 0xff
 80062fa:	d025      	beq.n	8006348 <USBD_LL_DataInStage+0x15a>
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d122      	bne.n	8006348 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d11c      	bne.n	8006348 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800630e:	7dfa      	ldrb	r2, [r7, #23]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	32ae      	adds	r2, #174	; 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d014      	beq.n	8006348 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800631e:	7dfa      	ldrb	r2, [r7, #23]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006326:	7dfa      	ldrb	r2, [r7, #23]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	32ae      	adds	r2, #174	; 0xae
 800632c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	7afa      	ldrb	r2, [r7, #11]
 8006334:	4611      	mov	r1, r2
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	4798      	blx	r3
 800633a:	4603      	mov	r3, r0
 800633c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800633e:	7dbb      	ldrb	r3, [r7, #22]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006344:	7dbb      	ldrb	r3, [r7, #22]
 8006346:	e000      	b.n	800634a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d014      	beq.n	80063b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6852      	ldr	r2, [r2, #4]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	4611      	mov	r1, r2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	2200      	movs	r2, #0
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 fc67 	bl	8007c92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d4:	2340      	movs	r3, #64	; 0x40
 80063d6:	2200      	movs	r2, #0
 80063d8:	2180      	movs	r1, #128	; 0x80
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fc59 	bl	8007c92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	621a      	str	r2, [r3, #32]

  return ret;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006424:	b2da      	uxtb	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2204      	movs	r2, #4
 8006430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b04      	cmp	r3, #4
 8006454:	d106      	bne.n	8006464 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800645c:	b2da      	uxtb	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b03      	cmp	r3, #3
 8006484:	d110      	bne.n	80064a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	32ae      	adds	r2, #174	; 0xae
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e01c      	b.n	800650e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d115      	bne.n	800650c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	32ae      	adds	r2, #174	; 0xae
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	32ae      	adds	r2, #174	; 0xae
 80064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	4611      	mov	r1, r2
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	32ae      	adds	r2, #174	; 0xae
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e01c      	b.n	8006572 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b03      	cmp	r3, #3
 8006542:	d115      	bne.n	8006570 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	32ae      	adds	r2, #174	; 0xae
 800654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32ae      	adds	r2, #174	; 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	4611      	mov	r1, r2
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6852      	ldr	r2, [r2, #4]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	4611      	mov	r1, r2
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	429a      	cmp	r2, r3
 8006630:	d920      	bls.n	8006674 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800663a:	e013      	b.n	8006664 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800663c:	f107 030a 	add.w	r3, r7, #10
 8006640:	4619      	mov	r1, r3
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f000 f81b 	bl	800667e <USBD_GetNextDesc>
 8006648:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b05      	cmp	r3, #5
 8006650:	d108      	bne.n	8006664 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	789b      	ldrb	r3, [r3, #2]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	429a      	cmp	r2, r3
 800665e:	d008      	beq.n	8006672 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	b29a      	uxth	r2, r3
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	429a      	cmp	r2, r3
 800666e:	d8e5      	bhi.n	800663c <USBD_GetEpDesc+0x32>
 8006670:	e000      	b.n	8006674 <USBD_GetEpDesc+0x6a>
          break;
 8006672:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006674:	693b      	ldr	r3, [r7, #16]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	881a      	ldrh	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	4413      	add	r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	3301      	adds	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066d6:	8a3b      	ldrh	r3, [r7, #16]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	b21a      	sxth	r2, r3
 80066dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	b21b      	sxth	r3, r3
 80066e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066e6:	89fb      	ldrh	r3, [r7, #14]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d005      	beq.n	800671a <USBD_StdDevReq+0x26>
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d857      	bhi.n	80067c2 <USBD_StdDevReq+0xce>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00f      	beq.n	8006736 <USBD_StdDevReq+0x42>
 8006716:	2b20      	cmp	r3, #32
 8006718:	d153      	bne.n	80067c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	32ae      	adds	r2, #174	; 0xae
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	e04a      	b.n	80067cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b09      	cmp	r3, #9
 800673c:	d83b      	bhi.n	80067b6 <USBD_StdDevReq+0xc2>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <USBD_StdDevReq+0x50>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006799 	.word	0x08006799
 8006748:	080067ad 	.word	0x080067ad
 800674c:	080067b7 	.word	0x080067b7
 8006750:	080067a3 	.word	0x080067a3
 8006754:	080067b7 	.word	0x080067b7
 8006758:	08006777 	.word	0x08006777
 800675c:	0800676d 	.word	0x0800676d
 8006760:	080067b7 	.word	0x080067b7
 8006764:	0800678f 	.word	0x0800678f
 8006768:	08006781 	.word	0x08006781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa3c 	bl	8006bec <USBD_GetDescriptor>
          break;
 8006774:	e024      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fba1 	bl	8006ec0 <USBD_SetAddress>
          break;
 800677e:	e01f      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fbe0 	bl	8006f48 <USBD_SetConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
          break;
 800678c:	e018      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc83 	bl	800709c <USBD_GetConfig>
          break;
 8006796:	e013      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fcb4 	bl	8007108 <USBD_GetStatus>
          break;
 80067a0:	e00e      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fce3 	bl	8007170 <USBD_SetFeature>
          break;
 80067aa:	e009      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fd07 	bl	80071c2 <USBD_ClrFeature>
          break;
 80067b4:	e004      	b.n	80067c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fd5e 	bl	800727a <USBD_CtlError>
          break;
 80067be:	bf00      	nop
      }
      break;
 80067c0:	e004      	b.n	80067cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd58 	bl	800727a <USBD_CtlError>
      break;
 80067ca:	bf00      	nop
  }

  return ret;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop

080067d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d005      	beq.n	80067fe <USBD_StdItfReq+0x26>
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d852      	bhi.n	800689c <USBD_StdItfReq+0xc4>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <USBD_StdItfReq+0x26>
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d14e      	bne.n	800689c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	2b02      	cmp	r3, #2
 800680a:	d840      	bhi.n	800688e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	889b      	ldrh	r3, [r3, #4]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d836      	bhi.n	8006884 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	889b      	ldrh	r3, [r3, #4]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fed9 	bl	80065d6 <USBD_CoreFindIF>
 8006824:	4603      	mov	r3, r0
 8006826:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2bff      	cmp	r3, #255	; 0xff
 800682c:	d01d      	beq.n	800686a <USBD_StdItfReq+0x92>
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11a      	bne.n	800686a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006834:	7bba      	ldrb	r2, [r7, #14]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32ae      	adds	r2, #174	; 0xae
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006844:	7bba      	ldrb	r2, [r7, #14]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800684c:	7bba      	ldrb	r2, [r7, #14]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32ae      	adds	r2, #174	; 0xae
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006862:	e004      	b.n	800686e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006864:	2303      	movs	r3, #3
 8006866:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006868:	e001      	b.n	800686e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	88db      	ldrh	r3, [r3, #6]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d110      	bne.n	8006898 <USBD_StdItfReq+0xc0>
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10d      	bne.n	8006898 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fdc7 	bl	8007410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006882:	e009      	b.n	8006898 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fcf7 	bl	800727a <USBD_CtlError>
          break;
 800688c:	e004      	b.n	8006898 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fcf2 	bl	800727a <USBD_CtlError>
          break;
 8006896:	e000      	b.n	800689a <USBD_StdItfReq+0xc2>
          break;
 8006898:	bf00      	nop
      }
      break;
 800689a:	e004      	b.n	80068a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fceb 	bl	800727a <USBD_CtlError>
      break;
 80068a4:	bf00      	nop
  }

  return ret;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	889b      	ldrh	r3, [r3, #4]
 80068c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d007      	beq.n	80068e0 <USBD_StdEPReq+0x30>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	f200 817f 	bhi.w	8006bd4 <USBD_StdEPReq+0x324>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02a      	beq.n	8006930 <USBD_StdEPReq+0x80>
 80068da:	2b20      	cmp	r3, #32
 80068dc:	f040 817a 	bne.w	8006bd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe83 	bl	80065f0 <USBD_CoreFindEP>
 80068ea:	4603      	mov	r3, r0
 80068ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068ee:	7b7b      	ldrb	r3, [r7, #13]
 80068f0:	2bff      	cmp	r3, #255	; 0xff
 80068f2:	f000 8174 	beq.w	8006bde <USBD_StdEPReq+0x32e>
 80068f6:	7b7b      	ldrb	r3, [r7, #13]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 8170 	bne.w	8006bde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068fe:	7b7a      	ldrb	r2, [r7, #13]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006906:	7b7a      	ldrb	r2, [r7, #13]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32ae      	adds	r2, #174	; 0xae
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8163 	beq.w	8006bde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006918:	7b7a      	ldrb	r2, [r7, #13]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	; 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800692e:	e156      	b.n	8006bde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d008      	beq.n	800694a <USBD_StdEPReq+0x9a>
 8006938:	2b03      	cmp	r3, #3
 800693a:	f300 8145 	bgt.w	8006bc8 <USBD_StdEPReq+0x318>
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 809b 	beq.w	8006a7a <USBD_StdEPReq+0x1ca>
 8006944:	2b01      	cmp	r3, #1
 8006946:	d03c      	beq.n	80069c2 <USBD_StdEPReq+0x112>
 8006948:	e13e      	b.n	8006bc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d002      	beq.n	800695c <USBD_StdEPReq+0xac>
 8006956:	2b03      	cmp	r3, #3
 8006958:	d016      	beq.n	8006988 <USBD_StdEPReq+0xd8>
 800695a:	e02c      	b.n	80069b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00d      	beq.n	800697e <USBD_StdEPReq+0xce>
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d00a      	beq.n	800697e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f9d5 	bl	8007d1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006972:	2180      	movs	r1, #128	; 0x80
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f9d1 	bl	8007d1c <USBD_LL_StallEP>
 800697a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800697c:	e020      	b.n	80069c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fc7a 	bl	800727a <USBD_CtlError>
              break;
 8006986:	e01b      	b.n	80069c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	885b      	ldrh	r3, [r3, #2]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10e      	bne.n	80069ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <USBD_StdEPReq+0xfe>
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d008      	beq.n	80069ae <USBD_StdEPReq+0xfe>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	88db      	ldrh	r3, [r3, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 f9b7 	bl	8007d1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd2e 	bl	8007410 <USBD_CtlSendStatus>

              break;
 80069b4:	e004      	b.n	80069c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc5e 	bl	800727a <USBD_CtlError>
              break;
 80069be:	bf00      	nop
          }
          break;
 80069c0:	e107      	b.n	8006bd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d002      	beq.n	80069d4 <USBD_StdEPReq+0x124>
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d016      	beq.n	8006a00 <USBD_StdEPReq+0x150>
 80069d2:	e04b      	b.n	8006a6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <USBD_StdEPReq+0x146>
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d00a      	beq.n	80069f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f999 	bl	8007d1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f995 	bl	8007d1c <USBD_LL_StallEP>
 80069f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f4:	e040      	b.n	8006a78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc3e 	bl	800727a <USBD_CtlError>
              break;
 80069fe:	e03b      	b.n	8006a78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d136      	bne.n	8006a76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f99f 	bl	8007d5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcf7 	bl	8007410 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fde2 	bl	80065f0 <USBD_CoreFindEP>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a30:	7b7b      	ldrb	r3, [r7, #13]
 8006a32:	2bff      	cmp	r3, #255	; 0xff
 8006a34:	d01f      	beq.n	8006a76 <USBD_StdEPReq+0x1c6>
 8006a36:	7b7b      	ldrb	r3, [r7, #13]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11c      	bne.n	8006a76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a3c:	7b7a      	ldrb	r2, [r7, #13]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a44:	7b7a      	ldrb	r2, [r7, #13]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	; 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d010      	beq.n	8006a76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a54:	7b7a      	ldrb	r2, [r7, #13]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32ae      	adds	r2, #174	; 0xae
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a6a:	e004      	b.n	8006a76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fc03 	bl	800727a <USBD_CtlError>
              break;
 8006a74:	e000      	b.n	8006a78 <USBD_StdEPReq+0x1c8>
              break;
 8006a76:	bf00      	nop
          }
          break;
 8006a78:	e0ab      	b.n	8006bd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <USBD_StdEPReq+0x1dc>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d032      	beq.n	8006af0 <USBD_StdEPReq+0x240>
 8006a8a:	e097      	b.n	8006bbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <USBD_StdEPReq+0x1f2>
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b80      	cmp	r3, #128	; 0x80
 8006a96:	d004      	beq.n	8006aa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fbed 	bl	800727a <USBD_CtlError>
                break;
 8006aa0:	e091      	b.n	8006bc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da0b      	bge.n	8006ac2 <USBD_StdEPReq+0x212>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	3310      	adds	r3, #16
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	3304      	adds	r3, #4
 8006ac0:	e00b      	b.n	8006ada <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3304      	adds	r3, #4
 8006ada:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc37 	bl	800735c <USBD_CtlSendData>
              break;
 8006aee:	e06a      	b.n	8006bc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da11      	bge.n	8006b1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	f003 020f 	and.w	r2, r3, #15
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	3324      	adds	r3, #36	; 0x24
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d117      	bne.n	8006b42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fbb0 	bl	800727a <USBD_CtlError>
                  break;
 8006b1a:	e054      	b.n	8006bc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb9d 	bl	800727a <USBD_CtlError>
                  break;
 8006b40:	e041      	b.n	8006bc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da0b      	bge.n	8006b62 <USBD_StdEPReq+0x2b2>
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3310      	adds	r3, #16
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	e00b      	b.n	8006b7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4413      	add	r3, r2
 8006b78:	3304      	adds	r3, #4
 8006b7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <USBD_StdEPReq+0x2d8>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d103      	bne.n	8006b90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e00e      	b.n	8006bae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f8ff 	bl	8007d98 <USBD_LL_IsStallEP>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fbd1 	bl	800735c <USBD_CtlSendData>
              break;
 8006bba:	e004      	b.n	8006bc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fb5b 	bl	800727a <USBD_CtlError>
              break;
 8006bc4:	bf00      	nop
          }
          break;
 8006bc6:	e004      	b.n	8006bd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fb55 	bl	800727a <USBD_CtlError>
          break;
 8006bd0:	bf00      	nop
      }
      break;
 8006bd2:	e005      	b.n	8006be0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb4f 	bl	800727a <USBD_CtlError>
      break;
 8006bdc:	e000      	b.n	8006be0 <USBD_StdEPReq+0x330>
      break;
 8006bde:	bf00      	nop
  }

  return ret;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	2b06      	cmp	r3, #6
 8006c0e:	f200 8128 	bhi.w	8006e62 <USBD_GetDescriptor+0x276>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <USBD_GetDescriptor+0x2c>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	08006c4d 	.word	0x08006c4d
 8006c20:	08006c8d 	.word	0x08006c8d
 8006c24:	08006e63 	.word	0x08006e63
 8006c28:	08006e63 	.word	0x08006e63
 8006c2c:	08006e03 	.word	0x08006e03
 8006c30:	08006e2f 	.word	0x08006e2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	7c12      	ldrb	r2, [r2, #16]
 8006c40:	f107 0108 	add.w	r1, r7, #8
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
 8006c48:	60f8      	str	r0, [r7, #12]
      break;
 8006c4a:	e112      	b.n	8006e72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	7c1b      	ldrb	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10d      	bne.n	8006c70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f107 0208 	add.w	r2, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c6e:	e100      	b.n	8006e72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f107 0208 	add.w	r2, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3301      	adds	r3, #1
 8006c86:	2202      	movs	r2, #2
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e0f2      	b.n	8006e72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	885b      	ldrh	r3, [r3, #2]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	f200 80ac 	bhi.w	8006df0 <USBD_GetDescriptor+0x204>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <USBD_GetDescriptor+0xb4>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006ced 	.word	0x08006ced
 8006ca8:	08006d21 	.word	0x08006d21
 8006cac:	08006d55 	.word	0x08006d55
 8006cb0:	08006d89 	.word	0x08006d89
 8006cb4:	08006dbd 	.word	0x08006dbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e091      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 facb 	bl	800727a <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e089      	b.n	8006e00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e077      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fab1 	bl	800727a <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e06f      	b.n	8006e00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d42:	e05d      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa97 	bl	800727a <USBD_CtlError>
            err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
          break;
 8006d52:	e055      	b.n	8006e00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e043      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa7d 	bl	800727a <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e03b      	b.n	8006e00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e029      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa63 	bl	800727a <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e021      	b.n	8006e00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e00f      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa49 	bl	800727a <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e007      	b.n	8006e00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa41 	bl	800727a <USBD_CtlError>
          err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006dfe:	bf00      	nop
      }
      break;
 8006e00:	e037      	b.n	8006e72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	f107 0208 	add.w	r2, r7, #8
 8006e16:	4610      	mov	r0, r2
 8006e18:	4798      	blx	r3
 8006e1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1c:	e029      	b.n	8006e72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa2a 	bl	800727a <USBD_CtlError>
        err++;
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e2c:	e021      	b.n	8006e72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7c1b      	ldrb	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10d      	bne.n	8006e52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f107 0208 	add.w	r2, r7, #8
 8006e42:	4610      	mov	r0, r2
 8006e44:	4798      	blx	r3
 8006e46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e50:	e00f      	b.n	8006e72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa10 	bl	800727a <USBD_CtlError>
        err++;
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e60:	e007      	b.n	8006e72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa08 	bl	800727a <USBD_CtlError>
      err++;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e70:	bf00      	nop
  }

  if (err != 0U)
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11e      	bne.n	8006eb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	88db      	ldrh	r3, [r3, #6]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88da      	ldrh	r2, [r3, #6]
 8006e8a:	893b      	ldrh	r3, [r7, #8]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	bf28      	it	cs
 8006e90:	4613      	movcs	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa5d 	bl	800735c <USBD_CtlSendData>
 8006ea2:	e009      	b.n	8006eb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9e7 	bl	800727a <USBD_CtlError>
 8006eac:	e004      	b.n	8006eb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 faae 	bl	8007410 <USBD_CtlSendStatus>
 8006eb4:	e000      	b.n	8006eb8 <USBD_GetDescriptor+0x2cc>
    return;
 8006eb6:	bf00      	nop
  }
}
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d131      	bne.n	8006f36 <USBD_SetAddress+0x76>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	88db      	ldrh	r3, [r3, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d12d      	bne.n	8006f36 <USBD_SetAddress+0x76>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee0:	d829      	bhi.n	8006f36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d104      	bne.n	8006f04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9bc 	bl	800727a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f02:	e01d      	b.n	8006f40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7bfa      	ldrb	r2, [r7, #15]
 8006f08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 ff6d 	bl	8007df0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa7a 	bl	8007410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2a:	e009      	b.n	8006f40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	e004      	b.n	8006f40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f99e 	bl	800727a <USBD_CtlError>
  }
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	4b4e      	ldr	r3, [pc, #312]	; (8007098 <USBD_SetConfig+0x150>)
 8006f5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f60:	4b4d      	ldr	r3, [pc, #308]	; (8007098 <USBD_SetConfig+0x150>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d905      	bls.n	8006f74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f985 	bl	800727a <USBD_CtlError>
    return USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e08c      	b.n	800708e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USBD_SetConfig+0x3e>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d029      	beq.n	8006fd8 <USBD_SetConfig+0x90>
 8006f84:	e075      	b.n	8007072 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <USBD_SetConfig+0x150>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d020      	beq.n	8006fd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f8e:	4b42      	ldr	r3, [pc, #264]	; (8007098 <USBD_SetConfig+0x150>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f98:	4b3f      	ldr	r3, [pc, #252]	; (8007098 <USBD_SetConfig+0x150>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fe ffe7 	bl	8005f72 <USBD_SetClassConfig>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f962 	bl	800727a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fbe:	e065      	b.n	800708c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa25 	bl	8007410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2203      	movs	r2, #3
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fce:	e05d      	b.n	800708c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa1d 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8006fd6:	e059      	b.n	800708c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fd8:	4b2f      	ldr	r3, [pc, #188]	; (8007098 <USBD_SetConfig+0x150>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d112      	bne.n	8007006 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	; (8007098 <USBD_SetConfig+0x150>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ff2:	4b29      	ldr	r3, [pc, #164]	; (8007098 <USBD_SetConfig+0x150>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe ffd6 	bl	8005faa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa06 	bl	8007410 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007004:	e042      	b.n	800708c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007006:	4b24      	ldr	r3, [pc, #144]	; (8007098 <USBD_SetConfig+0x150>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d02a      	beq.n	800706a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fe ffc4 	bl	8005faa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007022:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <USBD_SetConfig+0x150>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800702c:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <USBD_SetConfig+0x150>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe ff9d 	bl	8005f72 <USBD_SetClassConfig>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00f      	beq.n	8007062 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f918 	bl	800727a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe ffa9 	bl	8005faa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007060:	e014      	b.n	800708c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9d4 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8007068:	e010      	b.n	800708c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9d0 	bl	8007410 <USBD_CtlSendStatus>
      break;
 8007070:	e00c      	b.n	800708c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f900 	bl	800727a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <USBD_SetConfig+0x150>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe ff92 	bl	8005faa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	73fb      	strb	r3, [r7, #15]
      break;
 800708a:	bf00      	nop
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200001f8 	.word	0x200001f8

0800709c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d004      	beq.n	80070b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f8e2 	bl	800727a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070b6:	e023      	b.n	8007100 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	dc02      	bgt.n	80070ca <USBD_GetConfig+0x2e>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc03      	bgt.n	80070d0 <USBD_GetConfig+0x34>
 80070c8:	e015      	b.n	80070f6 <USBD_GetConfig+0x5a>
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d00b      	beq.n	80070e6 <USBD_GetConfig+0x4a>
 80070ce:	e012      	b.n	80070f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3308      	adds	r3, #8
 80070da:	2201      	movs	r2, #1
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f93c 	bl	800735c <USBD_CtlSendData>
        break;
 80070e4:	e00c      	b.n	8007100 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2201      	movs	r2, #1
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f934 	bl	800735c <USBD_CtlSendData>
        break;
 80070f4:	e004      	b.n	8007100 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8be 	bl	800727a <USBD_CtlError>
        break;
 80070fe:	bf00      	nop
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	2b02      	cmp	r3, #2
 800711e:	d81e      	bhi.n	800715e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	88db      	ldrh	r3, [r3, #6]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d004      	beq.n	8007132 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8a5 	bl	800727a <USBD_CtlError>
        break;
 8007130:	e01a      	b.n	8007168 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f043 0202 	orr.w	r2, r3, #2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	330c      	adds	r3, #12
 8007152:	2202      	movs	r2, #2
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f900 	bl	800735c <USBD_CtlSendData>
      break;
 800715c:	e004      	b.n	8007168 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f88a 	bl	800727a <USBD_CtlError>
      break;
 8007166:	bf00      	nop
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f940 	bl	8007410 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007190:	e013      	b.n	80071ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d10b      	bne.n	80071b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f930 	bl	8007410 <USBD_CtlSendStatus>
}
 80071b0:	e003      	b.n	80071ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f860 	bl	800727a <USBD_CtlError>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d80b      	bhi.n	80071f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d10c      	bne.n	80071fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f910 	bl	8007410 <USBD_CtlSendStatus>
      }
      break;
 80071f0:	e004      	b.n	80071fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f840 	bl	800727a <USBD_CtlError>
      break;
 80071fa:	e000      	b.n	80071fe <USBD_ClrFeature+0x3c>
      break;
 80071fc:	bf00      	nop
  }
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fa41 	bl	80066b8 <SWAPBYTE>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fa34 	bl	80066b8 <SWAPBYTE>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff fa27 	bl	80066b8 <SWAPBYTE>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	80da      	strh	r2, [r3, #6]
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd48 	bl	8007d1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fd44 	bl	8007d1c <USBD_LL_StallEP>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d036      	beq.n	8007320 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072b6:	6938      	ldr	r0, [r7, #16]
 80072b8:	f000 f836 	bl	8007328 <USBD_GetLen>
 80072bc:	4603      	mov	r3, r0
 80072be:	3301      	adds	r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	3301      	adds	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	2203      	movs	r2, #3
 80072e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	3301      	adds	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072ec:	e013      	b.n	8007316 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
    idx++;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	3301      	adds	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4413      	add	r3, r2
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	3301      	adds	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e7      	bne.n	80072ee <USBD_GetString+0x52>
 800731e:	e000      	b.n	8007322 <USBD_GetString+0x86>
    return;
 8007320:	bf00      	nop
  }
}
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007338:	e005      	b.n	8007346 <USBD_GetLen+0x1e>
  {
    len++;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	3301      	adds	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3301      	adds	r3, #1
 8007344:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f5      	bne.n	800733a <USBD_GetLen+0x12>
  }

  return len;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2202      	movs	r2, #2
 800736c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	2100      	movs	r1, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fd53 	bl	8007e2e <USBD_LL_Transmit>

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	2100      	movs	r1, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fd42 	bl	8007e2e <USBD_LL_Transmit>

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2203      	movs	r2, #3
 80073c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fd46 	bl	8007e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fd35 	bl	8007e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2204      	movs	r2, #4
 800741c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fd01 	bl	8007e2e <USBD_LL_Transmit>

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2205      	movs	r2, #5
 8007442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007446:	2300      	movs	r3, #0
 8007448:	2200      	movs	r2, #0
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fd0f 	bl	8007e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <BMX055_Init>:
float gyroBias[3] = {0.0, 0.0, 0.0};
float accelBias[3] = {0.0, 0.0, 0.0};



uint8_t BMX055_Init(I2C_HandleTypeDef *I2Cx){
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af04      	add	r7, sp, #16
 8007462:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;

	//Read BMX055 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, BMX055_ACC_SLAVE_ADDRESS_DEFAULT<<1, BMX055_WHO_AM_I_REG, 1, &readData, 1, 500);
 8007464:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	2301      	movs	r3, #1
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	f107 030f 	add.w	r3, r7, #15
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2301      	movs	r3, #1
 8007476:	2200      	movs	r2, #0
 8007478:	2130      	movs	r1, #48	; 0x30
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7f9 ff3e 	bl	80012fc <HAL_I2C_Mem_Read>

		//Init Accelerometer

	}

	return readData;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <SearchDevice>:


uint8_t SearchDevice(I2C_HandleTypeDef *I2Cx){
 800748c:	b580      	push	{r7, lr}
 800748e:	b090      	sub	sp, #64	; 0x40
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t size = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t buffer[50];
	/* Search for devices from 0x00 to 128 */
	for(int i=0; i<128; i++){
 80074a0:	2300      	movs	r3, #0
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a4:	e03f      	b.n	8007526 <SearchDevice+0x9a>
	  ret = HAL_I2C_IsDeviceReady(I2Cx, (uint16_t)(i<<1), 3, 500);
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	b299      	uxth	r1, r3
 80074ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80074b2:	2203      	movs	r2, #3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fa f947 	bl	8001748 <HAL_I2C_IsDeviceReady>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  if (ret != HAL_OK) /* No ACK Received At That Address */
 80074c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d012      	beq.n	80074ee <SearchDevice+0x62>
	  {
		  size = sprintf(buffer, "- ", i);
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074ce:	491a      	ldr	r1, [pc, #104]	; (8007538 <SearchDevice+0xac>)
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fd77 	bl	8007fc4 <siprintf>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  CDC_Transmit_FS(buffer, size);
 80074dc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80074e0:	f107 0308 	add.w	r3, r7, #8
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f8e8 	bl	80076bc <CDC_Transmit_FS>
 80074ec:	e015      	b.n	800751a <SearchDevice+0x8e>
	  }
	  else if(ret == HAL_OK)
 80074ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d111      	bne.n	800751a <SearchDevice+0x8e>
	  {
		  size = sprintf(buffer, "0x%X", i);
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074fc:	490f      	ldr	r1, [pc, #60]	; (800753c <SearchDevice+0xb0>)
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fd60 	bl	8007fc4 <siprintf>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  CDC_Transmit_FS(buffer, size);
 800750a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800750e:	f107 0308 	add.w	r3, r7, #8
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f000 f8d1 	bl	80076bc <CDC_Transmit_FS>
	  }

	  HAL_Delay(100);
 800751a:	2064      	movs	r0, #100	; 0x64
 800751c:	f7f9 faf0 	bl	8000b00 <HAL_Delay>
	for(int i=0; i<128; i++){
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	3301      	adds	r3, #1
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	2b7f      	cmp	r3, #127	; 0x7f
 800752a:	ddbc      	ble.n	80074a6 <SearchDevice+0x1a>
	}

}
 800752c:	bf00      	nop
 800752e:	4618      	mov	r0, r3
 8007530:	3740      	adds	r7, #64	; 0x40
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	080088e8 	.word	0x080088e8
 800753c:	080088ec 	.word	0x080088ec

08007540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007544:	2200      	movs	r2, #0
 8007546:	4912      	ldr	r1, [pc, #72]	; (8007590 <MX_USB_DEVICE_Init+0x50>)
 8007548:	4812      	ldr	r0, [pc, #72]	; (8007594 <MX_USB_DEVICE_Init+0x54>)
 800754a:	f7fe fc95 	bl	8005e78 <USBD_Init>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007554:	f7f9 f946 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007558:	490f      	ldr	r1, [pc, #60]	; (8007598 <MX_USB_DEVICE_Init+0x58>)
 800755a:	480e      	ldr	r0, [pc, #56]	; (8007594 <MX_USB_DEVICE_Init+0x54>)
 800755c:	f7fe fcbc 	bl	8005ed8 <USBD_RegisterClass>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007566:	f7f9 f93d 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800756a:	490c      	ldr	r1, [pc, #48]	; (800759c <MX_USB_DEVICE_Init+0x5c>)
 800756c:	4809      	ldr	r0, [pc, #36]	; (8007594 <MX_USB_DEVICE_Init+0x54>)
 800756e:	f7fe fbad 	bl	8005ccc <USBD_CDC_RegisterInterface>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007578:	f7f9 f934 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800757c:	4805      	ldr	r0, [pc, #20]	; (8007594 <MX_USB_DEVICE_Init+0x54>)
 800757e:	f7fe fce1 	bl	8005f44 <USBD_Start>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007588:	f7f9 f92c 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800758c:	bf00      	nop
 800758e:	bd80      	pop	{r7, pc}
 8007590:	200000cc 	.word	0x200000cc
 8007594:	200001fc 	.word	0x200001fc
 8007598:	20000038 	.word	0x20000038
 800759c:	200000b8 	.word	0x200000b8

080075a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075a4:	2200      	movs	r2, #0
 80075a6:	4905      	ldr	r1, [pc, #20]	; (80075bc <CDC_Init_FS+0x1c>)
 80075a8:	4805      	ldr	r0, [pc, #20]	; (80075c0 <CDC_Init_FS+0x20>)
 80075aa:	f7fe fba9 	bl	8005d00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075ae:	4905      	ldr	r1, [pc, #20]	; (80075c4 <CDC_Init_FS+0x24>)
 80075b0:	4803      	ldr	r0, [pc, #12]	; (80075c0 <CDC_Init_FS+0x20>)
 80075b2:	f7fe fbc7 	bl	8005d44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000cd8 	.word	0x20000cd8
 80075c0:	200001fc 	.word	0x200001fc
 80075c4:	200004d8 	.word	0x200004d8

080075c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b23      	cmp	r3, #35	; 0x23
 80075ec:	d84a      	bhi.n	8007684 <CDC_Control_FS+0xac>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <CDC_Control_FS+0x1c>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007685 	.word	0x08007685
 80075f8:	08007685 	.word	0x08007685
 80075fc:	08007685 	.word	0x08007685
 8007600:	08007685 	.word	0x08007685
 8007604:	08007685 	.word	0x08007685
 8007608:	08007685 	.word	0x08007685
 800760c:	08007685 	.word	0x08007685
 8007610:	08007685 	.word	0x08007685
 8007614:	08007685 	.word	0x08007685
 8007618:	08007685 	.word	0x08007685
 800761c:	08007685 	.word	0x08007685
 8007620:	08007685 	.word	0x08007685
 8007624:	08007685 	.word	0x08007685
 8007628:	08007685 	.word	0x08007685
 800762c:	08007685 	.word	0x08007685
 8007630:	08007685 	.word	0x08007685
 8007634:	08007685 	.word	0x08007685
 8007638:	08007685 	.word	0x08007685
 800763c:	08007685 	.word	0x08007685
 8007640:	08007685 	.word	0x08007685
 8007644:	08007685 	.word	0x08007685
 8007648:	08007685 	.word	0x08007685
 800764c:	08007685 	.word	0x08007685
 8007650:	08007685 	.word	0x08007685
 8007654:	08007685 	.word	0x08007685
 8007658:	08007685 	.word	0x08007685
 800765c:	08007685 	.word	0x08007685
 8007660:	08007685 	.word	0x08007685
 8007664:	08007685 	.word	0x08007685
 8007668:	08007685 	.word	0x08007685
 800766c:	08007685 	.word	0x08007685
 8007670:	08007685 	.word	0x08007685
 8007674:	08007685 	.word	0x08007685
 8007678:	08007685 	.word	0x08007685
 800767c:	08007685 	.word	0x08007685
 8007680:	08007685 	.word	0x08007685
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007684:	bf00      	nop
  }

  return (USBD_OK);
 8007686:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4805      	ldr	r0, [pc, #20]	; (80076b8 <CDC_Receive_FS+0x24>)
 80076a2:	f7fe fb4f 	bl	8005d44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076a6:	4804      	ldr	r0, [pc, #16]	; (80076b8 <CDC_Receive_FS+0x24>)
 80076a8:	f7fe fbb0 	bl	8005e0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200001fc 	.word	0x200001fc

080076bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076cc:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <CDC_Transmit_FS+0x48>)
 80076ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076de:	2301      	movs	r3, #1
 80076e0:	e00b      	b.n	80076fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	461a      	mov	r2, r3
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4806      	ldr	r0, [pc, #24]	; (8007704 <CDC_Transmit_FS+0x48>)
 80076ea:	f7fe fb09 	bl	8005d00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076ee:	4805      	ldr	r0, [pc, #20]	; (8007704 <CDC_Transmit_FS+0x48>)
 80076f0:	f7fe fb46 	bl	8005d80 <USBD_CDC_TransmitPacket>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200001fc 	.word	0x200001fc

08007708 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800771a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800771e:	4618      	mov	r0, r3
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2212      	movs	r2, #18
 800773c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	200000e8 	.word	0x200000e8

08007750 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	6039      	str	r1, [r7, #0]
 800775a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2204      	movs	r2, #4
 8007760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007762:	4b03      	ldr	r3, [pc, #12]	; (8007770 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	200000fc 	.word	0x200000fc

08007774 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4907      	ldr	r1, [pc, #28]	; (80077a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800778a:	4808      	ldr	r0, [pc, #32]	; (80077ac <USBD_FS_ProductStrDescriptor+0x38>)
 800778c:	f7ff fd86 	bl	800729c <USBD_GetString>
 8007790:	e004      	b.n	800779c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4904      	ldr	r1, [pc, #16]	; (80077a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007796:	4805      	ldr	r0, [pc, #20]	; (80077ac <USBD_FS_ProductStrDescriptor+0x38>)
 8007798:	f7ff fd80 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	200014d8 	.word	0x200014d8
 80077ac:	080088f4 	.word	0x080088f4

080077b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4904      	ldr	r1, [pc, #16]	; (80077d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077c0:	4804      	ldr	r0, [pc, #16]	; (80077d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077c2:	f7ff fd6b 	bl	800729c <USBD_GetString>
  return USBD_StrDesc;
 80077c6:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	200014d8 	.word	0x200014d8
 80077d4:	0800890c 	.word	0x0800890c

080077d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	221a      	movs	r2, #26
 80077e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077ea:	f000 f843 	bl	8007874 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077ee:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000100 	.word	0x20000100

080077fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4907      	ldr	r1, [pc, #28]	; (8007830 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007812:	4808      	ldr	r0, [pc, #32]	; (8007834 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007814:	f7ff fd42 	bl	800729c <USBD_GetString>
 8007818:	e004      	b.n	8007824 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	4904      	ldr	r1, [pc, #16]	; (8007830 <USBD_FS_ConfigStrDescriptor+0x34>)
 800781e:	4805      	ldr	r0, [pc, #20]	; (8007834 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007820:	f7ff fd3c 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200014d8 	.word	0x200014d8
 8007834:	08008920 	.word	0x08008920

08007838 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800784e:	4808      	ldr	r0, [pc, #32]	; (8007870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007850:	f7ff fd24 	bl	800729c <USBD_GetString>
 8007854:	e004      	b.n	8007860 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4904      	ldr	r1, [pc, #16]	; (800786c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800785a:	4805      	ldr	r0, [pc, #20]	; (8007870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800785c:	f7ff fd1e 	bl	800729c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007860:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200014d8 	.word	0x200014d8
 8007870:	0800892c 	.word	0x0800892c

08007874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800787a:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <Get_SerialNum+0x44>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007880:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <Get_SerialNum+0x48>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <Get_SerialNum+0x4c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800789a:	2208      	movs	r2, #8
 800789c:	4909      	ldr	r1, [pc, #36]	; (80078c4 <Get_SerialNum+0x50>)
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f814 	bl	80078cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078a4:	2204      	movs	r2, #4
 80078a6:	4908      	ldr	r1, [pc, #32]	; (80078c8 <Get_SerialNum+0x54>)
 80078a8:	68b8      	ldr	r0, [r7, #8]
 80078aa:	f000 f80f 	bl	80078cc <IntToUnicode>
  }
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	1fff7a10 	.word	0x1fff7a10
 80078bc:	1fff7a14 	.word	0x1fff7a14
 80078c0:	1fff7a18 	.word	0x1fff7a18
 80078c4:	20000102 	.word	0x20000102
 80078c8:	20000112 	.word	0x20000112

080078cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
 80078e2:	e027      	b.n	8007934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0f1b      	lsrs	r3, r3, #28
 80078e8:	2b09      	cmp	r3, #9
 80078ea:	d80b      	bhi.n	8007904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	0f1b      	lsrs	r3, r3, #28
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4619      	mov	r1, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	440b      	add	r3, r1
 80078fc:	3230      	adds	r2, #48	; 0x30
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e00a      	b.n	800791a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	0f1b      	lsrs	r3, r3, #28
 8007908:	b2da      	uxtb	r2, r3
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	4619      	mov	r1, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	440b      	add	r3, r1
 8007914:	3237      	adds	r2, #55	; 0x37
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	3301      	adds	r3, #1
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	3301      	adds	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
 8007934:	7dfa      	ldrb	r2, [r7, #23]
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	429a      	cmp	r2, r3
 800793a:	d3d3      	bcc.n	80078e4 <IntToUnicode+0x18>
  }
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	605a      	str	r2, [r3, #4]
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800796c:	d13a      	bne.n	80079e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	6313      	str	r3, [r2, #48]	; 0x30
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800798a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800798e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007990:	2302      	movs	r3, #2
 8007992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007998:	2303      	movs	r3, #3
 800799a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800799c:	230a      	movs	r3, #10
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	4619      	mov	r1, r3
 80079a6:	4812      	ldr	r0, [pc, #72]	; (80079f0 <HAL_PCD_MspInit+0xa4>)
 80079a8:	f7f9 f9e0 	bl	8000d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	4a0e      	ldr	r2, [pc, #56]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	6353      	str	r3, [r2, #52]	; 0x34
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 80079c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079c6:	6453      	str	r3, [r2, #68]	; 0x44
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <HAL_PCD_MspInit+0xa0>)
 80079ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	2043      	movs	r0, #67	; 0x43
 80079da:	f7f9 f990 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079de:	2043      	movs	r0, #67	; 0x43
 80079e0:	f7f9 f9a9 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079e4:	bf00      	nop
 80079e6:	3728      	adds	r7, #40	; 0x28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40020000 	.word	0x40020000

080079f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fe fae7 	bl	8005fde <USBD_LL_SetupStage>
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	4619      	mov	r1, r3
 8007a42:	f7fe fb21 	bl	8006088 <USBD_LL_DataOutStage>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	334c      	adds	r3, #76	; 0x4c
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	4619      	mov	r1, r3
 8007a76:	f7fe fbba 	bl	80061ee <USBD_LL_DataInStage>
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fcee 	bl	8006472 <USBD_LL_SOF>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d001      	beq.n	8007ab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ab2:	f7f8 fe97 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007abc:	7bfa      	ldrb	r2, [r7, #15]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fc98 	bl	80063f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fc40 	bl	8006352 <USBD_LL_Reset>
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fc93 	bl	8006416 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_PCD_SuspendCallback+0x48>)
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <HAL_PCD_SuspendCallback+0x48>)
 8007b16:	f043 0306 	orr.w	r3, r3, #6
 8007b1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fc83 	bl	8006442 <USBD_LL_Resume>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fcdb 	bl	8006516 <USBD_LL_IsoOUTIncomplete>
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fc97 	bl	80064b2 <USBD_LL_IsoINIncomplete>
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fced 	bl	800657a <USBD_LL_DevConnected>
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fcea 	bl	8006590 <USBD_LL_DevDisconnected>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d13c      	bne.n	8007c4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007bd4:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <USBD_LL_Init+0x94>)
 8007be0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007be4:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <USBD_LL_Init+0x94>)
 8007be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bee:	2204      	movs	r2, #4
 8007bf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bf2:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c04:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c10:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c16:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c22:	480d      	ldr	r0, [pc, #52]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c24:	f7fa f942 	bl	8001eac <HAL_PCD_Init>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c2e:	f7f8 fdd9 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	4808      	ldr	r0, [pc, #32]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c36:	f7fb fb9a 	bl	800336e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c3a:	2240      	movs	r2, #64	; 0x40
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4806      	ldr	r0, [pc, #24]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c40:	f7fb fb4e 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	2101      	movs	r1, #1
 8007c48:	4803      	ldr	r0, [pc, #12]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c4a:	f7fb fb49 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	200016d8 	.word	0x200016d8

08007c5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fa fa37 	bl	80020e6 <HAL_PCD_Start>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f942 	bl	8007f08 <USBD_Get_USB_Status>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	70fb      	strb	r3, [r7, #3]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70bb      	strb	r3, [r7, #2]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cba:	78bb      	ldrb	r3, [r7, #2]
 8007cbc:	883a      	ldrh	r2, [r7, #0]
 8007cbe:	78f9      	ldrb	r1, [r7, #3]
 8007cc0:	f7fa ff08 	bl	8002ad4 <HAL_PCD_EP_Open>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 f91c 	bl	8007f08 <USBD_Get_USB_Status>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fa ff51 	bl	8002ba4 <HAL_PCD_EP_Close>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f8fd 	bl	8007f08 <USBD_Get_USB_Status>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fb f829 	bl	8002d92 <HAL_PCD_EP_SetStall>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 f8de 	bl	8007f08 <USBD_Get_USB_Status>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fb f86e 	bl	8002e5a <HAL_PCD_EP_ClrStall>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8bf 	bl	8007f08 <USBD_Get_USB_Status>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007daa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da0b      	bge.n	8007dcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	333e      	adds	r3, #62	; 0x3e
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	e00b      	b.n	8007de4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007de2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fa fe3b 	bl	8002a8a <HAL_PCD_SetAddress>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f874 	bl	8007f08 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e4c:	7af9      	ldrb	r1, [r7, #11]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	f7fa ff54 	bl	8002cfe <HAL_PCD_EP_Transmit>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f853 	bl	8007f08 <USBD_Get_USB_Status>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e66:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e8e:	7af9      	ldrb	r1, [r7, #11]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	f7fa fed0 	bl	8002c38 <HAL_PCD_EP_Receive>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f832 	bl	8007f08 <USBD_Get_USB_Status>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ea8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fa ff00 	bl	8002cce <HAL_PCD_EP_GetRxCount>
 8007ece:	4603      	mov	r3, r0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <USBD_static_malloc+0x18>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20001be4 	.word	0x20001be4

08007ef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d817      	bhi.n	8007f4c <USBD_Get_USB_Status+0x44>
 8007f1c:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <USBD_Get_USB_Status+0x1c>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007f3b 	.word	0x08007f3b
 8007f2c:	08007f41 	.word	0x08007f41
 8007f30:	08007f47 	.word	0x08007f47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	e00b      	b.n	8007f52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3e:	e008      	b.n	8007f52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
    break;
 8007f44:	e005      	b.n	8007f52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4a:	e002      	b.n	8007f52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f50:	bf00      	nop
  }
  return usb_status;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <__errno>:
 8007f60:	4b01      	ldr	r3, [pc, #4]	; (8007f68 <__errno+0x8>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	2000011c 	.word	0x2000011c

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4d0d      	ldr	r5, [pc, #52]	; (8007fa4 <__libc_init_array+0x38>)
 8007f70:	4c0d      	ldr	r4, [pc, #52]	; (8007fa8 <__libc_init_array+0x3c>)
 8007f72:	1b64      	subs	r4, r4, r5
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	2600      	movs	r6, #0
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	4d0b      	ldr	r5, [pc, #44]	; (8007fac <__libc_init_array+0x40>)
 8007f7e:	4c0c      	ldr	r4, [pc, #48]	; (8007fb0 <__libc_init_array+0x44>)
 8007f80:	f000 fc8e 	bl	80088a0 <_init>
 8007f84:	1b64      	subs	r4, r4, r5
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	2600      	movs	r6, #0
 8007f8a:	42a6      	cmp	r6, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f94:	4798      	blx	r3
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9e:	4798      	blx	r3
 8007fa0:	3601      	adds	r6, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	08008990 	.word	0x08008990
 8007fa8:	08008990 	.word	0x08008990
 8007fac:	08008990 	.word	0x08008990
 8007fb0:	08008994 	.word	0x08008994

08007fb4 <memset>:
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <siprintf>:
 8007fc4:	b40e      	push	{r1, r2, r3}
 8007fc6:	b500      	push	{lr}
 8007fc8:	b09c      	sub	sp, #112	; 0x70
 8007fca:	ab1d      	add	r3, sp, #116	; 0x74
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9006      	str	r0, [sp, #24]
 8007fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fd4:	4809      	ldr	r0, [pc, #36]	; (8007ffc <siprintf+0x38>)
 8007fd6:	9107      	str	r1, [sp, #28]
 8007fd8:	9104      	str	r1, [sp, #16]
 8007fda:	4909      	ldr	r1, [pc, #36]	; (8008000 <siprintf+0x3c>)
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	9105      	str	r1, [sp, #20]
 8007fe2:	6800      	ldr	r0, [r0, #0]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	a902      	add	r1, sp, #8
 8007fe8:	f000 f868 	bl	80080bc <_svfiprintf_r>
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	b01c      	add	sp, #112	; 0x70
 8007ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	4770      	bx	lr
 8007ffc:	2000011c 	.word	0x2000011c
 8008000:	ffff0208 	.word	0xffff0208

08008004 <__ssputs_r>:
 8008004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008008:	688e      	ldr	r6, [r1, #8]
 800800a:	429e      	cmp	r6, r3
 800800c:	4682      	mov	sl, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4690      	mov	r8, r2
 8008012:	461f      	mov	r7, r3
 8008014:	d838      	bhi.n	8008088 <__ssputs_r+0x84>
 8008016:	898a      	ldrh	r2, [r1, #12]
 8008018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800801c:	d032      	beq.n	8008084 <__ssputs_r+0x80>
 800801e:	6825      	ldr	r5, [r4, #0]
 8008020:	6909      	ldr	r1, [r1, #16]
 8008022:	eba5 0901 	sub.w	r9, r5, r1
 8008026:	6965      	ldr	r5, [r4, #20]
 8008028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800802c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008030:	3301      	adds	r3, #1
 8008032:	444b      	add	r3, r9
 8008034:	106d      	asrs	r5, r5, #1
 8008036:	429d      	cmp	r5, r3
 8008038:	bf38      	it	cc
 800803a:	461d      	movcc	r5, r3
 800803c:	0553      	lsls	r3, r2, #21
 800803e:	d531      	bpl.n	80080a4 <__ssputs_r+0xa0>
 8008040:	4629      	mov	r1, r5
 8008042:	f000 fb63 	bl	800870c <_malloc_r>
 8008046:	4606      	mov	r6, r0
 8008048:	b950      	cbnz	r0, 8008060 <__ssputs_r+0x5c>
 800804a:	230c      	movs	r3, #12
 800804c:	f8ca 3000 	str.w	r3, [sl]
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	464a      	mov	r2, r9
 8008064:	f000 fabe 	bl	80085e4 <memcpy>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	6126      	str	r6, [r4, #16]
 8008076:	6165      	str	r5, [r4, #20]
 8008078:	444e      	add	r6, r9
 800807a:	eba5 0509 	sub.w	r5, r5, r9
 800807e:	6026      	str	r6, [r4, #0]
 8008080:	60a5      	str	r5, [r4, #8]
 8008082:	463e      	mov	r6, r7
 8008084:	42be      	cmp	r6, r7
 8008086:	d900      	bls.n	800808a <__ssputs_r+0x86>
 8008088:	463e      	mov	r6, r7
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	4632      	mov	r2, r6
 800808e:	4641      	mov	r1, r8
 8008090:	f000 fab6 	bl	8008600 <memmove>
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	1b9b      	subs	r3, r3, r6
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	4433      	add	r3, r6
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7db      	b.n	800805c <__ssputs_r+0x58>
 80080a4:	462a      	mov	r2, r5
 80080a6:	f000 fba5 	bl	80087f4 <_realloc_r>
 80080aa:	4606      	mov	r6, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d1e1      	bne.n	8008074 <__ssputs_r+0x70>
 80080b0:	6921      	ldr	r1, [r4, #16]
 80080b2:	4650      	mov	r0, sl
 80080b4:	f000 fabe 	bl	8008634 <_free_r>
 80080b8:	e7c7      	b.n	800804a <__ssputs_r+0x46>
	...

080080bc <_svfiprintf_r>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	4698      	mov	r8, r3
 80080c2:	898b      	ldrh	r3, [r1, #12]
 80080c4:	061b      	lsls	r3, r3, #24
 80080c6:	b09d      	sub	sp, #116	; 0x74
 80080c8:	4607      	mov	r7, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	d50e      	bpl.n	80080ee <_svfiprintf_r+0x32>
 80080d0:	690b      	ldr	r3, [r1, #16]
 80080d2:	b963      	cbnz	r3, 80080ee <_svfiprintf_r+0x32>
 80080d4:	2140      	movs	r1, #64	; 0x40
 80080d6:	f000 fb19 	bl	800870c <_malloc_r>
 80080da:	6028      	str	r0, [r5, #0]
 80080dc:	6128      	str	r0, [r5, #16]
 80080de:	b920      	cbnz	r0, 80080ea <_svfiprintf_r+0x2e>
 80080e0:	230c      	movs	r3, #12
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	e0d1      	b.n	800828e <_svfiprintf_r+0x1d2>
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	616b      	str	r3, [r5, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9309      	str	r3, [sp, #36]	; 0x24
 80080f2:	2320      	movs	r3, #32
 80080f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fc:	2330      	movs	r3, #48	; 0x30
 80080fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082a8 <_svfiprintf_r+0x1ec>
 8008102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008106:	f04f 0901 	mov.w	r9, #1
 800810a:	4623      	mov	r3, r4
 800810c:	469a      	mov	sl, r3
 800810e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008112:	b10a      	cbz	r2, 8008118 <_svfiprintf_r+0x5c>
 8008114:	2a25      	cmp	r2, #37	; 0x25
 8008116:	d1f9      	bne.n	800810c <_svfiprintf_r+0x50>
 8008118:	ebba 0b04 	subs.w	fp, sl, r4
 800811c:	d00b      	beq.n	8008136 <_svfiprintf_r+0x7a>
 800811e:	465b      	mov	r3, fp
 8008120:	4622      	mov	r2, r4
 8008122:	4629      	mov	r1, r5
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff6d 	bl	8008004 <__ssputs_r>
 800812a:	3001      	adds	r0, #1
 800812c:	f000 80aa 	beq.w	8008284 <_svfiprintf_r+0x1c8>
 8008130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008132:	445a      	add	r2, fp
 8008134:	9209      	str	r2, [sp, #36]	; 0x24
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80a2 	beq.w	8008284 <_svfiprintf_r+0x1c8>
 8008140:	2300      	movs	r3, #0
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814a:	f10a 0a01 	add.w	sl, sl, #1
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008156:	931a      	str	r3, [sp, #104]	; 0x68
 8008158:	4654      	mov	r4, sl
 800815a:	2205      	movs	r2, #5
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	4851      	ldr	r0, [pc, #324]	; (80082a8 <_svfiprintf_r+0x1ec>)
 8008162:	f7f8 f83d 	bl	80001e0 <memchr>
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	b9d8      	cbnz	r0, 80081a2 <_svfiprintf_r+0xe6>
 800816a:	06d0      	lsls	r0, r2, #27
 800816c:	bf44      	itt	mi
 800816e:	2320      	movmi	r3, #32
 8008170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008174:	0711      	lsls	r1, r2, #28
 8008176:	bf44      	itt	mi
 8008178:	232b      	movmi	r3, #43	; 0x2b
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b2a      	cmp	r3, #42	; 0x2a
 8008184:	d015      	beq.n	80081b2 <_svfiprintf_r+0xf6>
 8008186:	9a07      	ldr	r2, [sp, #28]
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4621      	mov	r1, r4
 8008192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008196:	3b30      	subs	r3, #48	; 0x30
 8008198:	2b09      	cmp	r3, #9
 800819a:	d94e      	bls.n	800823a <_svfiprintf_r+0x17e>
 800819c:	b1b0      	cbz	r0, 80081cc <_svfiprintf_r+0x110>
 800819e:	9207      	str	r2, [sp, #28]
 80081a0:	e014      	b.n	80081cc <_svfiprintf_r+0x110>
 80081a2:	eba0 0308 	sub.w	r3, r0, r8
 80081a6:	fa09 f303 	lsl.w	r3, r9, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	46a2      	mov	sl, r4
 80081b0:	e7d2      	b.n	8008158 <_svfiprintf_r+0x9c>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfbb      	ittet	lt
 80081be:	425b      	neglt	r3, r3
 80081c0:	f042 0202 	orrlt.w	r2, r2, #2
 80081c4:	9307      	strge	r3, [sp, #28]
 80081c6:	9307      	strlt	r3, [sp, #28]
 80081c8:	bfb8      	it	lt
 80081ca:	9204      	strlt	r2, [sp, #16]
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	2b2e      	cmp	r3, #46	; 0x2e
 80081d0:	d10c      	bne.n	80081ec <_svfiprintf_r+0x130>
 80081d2:	7863      	ldrb	r3, [r4, #1]
 80081d4:	2b2a      	cmp	r3, #42	; 0x2a
 80081d6:	d135      	bne.n	8008244 <_svfiprintf_r+0x188>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9203      	str	r2, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfb8      	it	lt
 80081e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e8:	3402      	adds	r4, #2
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082b8 <_svfiprintf_r+0x1fc>
 80081f0:	7821      	ldrb	r1, [r4, #0]
 80081f2:	2203      	movs	r2, #3
 80081f4:	4650      	mov	r0, sl
 80081f6:	f7f7 fff3 	bl	80001e0 <memchr>
 80081fa:	b140      	cbz	r0, 800820e <_svfiprintf_r+0x152>
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	eba0 000a 	sub.w	r0, r0, sl
 8008202:	fa03 f000 	lsl.w	r0, r3, r0
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	4303      	orrs	r3, r0
 800820a:	3401      	adds	r4, #1
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008212:	4826      	ldr	r0, [pc, #152]	; (80082ac <_svfiprintf_r+0x1f0>)
 8008214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008218:	2206      	movs	r2, #6
 800821a:	f7f7 ffe1 	bl	80001e0 <memchr>
 800821e:	2800      	cmp	r0, #0
 8008220:	d038      	beq.n	8008294 <_svfiprintf_r+0x1d8>
 8008222:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <_svfiprintf_r+0x1f4>)
 8008224:	bb1b      	cbnz	r3, 800826e <_svfiprintf_r+0x1b2>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	3307      	adds	r3, #7
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	3308      	adds	r3, #8
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008234:	4433      	add	r3, r6
 8008236:	9309      	str	r3, [sp, #36]	; 0x24
 8008238:	e767      	b.n	800810a <_svfiprintf_r+0x4e>
 800823a:	fb0c 3202 	mla	r2, ip, r2, r3
 800823e:	460c      	mov	r4, r1
 8008240:	2001      	movs	r0, #1
 8008242:	e7a5      	b.n	8008190 <_svfiprintf_r+0xd4>
 8008244:	2300      	movs	r3, #0
 8008246:	3401      	adds	r4, #1
 8008248:	9305      	str	r3, [sp, #20]
 800824a:	4619      	mov	r1, r3
 800824c:	f04f 0c0a 	mov.w	ip, #10
 8008250:	4620      	mov	r0, r4
 8008252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008256:	3a30      	subs	r2, #48	; 0x30
 8008258:	2a09      	cmp	r2, #9
 800825a:	d903      	bls.n	8008264 <_svfiprintf_r+0x1a8>
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0c5      	beq.n	80081ec <_svfiprintf_r+0x130>
 8008260:	9105      	str	r1, [sp, #20]
 8008262:	e7c3      	b.n	80081ec <_svfiprintf_r+0x130>
 8008264:	fb0c 2101 	mla	r1, ip, r1, r2
 8008268:	4604      	mov	r4, r0
 800826a:	2301      	movs	r3, #1
 800826c:	e7f0      	b.n	8008250 <_svfiprintf_r+0x194>
 800826e:	ab03      	add	r3, sp, #12
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	462a      	mov	r2, r5
 8008274:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <_svfiprintf_r+0x1f8>)
 8008276:	a904      	add	r1, sp, #16
 8008278:	4638      	mov	r0, r7
 800827a:	f3af 8000 	nop.w
 800827e:	1c42      	adds	r2, r0, #1
 8008280:	4606      	mov	r6, r0
 8008282:	d1d6      	bne.n	8008232 <_svfiprintf_r+0x176>
 8008284:	89ab      	ldrh	r3, [r5, #12]
 8008286:	065b      	lsls	r3, r3, #25
 8008288:	f53f af2c 	bmi.w	80080e4 <_svfiprintf_r+0x28>
 800828c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828e:	b01d      	add	sp, #116	; 0x74
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	462a      	mov	r2, r5
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <_svfiprintf_r+0x1f8>)
 800829c:	a904      	add	r1, sp, #16
 800829e:	4638      	mov	r0, r7
 80082a0:	f000 f87a 	bl	8008398 <_printf_i>
 80082a4:	e7eb      	b.n	800827e <_svfiprintf_r+0x1c2>
 80082a6:	bf00      	nop
 80082a8:	08008954 	.word	0x08008954
 80082ac:	0800895e 	.word	0x0800895e
 80082b0:	00000000 	.word	0x00000000
 80082b4:	08008005 	.word	0x08008005
 80082b8:	0800895a 	.word	0x0800895a

080082bc <_printf_common>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	4616      	mov	r6, r2
 80082c2:	4699      	mov	r9, r3
 80082c4:	688a      	ldr	r2, [r1, #8]
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bfb8      	it	lt
 80082d0:	4613      	movlt	r3, r2
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d8:	4607      	mov	r7, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b10a      	cbz	r2, 80082e2 <_printf_common+0x26>
 80082de:	3301      	adds	r3, #1
 80082e0:	6033      	str	r3, [r6, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	0699      	lsls	r1, r3, #26
 80082e6:	bf42      	ittt	mi
 80082e8:	6833      	ldrmi	r3, [r6, #0]
 80082ea:	3302      	addmi	r3, #2
 80082ec:	6033      	strmi	r3, [r6, #0]
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	f015 0506 	ands.w	r5, r5, #6
 80082f4:	d106      	bne.n	8008304 <_printf_common+0x48>
 80082f6:	f104 0a19 	add.w	sl, r4, #25
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	6832      	ldr	r2, [r6, #0]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	42ab      	cmp	r3, r5
 8008302:	dc26      	bgt.n	8008352 <_printf_common+0x96>
 8008304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008308:	1e13      	subs	r3, r2, #0
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	bf18      	it	ne
 800830e:	2301      	movne	r3, #1
 8008310:	0692      	lsls	r2, r2, #26
 8008312:	d42b      	bmi.n	800836c <_printf_common+0xb0>
 8008314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008318:	4649      	mov	r1, r9
 800831a:	4638      	mov	r0, r7
 800831c:	47c0      	blx	r8
 800831e:	3001      	adds	r0, #1
 8008320:	d01e      	beq.n	8008360 <_printf_common+0xa4>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	68e5      	ldr	r5, [r4, #12]
 8008326:	6832      	ldr	r2, [r6, #0]
 8008328:	f003 0306 	and.w	r3, r3, #6
 800832c:	2b04      	cmp	r3, #4
 800832e:	bf08      	it	eq
 8008330:	1aad      	subeq	r5, r5, r2
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	bf0c      	ite	eq
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	2500      	movne	r5, #0
 800833e:	4293      	cmp	r3, r2
 8008340:	bfc4      	itt	gt
 8008342:	1a9b      	subgt	r3, r3, r2
 8008344:	18ed      	addgt	r5, r5, r3
 8008346:	2600      	movs	r6, #0
 8008348:	341a      	adds	r4, #26
 800834a:	42b5      	cmp	r5, r6
 800834c:	d11a      	bne.n	8008384 <_printf_common+0xc8>
 800834e:	2000      	movs	r0, #0
 8008350:	e008      	b.n	8008364 <_printf_common+0xa8>
 8008352:	2301      	movs	r3, #1
 8008354:	4652      	mov	r2, sl
 8008356:	4649      	mov	r1, r9
 8008358:	4638      	mov	r0, r7
 800835a:	47c0      	blx	r8
 800835c:	3001      	adds	r0, #1
 800835e:	d103      	bne.n	8008368 <_printf_common+0xac>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008368:	3501      	adds	r5, #1
 800836a:	e7c6      	b.n	80082fa <_printf_common+0x3e>
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	2030      	movs	r0, #48	; 0x30
 8008372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008376:	4422      	add	r2, r4
 8008378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800837c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008380:	3302      	adds	r3, #2
 8008382:	e7c7      	b.n	8008314 <_printf_common+0x58>
 8008384:	2301      	movs	r3, #1
 8008386:	4622      	mov	r2, r4
 8008388:	4649      	mov	r1, r9
 800838a:	4638      	mov	r0, r7
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d0e6      	beq.n	8008360 <_printf_common+0xa4>
 8008392:	3601      	adds	r6, #1
 8008394:	e7d9      	b.n	800834a <_printf_common+0x8e>
	...

08008398 <_printf_i>:
 8008398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	7e0f      	ldrb	r7, [r1, #24]
 800839e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083a0:	2f78      	cmp	r7, #120	; 0x78
 80083a2:	4691      	mov	r9, r2
 80083a4:	4680      	mov	r8, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	469a      	mov	sl, r3
 80083aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ae:	d807      	bhi.n	80083c0 <_printf_i+0x28>
 80083b0:	2f62      	cmp	r7, #98	; 0x62
 80083b2:	d80a      	bhi.n	80083ca <_printf_i+0x32>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f000 80d8 	beq.w	800856a <_printf_i+0x1d2>
 80083ba:	2f58      	cmp	r7, #88	; 0x58
 80083bc:	f000 80a3 	beq.w	8008506 <_printf_i+0x16e>
 80083c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c8:	e03a      	b.n	8008440 <_printf_i+0xa8>
 80083ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ce:	2b15      	cmp	r3, #21
 80083d0:	d8f6      	bhi.n	80083c0 <_printf_i+0x28>
 80083d2:	a101      	add	r1, pc, #4	; (adr r1, 80083d8 <_printf_i+0x40>)
 80083d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008445 	.word	0x08008445
 80083e0:	080083c1 	.word	0x080083c1
 80083e4:	080083c1 	.word	0x080083c1
 80083e8:	080083c1 	.word	0x080083c1
 80083ec:	080083c1 	.word	0x080083c1
 80083f0:	08008445 	.word	0x08008445
 80083f4:	080083c1 	.word	0x080083c1
 80083f8:	080083c1 	.word	0x080083c1
 80083fc:	080083c1 	.word	0x080083c1
 8008400:	080083c1 	.word	0x080083c1
 8008404:	08008551 	.word	0x08008551
 8008408:	08008475 	.word	0x08008475
 800840c:	08008533 	.word	0x08008533
 8008410:	080083c1 	.word	0x080083c1
 8008414:	080083c1 	.word	0x080083c1
 8008418:	08008573 	.word	0x08008573
 800841c:	080083c1 	.word	0x080083c1
 8008420:	08008475 	.word	0x08008475
 8008424:	080083c1 	.word	0x080083c1
 8008428:	080083c1 	.word	0x080083c1
 800842c:	0800853b 	.word	0x0800853b
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800843c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008440:	2301      	movs	r3, #1
 8008442:	e0a3      	b.n	800858c <_printf_i+0x1f4>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	6829      	ldr	r1, [r5, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	f101 0304 	add.w	r3, r1, #4
 800844e:	d50a      	bpl.n	8008466 <_printf_i+0xce>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	2e00      	cmp	r6, #0
 8008456:	da03      	bge.n	8008460 <_printf_i+0xc8>
 8008458:	232d      	movs	r3, #45	; 0x2d
 800845a:	4276      	negs	r6, r6
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008460:	485e      	ldr	r0, [pc, #376]	; (80085dc <_printf_i+0x244>)
 8008462:	230a      	movs	r3, #10
 8008464:	e019      	b.n	800849a <_printf_i+0x102>
 8008466:	680e      	ldr	r6, [r1, #0]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800846e:	bf18      	it	ne
 8008470:	b236      	sxthne	r6, r6
 8008472:	e7ef      	b.n	8008454 <_printf_i+0xbc>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	6029      	str	r1, [r5, #0]
 800847c:	0601      	lsls	r1, r0, #24
 800847e:	d501      	bpl.n	8008484 <_printf_i+0xec>
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0xf2>
 8008484:	0646      	lsls	r6, r0, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0xe8>
 8008488:	881e      	ldrh	r6, [r3, #0]
 800848a:	4854      	ldr	r0, [pc, #336]	; (80085dc <_printf_i+0x244>)
 800848c:	2f6f      	cmp	r7, #111	; 0x6f
 800848e:	bf0c      	ite	eq
 8008490:	2308      	moveq	r3, #8
 8008492:	230a      	movne	r3, #10
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800849a:	6865      	ldr	r5, [r4, #4]
 800849c:	60a5      	str	r5, [r4, #8]
 800849e:	2d00      	cmp	r5, #0
 80084a0:	bfa2      	ittt	ge
 80084a2:	6821      	ldrge	r1, [r4, #0]
 80084a4:	f021 0104 	bicge.w	r1, r1, #4
 80084a8:	6021      	strge	r1, [r4, #0]
 80084aa:	b90e      	cbnz	r6, 80084b0 <_printf_i+0x118>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d04d      	beq.n	800854c <_printf_i+0x1b4>
 80084b0:	4615      	mov	r5, r2
 80084b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084b6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ba:	5dc7      	ldrb	r7, [r0, r7]
 80084bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084c0:	4637      	mov	r7, r6
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	460e      	mov	r6, r1
 80084c6:	d9f4      	bls.n	80084b2 <_printf_i+0x11a>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d10b      	bne.n	80084e4 <_printf_i+0x14c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	07de      	lsls	r6, r3, #31
 80084d0:	d508      	bpl.n	80084e4 <_printf_i+0x14c>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	bfde      	ittt	le
 80084da:	2330      	movle	r3, #48	; 0x30
 80084dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	6122      	str	r2, [r4, #16]
 80084e8:	f8cd a000 	str.w	sl, [sp]
 80084ec:	464b      	mov	r3, r9
 80084ee:	aa03      	add	r2, sp, #12
 80084f0:	4621      	mov	r1, r4
 80084f2:	4640      	mov	r0, r8
 80084f4:	f7ff fee2 	bl	80082bc <_printf_common>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d14c      	bne.n	8008596 <_printf_i+0x1fe>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	4835      	ldr	r0, [pc, #212]	; (80085dc <_printf_i+0x244>)
 8008508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800850c:	6829      	ldr	r1, [r5, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f851 6b04 	ldr.w	r6, [r1], #4
 8008514:	6029      	str	r1, [r5, #0]
 8008516:	061d      	lsls	r5, r3, #24
 8008518:	d514      	bpl.n	8008544 <_printf_i+0x1ac>
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	bf44      	itt	mi
 800851e:	f043 0320 	orrmi.w	r3, r3, #32
 8008522:	6023      	strmi	r3, [r4, #0]
 8008524:	b91e      	cbnz	r6, 800852e <_printf_i+0x196>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	f023 0320 	bic.w	r3, r3, #32
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	2310      	movs	r3, #16
 8008530:	e7b0      	b.n	8008494 <_printf_i+0xfc>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f043 0320 	orr.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	2378      	movs	r3, #120	; 0x78
 800853c:	4828      	ldr	r0, [pc, #160]	; (80085e0 <_printf_i+0x248>)
 800853e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008542:	e7e3      	b.n	800850c <_printf_i+0x174>
 8008544:	0659      	lsls	r1, r3, #25
 8008546:	bf48      	it	mi
 8008548:	b2b6      	uxthmi	r6, r6
 800854a:	e7e6      	b.n	800851a <_printf_i+0x182>
 800854c:	4615      	mov	r5, r2
 800854e:	e7bb      	b.n	80084c8 <_printf_i+0x130>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	6826      	ldr	r6, [r4, #0]
 8008554:	6961      	ldr	r1, [r4, #20]
 8008556:	1d18      	adds	r0, r3, #4
 8008558:	6028      	str	r0, [r5, #0]
 800855a:	0635      	lsls	r5, r6, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	d501      	bpl.n	8008564 <_printf_i+0x1cc>
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	e002      	b.n	800856a <_printf_i+0x1d2>
 8008564:	0670      	lsls	r0, r6, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0x1c8>
 8008568:	8019      	strh	r1, [r3, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	4615      	mov	r5, r2
 8008570:	e7ba      	b.n	80084e8 <_printf_i+0x150>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	602a      	str	r2, [r5, #0]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	2100      	movs	r1, #0
 800857e:	4628      	mov	r0, r5
 8008580:	f7f7 fe2e 	bl	80001e0 <memchr>
 8008584:	b108      	cbz	r0, 800858a <_printf_i+0x1f2>
 8008586:	1b40      	subs	r0, r0, r5
 8008588:	6060      	str	r0, [r4, #4]
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008594:	e7a8      	b.n	80084e8 <_printf_i+0x150>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	462a      	mov	r2, r5
 800859a:	4649      	mov	r1, r9
 800859c:	4640      	mov	r0, r8
 800859e:	47d0      	blx	sl
 80085a0:	3001      	adds	r0, #1
 80085a2:	d0ab      	beq.n	80084fc <_printf_i+0x164>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	079b      	lsls	r3, r3, #30
 80085a8:	d413      	bmi.n	80085d2 <_printf_i+0x23a>
 80085aa:	68e0      	ldr	r0, [r4, #12]
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	4298      	cmp	r0, r3
 80085b0:	bfb8      	it	lt
 80085b2:	4618      	movlt	r0, r3
 80085b4:	e7a4      	b.n	8008500 <_printf_i+0x168>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4632      	mov	r2, r6
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	47d0      	blx	sl
 80085c0:	3001      	adds	r0, #1
 80085c2:	d09b      	beq.n	80084fc <_printf_i+0x164>
 80085c4:	3501      	adds	r5, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	9903      	ldr	r1, [sp, #12]
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	42ab      	cmp	r3, r5
 80085ce:	dcf2      	bgt.n	80085b6 <_printf_i+0x21e>
 80085d0:	e7eb      	b.n	80085aa <_printf_i+0x212>
 80085d2:	2500      	movs	r5, #0
 80085d4:	f104 0619 	add.w	r6, r4, #25
 80085d8:	e7f5      	b.n	80085c6 <_printf_i+0x22e>
 80085da:	bf00      	nop
 80085dc:	08008965 	.word	0x08008965
 80085e0:	08008976 	.word	0x08008976

080085e4 <memcpy>:
 80085e4:	440a      	add	r2, r1
 80085e6:	4291      	cmp	r1, r2
 80085e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ec:	d100      	bne.n	80085f0 <memcpy+0xc>
 80085ee:	4770      	bx	lr
 80085f0:	b510      	push	{r4, lr}
 80085f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d1f9      	bne.n	80085f2 <memcpy+0xe>
 80085fe:	bd10      	pop	{r4, pc}

08008600 <memmove>:
 8008600:	4288      	cmp	r0, r1
 8008602:	b510      	push	{r4, lr}
 8008604:	eb01 0402 	add.w	r4, r1, r2
 8008608:	d902      	bls.n	8008610 <memmove+0x10>
 800860a:	4284      	cmp	r4, r0
 800860c:	4623      	mov	r3, r4
 800860e:	d807      	bhi.n	8008620 <memmove+0x20>
 8008610:	1e43      	subs	r3, r0, #1
 8008612:	42a1      	cmp	r1, r4
 8008614:	d008      	beq.n	8008628 <memmove+0x28>
 8008616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800861a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800861e:	e7f8      	b.n	8008612 <memmove+0x12>
 8008620:	4402      	add	r2, r0
 8008622:	4601      	mov	r1, r0
 8008624:	428a      	cmp	r2, r1
 8008626:	d100      	bne.n	800862a <memmove+0x2a>
 8008628:	bd10      	pop	{r4, pc}
 800862a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800862e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008632:	e7f7      	b.n	8008624 <memmove+0x24>

08008634 <_free_r>:
 8008634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008636:	2900      	cmp	r1, #0
 8008638:	d044      	beq.n	80086c4 <_free_r+0x90>
 800863a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863e:	9001      	str	r0, [sp, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f1a1 0404 	sub.w	r4, r1, #4
 8008646:	bfb8      	it	lt
 8008648:	18e4      	addlt	r4, r4, r3
 800864a:	f000 f913 	bl	8008874 <__malloc_lock>
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <_free_r+0x94>)
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x30>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008660:	f000 b90e 	b.w	8008880 <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x46>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x22>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x50>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x46>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1855      	adds	r5, r2, r1
 8008688:	42a5      	cmp	r5, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x70>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	4421      	add	r1, r4
 8008690:	1854      	adds	r4, r2, r1
 8008692:	42a3      	cmp	r3, r4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x26>
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	6053      	str	r3, [r2, #4]
 800869e:	4421      	add	r1, r4
 80086a0:	6011      	str	r1, [r2, #0]
 80086a2:	e7da      	b.n	800865a <_free_r+0x26>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x78>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x26>
 80086ac:	6825      	ldr	r5, [r4, #0]
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf04      	itt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	bf04      	itt	eq
 80086bc:	1949      	addeq	r1, r1, r5
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	6054      	str	r4, [r2, #4]
 80086c2:	e7ca      	b.n	800865a <_free_r+0x26>
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	20001e04 	.word	0x20001e04

080086cc <sbrk_aligned>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4e0e      	ldr	r6, [pc, #56]	; (8008708 <sbrk_aligned+0x3c>)
 80086d0:	460c      	mov	r4, r1
 80086d2:	6831      	ldr	r1, [r6, #0]
 80086d4:	4605      	mov	r5, r0
 80086d6:	b911      	cbnz	r1, 80086de <sbrk_aligned+0x12>
 80086d8:	f000 f8bc 	bl	8008854 <_sbrk_r>
 80086dc:	6030      	str	r0, [r6, #0]
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 f8b7 	bl	8008854 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d00a      	beq.n	8008700 <sbrk_aligned+0x34>
 80086ea:	1cc4      	adds	r4, r0, #3
 80086ec:	f024 0403 	bic.w	r4, r4, #3
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d007      	beq.n	8008704 <sbrk_aligned+0x38>
 80086f4:	1a21      	subs	r1, r4, r0
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 f8ac 	bl	8008854 <_sbrk_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d101      	bne.n	8008704 <sbrk_aligned+0x38>
 8008700:	f04f 34ff 	mov.w	r4, #4294967295
 8008704:	4620      	mov	r0, r4
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	20001e08 	.word	0x20001e08

0800870c <_malloc_r>:
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	1ccd      	adds	r5, r1, #3
 8008712:	f025 0503 	bic.w	r5, r5, #3
 8008716:	3508      	adds	r5, #8
 8008718:	2d0c      	cmp	r5, #12
 800871a:	bf38      	it	cc
 800871c:	250c      	movcc	r5, #12
 800871e:	2d00      	cmp	r5, #0
 8008720:	4607      	mov	r7, r0
 8008722:	db01      	blt.n	8008728 <_malloc_r+0x1c>
 8008724:	42a9      	cmp	r1, r5
 8008726:	d905      	bls.n	8008734 <_malloc_r+0x28>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	2600      	movs	r6, #0
 800872e:	4630      	mov	r0, r6
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	4e2e      	ldr	r6, [pc, #184]	; (80087f0 <_malloc_r+0xe4>)
 8008736:	f000 f89d 	bl	8008874 <__malloc_lock>
 800873a:	6833      	ldr	r3, [r6, #0]
 800873c:	461c      	mov	r4, r3
 800873e:	bb34      	cbnz	r4, 800878e <_malloc_r+0x82>
 8008740:	4629      	mov	r1, r5
 8008742:	4638      	mov	r0, r7
 8008744:	f7ff ffc2 	bl	80086cc <sbrk_aligned>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	4604      	mov	r4, r0
 800874c:	d14d      	bne.n	80087ea <_malloc_r+0xde>
 800874e:	6834      	ldr	r4, [r6, #0]
 8008750:	4626      	mov	r6, r4
 8008752:	2e00      	cmp	r6, #0
 8008754:	d140      	bne.n	80087d8 <_malloc_r+0xcc>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	4631      	mov	r1, r6
 800875a:	4638      	mov	r0, r7
 800875c:	eb04 0803 	add.w	r8, r4, r3
 8008760:	f000 f878 	bl	8008854 <_sbrk_r>
 8008764:	4580      	cmp	r8, r0
 8008766:	d13a      	bne.n	80087de <_malloc_r+0xd2>
 8008768:	6821      	ldr	r1, [r4, #0]
 800876a:	3503      	adds	r5, #3
 800876c:	1a6d      	subs	r5, r5, r1
 800876e:	f025 0503 	bic.w	r5, r5, #3
 8008772:	3508      	adds	r5, #8
 8008774:	2d0c      	cmp	r5, #12
 8008776:	bf38      	it	cc
 8008778:	250c      	movcc	r5, #12
 800877a:	4629      	mov	r1, r5
 800877c:	4638      	mov	r0, r7
 800877e:	f7ff ffa5 	bl	80086cc <sbrk_aligned>
 8008782:	3001      	adds	r0, #1
 8008784:	d02b      	beq.n	80087de <_malloc_r+0xd2>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	442b      	add	r3, r5
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	e00e      	b.n	80087ac <_malloc_r+0xa0>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	1b52      	subs	r2, r2, r5
 8008792:	d41e      	bmi.n	80087d2 <_malloc_r+0xc6>
 8008794:	2a0b      	cmp	r2, #11
 8008796:	d916      	bls.n	80087c6 <_malloc_r+0xba>
 8008798:	1961      	adds	r1, r4, r5
 800879a:	42a3      	cmp	r3, r4
 800879c:	6025      	str	r5, [r4, #0]
 800879e:	bf18      	it	ne
 80087a0:	6059      	strne	r1, [r3, #4]
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	bf08      	it	eq
 80087a6:	6031      	streq	r1, [r6, #0]
 80087a8:	5162      	str	r2, [r4, r5]
 80087aa:	604b      	str	r3, [r1, #4]
 80087ac:	4638      	mov	r0, r7
 80087ae:	f104 060b 	add.w	r6, r4, #11
 80087b2:	f000 f865 	bl	8008880 <__malloc_unlock>
 80087b6:	f026 0607 	bic.w	r6, r6, #7
 80087ba:	1d23      	adds	r3, r4, #4
 80087bc:	1af2      	subs	r2, r6, r3
 80087be:	d0b6      	beq.n	800872e <_malloc_r+0x22>
 80087c0:	1b9b      	subs	r3, r3, r6
 80087c2:	50a3      	str	r3, [r4, r2]
 80087c4:	e7b3      	b.n	800872e <_malloc_r+0x22>
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	bf0c      	ite	eq
 80087cc:	6032      	streq	r2, [r6, #0]
 80087ce:	605a      	strne	r2, [r3, #4]
 80087d0:	e7ec      	b.n	80087ac <_malloc_r+0xa0>
 80087d2:	4623      	mov	r3, r4
 80087d4:	6864      	ldr	r4, [r4, #4]
 80087d6:	e7b2      	b.n	800873e <_malloc_r+0x32>
 80087d8:	4634      	mov	r4, r6
 80087da:	6876      	ldr	r6, [r6, #4]
 80087dc:	e7b9      	b.n	8008752 <_malloc_r+0x46>
 80087de:	230c      	movs	r3, #12
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	4638      	mov	r0, r7
 80087e4:	f000 f84c 	bl	8008880 <__malloc_unlock>
 80087e8:	e7a1      	b.n	800872e <_malloc_r+0x22>
 80087ea:	6025      	str	r5, [r4, #0]
 80087ec:	e7de      	b.n	80087ac <_malloc_r+0xa0>
 80087ee:	bf00      	nop
 80087f0:	20001e04 	.word	0x20001e04

080087f4 <_realloc_r>:
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	4680      	mov	r8, r0
 80087fa:	4614      	mov	r4, r2
 80087fc:	460e      	mov	r6, r1
 80087fe:	b921      	cbnz	r1, 800880a <_realloc_r+0x16>
 8008800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008804:	4611      	mov	r1, r2
 8008806:	f7ff bf81 	b.w	800870c <_malloc_r>
 800880a:	b92a      	cbnz	r2, 8008818 <_realloc_r+0x24>
 800880c:	f7ff ff12 	bl	8008634 <_free_r>
 8008810:	4625      	mov	r5, r4
 8008812:	4628      	mov	r0, r5
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	f000 f838 	bl	800888c <_malloc_usable_size_r>
 800881c:	4284      	cmp	r4, r0
 800881e:	4607      	mov	r7, r0
 8008820:	d802      	bhi.n	8008828 <_realloc_r+0x34>
 8008822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008826:	d812      	bhi.n	800884e <_realloc_r+0x5a>
 8008828:	4621      	mov	r1, r4
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff ff6e 	bl	800870c <_malloc_r>
 8008830:	4605      	mov	r5, r0
 8008832:	2800      	cmp	r0, #0
 8008834:	d0ed      	beq.n	8008812 <_realloc_r+0x1e>
 8008836:	42bc      	cmp	r4, r7
 8008838:	4622      	mov	r2, r4
 800883a:	4631      	mov	r1, r6
 800883c:	bf28      	it	cs
 800883e:	463a      	movcs	r2, r7
 8008840:	f7ff fed0 	bl	80085e4 <memcpy>
 8008844:	4631      	mov	r1, r6
 8008846:	4640      	mov	r0, r8
 8008848:	f7ff fef4 	bl	8008634 <_free_r>
 800884c:	e7e1      	b.n	8008812 <_realloc_r+0x1e>
 800884e:	4635      	mov	r5, r6
 8008850:	e7df      	b.n	8008812 <_realloc_r+0x1e>
	...

08008854 <_sbrk_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	; (8008870 <_sbrk_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f8 f86a 	bl	8000938 <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_sbrk_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_sbrk_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20001e0c 	.word	0x20001e0c

08008874 <__malloc_lock>:
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <__malloc_lock+0x8>)
 8008876:	f000 b811 	b.w	800889c <__retarget_lock_acquire_recursive>
 800887a:	bf00      	nop
 800887c:	20001e10 	.word	0x20001e10

08008880 <__malloc_unlock>:
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__malloc_unlock+0x8>)
 8008882:	f000 b80c 	b.w	800889e <__retarget_lock_release_recursive>
 8008886:	bf00      	nop
 8008888:	20001e10 	.word	0x20001e10

0800888c <_malloc_usable_size_r>:
 800888c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008890:	1f18      	subs	r0, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	bfbc      	itt	lt
 8008896:	580b      	ldrlt	r3, [r1, r0]
 8008898:	18c0      	addlt	r0, r0, r3
 800889a:	4770      	bx	lr

0800889c <__retarget_lock_acquire_recursive>:
 800889c:	4770      	bx	lr

0800889e <__retarget_lock_release_recursive>:
 800889e:	4770      	bx	lr

080088a0 <_init>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	bf00      	nop
 80088a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a6:	bc08      	pop	{r3}
 80088a8:	469e      	mov	lr, r3
 80088aa:	4770      	bx	lr

080088ac <_fini>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr
